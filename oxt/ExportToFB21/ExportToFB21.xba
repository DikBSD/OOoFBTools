<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ExportToFB21" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Public sCurDocFile As String
Public oTextOutputStream As Object
Public sBookAnnotation() As String &apos; массив хранит &quot;обработанную&quot; Аннотацию на Книгу
Public sBodyParagraphs() As String &apos; массив хранит &quot;обработанные&quot; абзацы Книги
Public sLinksTo() As String	&apos; массив ссылок КУДА и их ID
Public sConvertorName As String &apos; название конвертора

Private lCurrentElement As Long &apos; номер текущего элемента структуры - для создания текста документа

Sub ExportToFB21
	Dim oDoc As Object
	sConvertorName = &quot;ExportToFB2.1&quot;
	
	&apos; файл пользовательских стилей
	sStylesFilename = pmxCurDir() &amp; &quot;/ExportToFB21/styles.txt&quot;
	
	&apos; АЛГОРИТМ - Очень ВАЖНО!!!
	&apos; т.к. конвертор развивается, и в диалоге Переопределения пользовательских стилей появляются НОВЫЕ поля стилей,
	&apos; а у пользователей УЖЕ СОХРАНЕН файл styles.txt, где данных для этих новых стилей нет,
	&apos; то при работе конвертора может произойти либо ошибка, либо экспорт выделенных новыми стилями абзацев
	&apos; будет сделан, как просто абзацы (&lt;p&gt;......&lt;/p&gt;), что не верно.
	&apos; Поэтому, сначала устанавливаем значения переменных по умолчанию (SetStylesVarsDefault),
	&apos; а потом - считываем из файла значения стилей в переменные (ReadStylesInVars).
	&apos; Для тех новых полей, которых еще нет в файле styles.txt значения будут по умолчанию, а для остальных - считаны из файла.
	&apos; Когда же User запустит форму и пересохранит ВСЕ стили, то вне переменные и контролы будут иметь значения из файла!
	
	&apos; Установка стилей по умолчанию
	SetStylesVarsDefault
	&apos; Только теперь загружаем стили из файла
	ReadStylesInVars
	
	Dim oOutputStream As Object
	Dim oFileAccess As Object

	oFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTextOutputStream = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	oDoc = ThisComponent

	If oDoc.hasLocation() Then
		sCurDocFile = oDoc.getURL
	Else
		MsgBox &quot;Сохраните ООо файл&quot;, 64, sConvertorName
		Exit Sub
	End If
	Mid(sCurDocFile, Len(sCurDocFile)-2, 3, &quot;fb2&quot;)
	
	If Not InfoDlgExec Then
		Exit Sub
	End If
	
	oProgressBar.start(&quot;Экспортирование в FB2: Анализ&quot;, oDoc.ParagraphCount+50)
	oProgressBar.setValue(0)
	
	&apos; запускаем парсинг всего текста
	DocumentParser
	
	&apos; Создание fb2 файла
	oOutputStream = oFileAccess.openFileWrite(ConvertToUrl(oInfoDlg.Model.FilenameTextField.Text))
	oOutputStream.truncate()
	oTextOutputStream.setOutputStream(oOutputStream)
	oTextOutputStream.setEncoding(oInfoDlg.Model.Codepage.Text)
	
	&apos; печатаем данные из &lt;description&gt;
	SaveDescription
	
	&apos; печатаем данные из &lt;body&gt;
	oTextOutputStream.writeString(&quot;&lt;body&gt;&quot; &amp; chr(10))
	SaveBody	

	oTextOutputStream.writeString(&quot;&lt;/body&gt;&quot; &amp; chr(10))
	
	If UBound(sFootnoteText()) &lt;&gt; -1 Then
		SaveNotes
	End If
	oProgressBar.end	
	oTextOutputStream.writeString(&quot;&lt;/FictionBook&gt;&quot;&amp;chr(10))
	oTextOutputStream.closeOutput()

	MsgBox &quot;Создание книги в fb2 формате завершено!&quot;, 64, sConvertorName
End Sub

Function SaveCloseSection(nCount As Integer) As Long
	Dim i As Integer
	If nCount &gt; 0 Then
		For i = 0 To nCount-1
			oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
		Next i
	End If
End Function

Function IsLevel(sStyle As String) As Boolean
	&apos; Если аргумент sStyle - это Уровень, то возвращается True, иначе - False
	Select Case sStyle
			Case sStyleLevel1
				IsLevel = True
			Case sStyleLevel2
				IsLevel = True
			Case sStyleLevel3
				IsLevel = True
			Case sStyleLevel4
				IsLevel = True
			Case sStyleLevel5
				IsLevel = True
			Case sStyleLevel6
				IsLevel = True
			Case sStyleLevel7
				IsLevel = True
			Case sStyleLevel8
				IsLevel = True
			Case sStyleLevel9
				IsLevel = True
			Case sStyleLevel10
				IsLevel = True
			Case Else &apos; это не Уровень
				IsLevel = False
		End Select
End Function

Function IndexOf1Section(sArray As String) As Long
	&apos; индекс 1-й секции
	Dim i As Long
	For i = 0 To UBound(sArray)
		If IsLevel(sArray(i,1)) = True Then
			IndexOf1Section = i
			Exit For
		Else
			IndexOf1Section = -1
		End If
	Next i
End Function

Function IndexOfEndSection(sArray As String) As Long
	&apos; индекс последней секции
	Dim i As Long
	For i = UBound(sArray) To 0 Step -1 
		If  IsLevel(sArray(i,1)) = True Then
			IndexOfEndSection = i
			Exit For
		Else
			IndexOfEndSection = -1
		End If
	Next i
End Function

Function GetCountSection(sArray As String, lIndexOfCurrentLevel As Long, lIndexOfNextLevel As Long, lIndexOfEndSection As Long) As Integer
	&apos; сравнение по индексам, расчет по номерам уровней
	If lIndexOfCurrentLevel &lt; lIndexOfEndSection Then 
		GetCountSection = ( GetLevelNumber(sArray(lIndexOfCurrentLevel,1)) - _
							GetLevelNumber(sArray(lIndexOfNextLevel,1)) ) + 1
	Else
		GetCountSection = GetLevelNumber(sArray(lIndexOfEndSection,1))
	End If
End Function

Function GetIndexOfNextLevel(sArray As String, lIndexOfCurrentLevel As Long) As Long
	Dim i As Long, sInput As String
	&apos; Ищем следующий индекс уровеня после LevelCurrent
	If lIndexOfCurrentLevel = UBound(sArray) Then
		GetIndexOfNextLevel = lIndexOfCurrentLevel
		Exit Function
	End If
	For i = lIndexOfCurrentLevel+1 To UBound(sArray)
		sInput = sArray(i,1)
		If  IsLevel(sInput) = True Then
			GetIndexOfNextLevel = i
			Exit For
		End If
	Next i
End Function

Function GetLevelNumber(Level As String) As Integer
	&apos; Возвращает номер уровня (число) из строки уровня
	Select Case Level
		Case sStyleLevel1
			GetLevelNumber = 1
		Case sStyleLevel2
			GetLevelNumber = 2
		Case sStyleLevel3
			GetLevelNumber = 3
		Case sStyleLevel4
			GetLevelNumber = 4
		Case sStyleLevel5
			GetLevelNumber = 5
		Case sStyleLevel6
			GetLevelNumber = 6
		Case sStyleLevel7
			GetLevelNumber = 7
		Case sStyleLevel8
			GetLevelNumber = 8
		Case sStyleLevel9
			GetLevelNumber = 9
		Case sStyleLevel10
			GetLevelNumber = 10
	End Select
End Function

Function SaveElements(sArray As String, sParaStyleName As String, sPara As String, bBody As Boolean)
	&apos; перебор по стилям
	Select Case sParaStyleName
		Case sStylePoemTitle
			oTextOutputStream.writeString(MakePoem(sArray, bBody) &amp; chr(10))
		Case sStylePoemSubTitle
			oTextOutputStream.writeString(MakePoem(sArray, bBody) &amp; chr(10))
		Case sStylePoem
			oTextOutputStream.writeString(MakePoem(sArray, bBody) &amp; chr(10))
		Case sStyleEpigraph
			oTextOutputStream.writeString(MakeEpigraph(sArray, sStyleEpigraph, sStyleEpigraphAuthor, bBody) &amp; chr(10))
		Case sStyleCite
			oTextOutputStream.writeString(MakeCite(sArray, bBody) &amp; chr(10))
		Case sStyleCiteSubTitle
			oTextOutputStream.writeString(MakeCite(sArray, bBody) &amp; chr(10))
		Case sStyleAnnotation
			oTextOutputStream.writeString(MakeAnnotation(sArray, bBody) &amp; chr(10))
		Case sStyleAnnotationSubTitle
			oTextOutputStream.writeString(MakeAnnotation(sArray, bBody) &amp; chr(10))
		Case sStyleSubTitle
			oTextOutputStream.writeString(MakeSubTitle(sArray, sStyleSubTitle, bMergeSubTitle, bBody) &amp; chr(10))
		Case sStyleLevel1
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel2
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel3
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel4
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel5
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel6
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel7
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel8
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel9
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case sStyleLevel10
			oTextOutputStream.writeString(MakeSection(sArray, sParaStyleName, bBody) &amp; chr(10))
		Case &quot;&quot; &apos; &lt;empty-line/&gt;
			If bDelEL = False Then
				oTextOutputStream.writeString(&quot;&lt;empty-line/&gt;&quot; &amp; chr(10))
			End If
			lCurrentElement = lCurrentElement+1
		Case &quot;Table&quot; 
			oTextOutputStream.writeString(sPara &amp; chr(10))
			lCurrentElement = lCurrentElement+1
		Case &quot;Image&quot; 
			oTextOutputStream.writeString(sPara &amp; chr(10))
			lCurrentElement = lCurrentElement+1
		Case Else &apos; что-то другое или просто параграф - записываем как параграф
			Dim sP As String
			If bDocLinks = True Then
				&apos; обработка ссылок внутри документа
				Dim sID As String
				If FindIndexForID(lCurrentElement, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
					sP = &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
					sP = &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				End If
			Else
				sP = &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			End If
			oTextOutputStream.writeString(sP)
			lCurrentElement = lCurrentElement+1
	End Select
End Function

Function MakeBookTitle As String
	&apos; формируем заглавие книги
	If lBATIndex &gt; -1 Then
		lCurrentElement = lBATIndex &apos; если есть автор или название книги, то все, что &quot;выше&quot; - игнорируем - служебная зона
		Dim sBT As String, l As Long, sID As String, sBookTag As String
		sBT = &quot;&lt;title&gt;&quot; &amp; chr(10)
		For l = lCurrentElement To UBound(sBodyParagraphs)
			If sBodyParagraphs(l,1) = sStyleBookTitle Then
				If bDocLinks = True Then
					&apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, True) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sBookTag = &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						sBookTag = &quot;&lt;p&gt;&quot; &apos; нет ни одной закладки
					End If
				Else
					sBookTag = &quot;&lt;p&gt;&quot;
				End If
				sBT = sBT &amp; sBookTag &amp; sBodyParagraphs(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				oProgressBar.setValue(l) &apos; Статусбар
			Else Exit For
			End If
		Next l
		lCurrentElement = l
		MakeBookTitle = sBT &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10)
	End If
End Function

Function MakePoemTitle(sArray As String, bBody As Boolean) As String
	Dim l As Long, sID As String, sPTag As String
	Dim sPoemTitle As String
	sPoemTitle = &quot;&quot;
	If bMergePoemTitle = True Then &apos; собираем Заголовки стиха, идущие один за другим в одну строку
		Dim nCount As Integer, nCountTag As String &apos; число заголовков с закладками
		nCount = 0
		nCountTag = 0
		For l = lCurrentElement To UBound(sArray)
			If sArray(l,1) = sStylePoemTitle Then
				If bDocLinks = True Then
					&apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sPTag = &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
						nCount = nCount+1 &apos;счетчик закладок
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						If nCount = 0 Then &apos; чтобы не &quot;затереть&quot; закладки вышестоящих заголовков
							sPTag = &quot;&lt;p&gt;&quot; &apos; нет ни одной закладки
						End If
					End If
				Else
					sPTag = &quot;&lt;p&gt;&quot;
				End If
				If nCountTag = 0 Then &apos; чтобы не добавлять и другие теги &lt;p id=&gt;
					sPoemTitle = sPoemTitle &amp; sPTag
					nCountTag = nCountTag+1 &apos;счетчик закладок
				End If
				sPoemTitle = sPoemTitle &amp; sArray(l,0) &amp;  &quot; &quot;
				oProgressBar.setValue(l) &apos; Статусбар
			Else Exit For
			End If
		Next l
		sPoemTitle = Mid(sPoemTitle, 1, Len(sPoemTitle)-1)
		sPoemTitle = sPoemTitle &amp; &quot;&lt;/p&gt;&quot;
		lCurrentElement = l
	Else &apos; Заголовки стиха не будут собираться в одну строку, а будут один под другим
		For l = lCurrentElement To UBound(sArray)
			If sArray(l,1) = sStylePoemTitle Then
				If bDocLinks = True Then
					&apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sPTag = &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						sPTag = &quot;&lt;p&gt;&quot; &apos; нет ни одной закладки
					End If
				Else
					sPTag = &quot;&lt;p&gt;&quot;
				End If
				sPoemTitle = sPoemTitle &amp; sPTag &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				oProgressBar.setValue(l) &apos; Статусбар
			Else Exit For
			End If
		Next l
		lCurrentElement = l
	End If
	If sPoemTitle &lt;&gt; &quot;&quot; Then
		MakePoemTitle = &quot;&lt;title&gt;&quot; &amp; sPoemTitle &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10)
	Else
		MakePoemTitle = &quot;&quot;
	End If
End Function

Function MakePoem(sArray As String, bBody As Boolean) As String
	Dim sPoem As String, l As Long, sID As String
	Dim sPoemTitle As String, sPoemEpigraph As String, sSwitch As String
	sPoem = &quot;&quot;
	&apos; Заголовок поэмы
	sPoemTitle = MakePoemTitle(sArray, bBody)
	If sPoemTitle &lt;&gt; &quot;&quot; Then &apos; стихи с заголовка
		sPoem = sPoem &amp; chr(10) &amp; sPoemTitle
	End If
	&apos; Эпиграф Поэмы
	If sArray(lCurrentElement,1) = sStyleEpigraph Then &apos; против зацикливания - из Поэмы в Эпиграф и обратно
		sPoemEpigraph = MakeEpigraph(sArray, sStyleEpigraph, sStyleEpigraphAuthor, bBody)
	End If

	If sPoemEpigraph &lt;&gt; &quot;&quot; Then &apos; стихи с эпиграфом
		sPoem = sPoem &amp; sPoemEpigraph
	End If
	&apos; Переключатель - Stanza или SubTitle Поэмы
	sSwitch = SwitchSubTitleStanza(sArray, bBody)
	If sSwitch &lt;&gt; &quot;&quot; Then
		sPoem = sPoem &amp; sSwitch
	End If
	
	&apos; Заглушка, на случай, если есть Заголовок и (или) Эпиграф поэмы, а обязательного Подзаголовка или Станзы - нет
	If (sPoemTitle &lt;&gt; &quot;&quot; OR sPoemEpigraph &lt;&gt; &quot;&quot;) AND sSwitch = &quot;&quot; Then
		sPoem = sPoem &amp; &quot;&lt;stanza&gt;&lt;v&gt;?&lt;/v&gt;&lt;/stanza&gt;&quot; &amp; chr(10)
	End If
	
	&apos; Авторы поэмы, если они есть
	sPoem = sPoem &amp; MakePoemAuthor(sArray, bBody)
	&apos; Дата написания поэмы, если она есть
	sPoem = sPoem &amp; MakePoemDate(sArray, bBody)

	MakePoem = &quot;&lt;poem&gt;&quot; &amp; sPoem &amp; &quot;&lt;/poem&gt;&quot;
End Function

Function SwitchSubTitleStanza(sArray As String, bBody As Boolean) As String
	Dim l As Long, sID As String, sText As String
	sText =  &quot;&quot;
	For l = lCurrentElement To UBound(sArray)
		If sArray(l,1) = sStylePoem Then
			sText = sText &amp; MakeStanza(sArray, bBody)
		ElseIf sArray(l,1) = sStylePoemSubTitle Then &apos; чередование &lt;stanza&gt; и &lt;subtitle&gt;
		&apos;	lCurrentElement = l
			sText = sText &amp; MakeSubTitle(sArray, sStylePoemSubTitle, bMergePoemSubTitle, bBody)
		&apos;	l = lCurrentElement-1
		Else
			Exit For
		End If
		oProgressBar.setValue(l) &apos; Статусбар
	Next l
	lCurrentElement = l
	If sText &lt;&gt; &quot;&quot; Then
		SwitchSubTitleStanza = sText
	Else
		SwitchSubTitleStanza = &quot;&quot;
	End If
End Function

Function MakeStanza(sArray As String, bBody As Boolean) As String
	Dim l As Long, sID As String, sStanza As String
	sStanza =  &quot;&quot;
	For l = lCurrentElement To UBound(sArray)
		If sArray(l,1) = sStylePoem Then
			If sArray(l,0) &lt;&gt; &quot;&quot; Then &apos; стих есть
				&apos; смотрим предыдущий элемент
				If l &gt;0 Then
					If sArray(l-1,1) &lt;&gt; sStylePoem Then &apos; не стих - открываем stanza
						sStanza = sStanza &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
					End If
				End If
				If bDocLinks = True Then &apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sStanza = sStanza &amp; &quot;&lt;v &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/v&gt;&quot; &amp; chr(10)
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						sStanza = sStanza &amp; &quot;&lt;v&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/v&gt;&quot; &amp; chr(10)
					End If
				Else
					sStanza = sStanza &amp; &quot;&lt;v&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/v&gt;&quot; &amp; chr(10)
				End If
				&apos; смотрим следующий элемент
				If l &lt; UBound(sArray) Then
					If sArray(l+1,1) &lt;&gt; sStylePoem Then &apos; не стих - закрываем stanza
						sStanza = sStanza &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10)
					End If
				End If
			Else &apos; пустой абзац-стих - закрываем stanza
				sStanza = sStanza &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10)
				&apos; смотрим следующий элемент
				If l &lt; UBound(sArray) Then
					If sArray(l+1,1) = sStylePoem Then &apos; стих - открываем stanza
						sStanza = sStanza &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
					End If
				End If
			End If
		Else Exit For
		End If
	Next l
	lCurrentElement = l
	If sStanza &lt;&gt; &quot;&quot; Then
		MakeStanza = sStanza
	Else
		MakeStanza = &quot;&quot;
	End If
End Function

Function MakePoemAuthor(sArray As String, bBody As Boolean) As String
	&apos; Авторы поэмы
	Dim sPoem As String, l As Long, sID As String
	l = lCurrentElement
	If sArray(lCurrentElement,1) = sStylePoemAuthor Then
		If bMergePoemAuthors = True Then &apos; собираем Авторов стиха, идущих один за другим в одну строку
			Dim nCount As Integer, nCountTag As Integer &apos; число авторов поэмы с закладками
			nCount = 0
			nCountTag = 0
			Dim sAPTag As String
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStylePoemAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sAPTag = &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
							nCount = nCount+1 &apos;счетчик закладок
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							If nCount = 0 Then &apos; чтобы не &quot;затереть&quot; закладки вышестоящих авторов
								sAPTag = &quot;&lt;text-author&gt;&quot; &apos; нет ни одной закладки
							End If
						End If
					Else
						sAPTag = &quot;&lt;text-author&gt;&quot;
					End If
					If nCountTag = 0 Then &apos; чтобы не добавлять и другие теги &lt;text-author id=&gt;
						sPoem = sPoem &amp; sAPTag
						nCountTag = nCountTag+1 &apos;счетчик закладок
					End If
					sPoem = sPoem &amp; sArray(l,0) &amp; &quot;, &quot;
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			sPoem = Mid(sPoem, 1, Len(sPoem)-2)
			sPoem = sPoem &amp; &quot;&lt;/text-author&gt;&quot;
			lCurrentElement = l
		Else &apos; Авторы стиха не будут собираться в одну строку, а будут один под другим
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStylePoemAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sPoem = sPoem &amp; &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						End If
					Else
						sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					End If
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			lCurrentElement = l
		End If
	End If
	lCurrentElement = l
	MakePoemAuthor = sPoem
End Function

Function MakePoemDate(sArray As String) As String
	Dim sSTR As String
	sSTR = &quot;&quot;
	&apos; Дата написания поэмы - согласно схемы допускается только одна дата.
	&apos; Если есть еще одна строка с датой, то она будет просто текстом (&lt;p&gt;XXX&lt;/p&gt;)
	If sArray(lCurrentElement,1) = sStylePoemDate Then
		sSTR = sSTR &amp; &quot;&lt;date&gt;&quot; &amp; sArray(lCurrentElement,0) &amp; &quot;&lt;/date&gt;&quot; &amp; chr(10)
		oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		lCurrentElement = lCurrentElement + 1
	End If
	MakePoemDate = sSTR
End Function

Function MakeEpigraph(sArray As String, sStyle_Epigraph, sStyle_EpigraphAuthor, bBody As Boolean) As String
	Dim sEpig As String, l As Long, sID As String
	sEpig = &quot;&quot;
	For l = lCurrentElement To UBound(sArray)
		If sArray(l,1) = sStyle_Epigraph AND sArray(l,0) &lt;&gt; &quot;&quot; Then
			&apos; Просто абзацы цитаты или пустая строка
			If bDocLinks = True Then
				&apos; обработка ссылок внутри документа
				If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
					sEpig = sEpig &amp; &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
					sEpig = sEpig &amp; &quot;&lt;p&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				End If
			Else
				sEpig = sEpig &amp; &quot;&lt;p&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			End If
			oProgressBar.setValue(l) &apos; Статусбар
		ElseIf sArray(l,1) = sStyle_Epigraph AND sArray(l,0) = &quot;&quot; Then
			&apos; пустые строки
			sEpig = sEpig &amp; &quot;&lt;empty-line/&gt;&quot; &amp; chr(10)
		ElseIf sArray(l,1) = sStylePoem OR sArray(l,1) = sStylePoemTitle OR _
				sArray(l,1) = sStylePoemSubTitle Then
			lCurrentElement = l
			sEpig = sEpig &amp; MakePoem(sArray, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = sStyleCite OR sArray(l,1) = sStyleCiteSubTitle Then
			&apos; цитаты внутри аннотации
			lCurrentElement = l
			sEpig = sEpig &amp; MakeCite(sArray, bBody)
			l = lCurrentElement-1
		Else Exit For
		End If
	Next l
	lCurrentElement = l
	
	&apos; Авторы цитаты, если они есть
	sEpig = sEpig &amp; MakeEpigraphAuthor(sArray, sStyle_EpigraphAuthor, bBody)
	
	IF sEpig &lt;&gt; &quot;&quot; Then
		MakeEpigraph = &quot;&lt;epigraph&gt;&quot; &amp; chr(10) &amp; sEpig &amp; &quot;&lt;/epigraph&gt;&quot;
	Else
		MakeEpigraph = &quot;&quot;
	End If
End Function

Function MakeEpigraphAuthor(sArray As String, sStyle_EpigraphAuthor As String, bBody As Boolean) As String
	&apos; Авторы эпиграфа
	Dim sEpig As String, l As Long, sID As String
	l = lCurrentElement
	If sArray(lCurrentElement,1) = sStyle_EpigraphAuthor Then
		If bMergeEpigraphAuthors = True Then &apos; собираем Авторов епиграфа, идущих один за другим в одну строку
			Dim nCount As Integer, nCountTag As Integer &apos; число авторов эпиграфа с закладками
			nCount = 0
			nCountTag = 0
			Dim sAETag As String
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStyle_EpigraphAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sAETag = &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
							nCount = nCount+1 &apos;счетчик закладок
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							If nCount = 0 Then &apos; чтобы не &quot;затереть&quot; закладки вышестоящих авторов
								sAETag = &quot;&lt;text-author&gt;&quot; &apos; нет ни одной закладки
							End If
						End If
					Else
						sAETag = &quot;&lt;text-author&gt;&quot;
					End If
					If nCountTag = 0 Then &apos; чтобы не добавлять и другие теги &lt;text-author id=&gt;
						sEpig = sEpig &amp; sAETag
						nCountTag = nCountTag+1 &apos;счетчик закладок
					End If
					sEpig = sEpig &amp; sArray(l,0) &amp; &quot;, &quot;
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			sEpig = Mid(sEpig, 1, Len(sEpig)-2)
			sEpig = sEpig &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
			lCurrentElement = l
		Else &apos; Авторы епиграфа не будут собираться в одну строку, а будут один под другим
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStyle_EpigraphAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sEpig = sEpig &amp; &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						End If
					Else
						sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					End If
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			lCurrentElement = l
		End If
	End If
	lCurrentElement = l
	MakeEpigraphAuthor = sEpig
End Function

Function MakeAnnotation(sArray As String, bBody As Boolean) As String
	Dim sAnnot As String, l As Long, sID As String, sAnnotTag As String
	sAnnot = &quot;&lt;annotation&gt;&quot; &amp; chr(10)
	For l = lCurrentElement To UBound(sArray)
		If sArray(l,1) = sStyleAnnotation AND sArray(l,0) &lt;&gt; &quot;&quot; Then
			If bDocLinks = True Then
				&apos; обработка ссылок внутри документа
				If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
					sAnnotTag = &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
				Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
					sAnnotTag = &quot;&lt;p&gt;&quot; &apos; нет ни одной закладки
				End If
			Else
				sAnnotTag = &quot;&lt;p&gt;&quot;
			End If
			sAnnot = sAnnot &amp; sAnnotTag &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			oProgressBar.setValue(l) &apos; Статусбар
		ElseIf sArray(l,1) = sStyleAnnotation AND sArray(l,0) = &quot;&quot; Then
			&apos; пустые строки
			sAnnot = sAnnot &amp; &quot;&lt;empty-line/&gt;&quot; &amp; chr(10)
		ElseIf sArray(l,1) = sStyleAnnotationSubTitle Then
			&apos; подзаголовки
			lCurrentElement = l
			sAnnot = sAnnot &amp; MakeSubTitle(sArray, sStyleAnnotationSubTitle, bMergeAnnotationSubTitle, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = sStylePoem OR sArray(l,1) = sStylePoemTitle OR _
				sArray(l,1) = sStylePoemSubTitle OR sArray(l,1) = sStyleEpigraph Then
			&apos; поэмы внутри аннотации
			lCurrentElement = l
			sAnnot = sAnnot &amp; MakePoem(sArray, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = sStyleCite OR sArray(l,1) = sStyleCiteSubTitle Then
			&apos; цитаты внутри аннотации
			lCurrentElement = l
			sAnnot = sAnnot &amp; MakeCite(sArray, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = &quot;Table&quot; Then
			&apos; таблица в аннотации
			sAnnot = sAnnot &amp; sArray(l,0) &amp; chr(10)
		Else
			Exit For
		End If
	Next l
	lCurrentElement = l
	MakeAnnotation = sAnnot &amp; &quot;&lt;/annotation&gt;&quot;
End Function

Function MakeCite(sArray As String, bBody As Boolean) As String
	Dim sCite As String, l As Long, sID As String
	sCite = &quot;&quot;
	For l = lCurrentElement To UBound(sArray)
		&apos; Просто абзацы цитаты или пустая строка
		If sArray(l,1) = sStyleCite AND sArray(l,0) &lt;&gt; &quot;&quot; Then
			If bDocLinks = True Then
				&apos; обработка ссылок внутри документа
				If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
					sCite = sCite &amp; &quot;&lt;p &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
					sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				End If
			Else
				sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			End If
			oProgressBar.setValue(l) &apos; Статусбар
		ElseIf sArray(l,1) = sStyleCite AND sArray(l,0) = &quot;&quot; Then
			&apos; пустые строки
			sCite = sCite &amp; &quot;&lt;empty-line/&gt;&quot; &amp; chr(10)
		ElseIf sArray(l,1) = sStyleCiteSubTitle Then
			&apos; подзаголовки
			lCurrentElement = l
			sCite = sCite &amp; MakeSubTitle(sArray, sStyleCiteSubTitle, bMergeCiteSubTitle, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = sStylePoem OR sArray(l,1) = sStylePoemTitle OR _
				sArray(l,1) = sStylePoemSubTitle Then
			lCurrentElement = l
			sCite = sCite &amp; MakePoem(sArray, bBody)
			l = lCurrentElement-1
		ElseIf sArray(l,1) = &quot;Table&quot; Then
			&apos; таблица в цитате
			sCite = sCite &amp; sArray(l,0) &amp; chr(10)
		Else
			Exit For
		End If
	Next l
	lCurrentElement = l
	
	&apos; Авторы цитаты, если они есть
	sCite = sCite &amp; MakeCiteAuthor(sArray, bBody)
	
	IF sCite &lt;&gt; &quot;&quot; Then
		MakeCite = &quot;&lt;cite&gt;&quot; &amp; chr(10) &amp; sCite &amp; &quot;&lt;/cite&gt;&quot;
	Else
		MakeCite = &quot;&quot;
	End If
End Function

Function MakeCiteAuthor(sArray As String, bBody As Boolean) As String
	&apos; Авторы цитаты
	Dim sCite As String, l As Long, sID As String
	l = lCurrentElement
	If sArray(lCurrentElement,1) = sStyleCiteAuthor Then
		If bMergeCiteAuthors = True Then &apos; собираем Авторов цитаты, идущих один за другим в одну строку
			Dim nCount As Integer, nCountTag As Integer &apos; число авторов цитаты с закладками
			nCount = 0
			nCountTag = 0
			Dim sACTag As String
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStyleCiteAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sACTag = &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
							nCount = nCount+1 &apos;счетчик закладок
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							If nCount = 0 Then &apos; чтобы не &quot;затереть&quot; закладки вышестоящих авторов
								sACTag = &quot;&lt;text-author&gt;&quot; &apos; нет ни одной закладки
							End If
						End If
					Else
						sACTag = &quot;&lt;text-author&gt;&quot;
					End If
					If nCountTag = 0 Then &apos; чтобы не добавлять и другие теги &lt;text-author id=&gt;
						sCite = sCite &amp; sACTag
						nCountTag = nCountTag+1 &apos;счетчик закладок
					End If
					sCite = sCite &amp; sArray(l,0) &amp; &quot;, &quot;
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			sCite = Mid(sCite, 1, Len(sCite)-2)
			sCite = sCite &amp; &quot;&lt;/text-author&gt;&quot;
			lCurrentElement = l
		Else &apos; Авторы цитаты не будут собираться в одну строку, а будут один под другим
			For l = lCurrentElement To UBound(sArray)
				If sArray(l,1) = sStyleCiteAuthor Then
					If bDocLinks = True Then
						&apos; обработка ссылок внутри документа
						If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
							sCite = sCite &amp; &quot;&lt;text-author &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
							sCite = sCite &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
						End If
					Else
						sCite = sCite &amp; &quot;&lt;text-author&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					End If
					oProgressBar.setValue(l) &apos; Статусбар
				Else Exit For
				End If
			Next l
			lCurrentElement = l
		End If
	End If
	lCurrentElement = l
	MakeCiteAuthor = sCite
End Function	
	
Function MakeSubtitle(sArray As String, sStyle_SubTitle As String, bMerge_SubTitle As String, bBody As Boolean) As String
	Dim sSubtitle As String, l As Long, sSubTag As String, sID As String
	If bMerge_SubTitle = True Then &apos; собираем подзаголовки, идущие один за другим в одну строку
		Dim nCount As Integer &apos; число подзаголовков с закладками
		nCount = 0
		For l = lCurrentElement To UBound(sArray)
			If sArray(l,1) = sStyle_SubTitle Then
				If bDocLinks = True Then
					&apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sSubTag = &quot;&lt;subtitle &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot;
						nCount = nCount+1 &apos;счетчик закладок
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						If nCount = 0 Then &apos; чтобы не &quot;затереть&quot; закладки вышестоящих подзаголовков
							sSubTag = &quot;&lt;subtitle&gt;&quot; &apos; нет ни одной закладки
						End If
					End If
				Else
					sSubTag = &quot;&lt;subtitle&gt;&quot;
				End If
				sSubtitle = sSubtitle &amp; sArray(l,0) &amp; &quot; &quot;
				oProgressBar.setValue(l) &apos; Статусбар
			Else Exit For
			End If
		Next l
		lCurrentElement = l
		If sSubTag &lt;&gt; &quot;&quot; AND sSubtitle &lt;&gt; &quot;&quot; Then
			sSubtitle = sSubTag &amp; Trim(sSubtitle) &amp; &quot;&lt;/subtitle&gt;&quot;
		End If
	Else &apos; подзаголовки не будут собираться в одну строку, а будут один под другим
		For l = lCurrentElement To UBound(sArray)
			If sArray(l,1) = sStyle_SubTitle Then
				If bDocLinks = True Then
					&apos; обработка ссылок внутри документа
					If FindIndexForID(l, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
						sSubtitle = sSubtitle &amp; &quot;&lt;subtitle &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/subtitle&gt;&quot;
					Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
						sSubtitle = sSubtitle &amp; &quot;&lt;subtitle&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/subtitle&gt;&quot;
					End If
				Else
					sSubtitle = sSubtitle &amp; &quot;&lt;subtitle&gt;&quot; &amp; sArray(l,0) &amp; &quot;&lt;/subtitle&gt;&quot;
				End If
				oProgressBar.setValue(l) &apos; Статусбар
			Else Exit For
			End If
		Next l
		lCurrentElement = l
	End If
	MakeSubtitle = sSubtitle
End Function

Function MakeSection(sArray As String, sLevel As String, bBody As Boolean) As String
	Dim sSect As String, sSectTag As String
	If bDocLinks = True Then
		&apos; обработка ссылок внутри документа
		Dim sID As String
		If FindIndexForID(lCurrentElement, sID, bBody) &lt;&gt; -1 Then &apos; нашли закладку (ссылку) для текущего элемента
			sSectTag = &quot;&lt;section &quot; &amp; &quot;id=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
		Else &apos; для текущего элемента нет ни одной закладки (и ссылки, соответственно)
			sSectTag = &quot;&lt;section&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
		End If
	Else
		sSectTag = &quot;&lt;section&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
	End If
	sSect = sSectTag &amp; sArray(lCurrentElement,0) &amp; chr(10) &amp; &quot;&lt;/title&gt;&quot;
	oProgressBar.setValue(lCurrentElement) &apos; Статусбар
	lCurrentElement = lCurrentElement+1
	MakeSection = sSect
End Function

Function FindIndexForID(lCurElement As Long, sID As String, bBody As Boolean) As Long
	&apos; поиск номера(индекса) абзаца из массива sLinksTo, соответствующему текущему элементу из sParaStyleName (если такое соответствие есть)
	FindIndexForID = -1
	If bBody = False Then &apos; ссылки только для основного текста книги, а не для сносок
		Exit Function
	End If
	Dim l As Long
	For l=0 To UBound(sLinksTo)
		If sLinksTo(l,0) = lCurElement Then
			FindIndexForID = sLinksTo(l,0)
			sID = sLinksTo(l,1)
			Exit For
		End If
	Next l
End Function

</script:module>