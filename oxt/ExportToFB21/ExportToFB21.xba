<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ExportToFB21" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Public sCurDocFile As String
Public oTextOutputStream As Object
Public sBodyParagraphs() As String

Public sConvertorName As String &apos; название конвертора

Dim lCurrentElement As Long &apos; номер текущего элемента структуры - для создания текста документа
Dim sPoemTitle As String
Dim oProgressBar

Sub ExportToFB21
	Dim oDoc As Object
	sConvertorName = &quot;ExportToFB2.0&quot;
	
	&apos; файл пользовательских стилей
	sStylesFilename = pmxCurDir() &amp; &quot;/ExportToFB21/styles.xml&quot;
	
	&apos; загружаем стили из файла
	If ReadStylesInVars = False Then
		&apos; Установка стилей по умолчанию
		SetStylesVarsDefault
	End If
	
	Dim oOutputStream As Object
	Dim oFileAccess As Object

	oProgressBar = ThisComponent.CurrentController.StatusIndicator
	oFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTextOutputStream = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	oDoc = ThisComponent

	If oDoc.hasLocation() Then
		sCurDocFile = oDoc.getURL
	Else
		MsgBox &quot;Сохраните ООо файл&quot;, 64, sConvertorName
		Exit Sub
	End If
	Mid(sCurDocFile, Len(sCurDocFile)-2, 3, &quot;fb2&quot;)
	
	If Not InfoDlgExec Then
		Exit Sub
	End If
	
	oProgressBar.start(&quot;Экспортирование в FB2: Анализ&quot;, oDoc.ParagraphCount+100)
	oProgressBar.setValue(0)
	
	&apos; запускаем парсинг всего текста
	DocumentParser
	
	&apos; Создание fb2 файла
	oOutputStream = oFileAccess.openFileWrite(ConvertToUrl(oInfoDlg.Model.FilenameTextField.Text))
	oOutputStream.truncate()
	oTextOutputStream.setOutputStream(oOutputStream)
	oTextOutputStream.setEncoding(oInfoDlg.Model.Codepage.Text)
	
	&apos; печатаем данные из &lt;description&gt;
	SaveDescription
	
	&apos; печатаем данные из &lt;body&gt;
	oTextOutputStream.writeString(&quot;&lt;body&gt;&quot; &amp; chr(10))
	SaveBody	

	oTextOutputStream.writeString(&quot;&lt;/body&gt;&quot; &amp; chr(10))
	
	If UBound(sFootnoteText()) &lt;&gt; -1 Then
		SaveNotes
	End If
	
	oTextOutputStream.writeString(&quot;&lt;/FictionBook&gt;&quot;&amp;chr(10))
	oTextOutputStream.closeOutput()
	oProgressBar.end

	MsgBox &quot;Создание книги в fb2 формате завершено!&quot;, 64, sConvertorName
End Sub

Function SaveCloseSection(Count As Integer) As Long
	Dim i As Integer
	If Count &gt; 0 Then
		For i = 0 To Count-1
			oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
		Next i
	End If
End Function

Function IsLevel(sStyle As String) As Boolean
	&apos; Если аргумент sStyle - это Уровень, то возвращается True, иначе - False
	Select Case sStyle
			Case sStyleLevel1
				IsLevel = True
			Case sStyleLevel2
				IsLevel = True
			Case sStyleLevel3
				IsLevel = True
			Case sStyleLevel4
				IsLevel = True
			Case sStyleLevel5
				IsLevel = True
			Case sStyleLevel6
				IsLevel = True
			Case sStyleLevel7
				IsLevel = True
			Case sStyleLevel8
				IsLevel = True
			Case sStyleLevel9
				IsLevel = True
			Case sStyleLevel10
				IsLevel = True
			Case Else &apos; это не Уровень
				IsLevel = False
		End Select
End Function

Function IndexOf1Section As Long
	&apos; индекс 1-й секции
	Dim i As Long
	For i = 0 To UBound(sBodyParagraphs)
&apos;		If Instr(sBodyParagraphs(i,1),&quot;Level &quot;) &gt; 0 Then
		If IsLevel(sBodyParagraphs(i,1)) = True Then
			IndexOf1Section = i
			Exit For
		Else
			IndexOf1Section = -1
		End If
	Next i
End Function

Function IndexOfEndSection As Long
	&apos; индекс последней секции
	Dim i As Long
	For i = UBound(sBodyParagraphs) To 0 Step -1 
&apos;		If Instr(sBodyParagraphs(i,1),&quot;Level &quot;) &gt; 0 Then
		If  IsLevel(sBodyParagraphs(i,1)) = True Then
			IndexOfEndSection = i
			Exit For
		Else
			IndexOfEndSection = -1
		End If
	Next i
End Function

Function GetCountSection(lIndexOfCurrentLevel As Long, lIndexOfNextLevel As Long, lIndexOfEndSection As Long) As Integer
	&apos; сравнение по индексам, расчет по номерам уровней
	If lIndexOfCurrentLevel &lt; lIndexOfEndSection Then 
		GetCountSection = ( GetLevelNumber(sBodyParagraphs(lIndexOfCurrentLevel,1)) - _
							GetLevelNumber(sBodyParagraphs(lIndexOfNextLevel,1)) ) + 1
	Else
		GetCountSection = GetLevelNumber(sBodyParagraphs(lIndexOfEndSection,1))
	End If
End Function

Function GetIndexOfNextLevel(lIndexOfCurrentLevel As Long) As Long
	Dim i As Long, sInput As String
	&apos; Ищем следующий индекс уровеня после LevelCurrent
	If lIndexOfCurrentLevel = UBound(sBodyParagraphs) Then
		GetIndexOfNextLevel = lIndexOfCurrentLevel
		Exit Function
	End If
	For i = lIndexOfCurrentLevel+1 To UBound(sBodyParagraphs)
		sInput = sBodyParagraphs(i,1)
&apos;		If Instr(sInput,&quot;Level &quot;) &gt; 0 Then
		If  IsLevel(sInput) = True Then
			GetIndexOfNextLevel = i
			Exit For
		End If
	Next i
End Function

Function GetLevelNumber(Level As String) As Integer
	&apos; Возвращает номер уровня (число) из строки уровня
	Select Case Level
		Case sStyleLevel1
			GetLevelNumber = 1
		Case sStyleLevel2
			GetLevelNumber = 2
		Case sStyleLevel3
			GetLevelNumber = 3
		Case sStyleLevel4
			GetLevelNumber = 4
		Case sStyleLevel5
			GetLevelNumber = 5
		Case sStyleLevel6
			GetLevelNumber = 6
		Case sStyleLevel7
			GetLevelNumber = 7
		Case sStyleLevel8
			GetLevelNumber = 8
		Case sStyleLevel9
			GetLevelNumber = 9
		Case sStyleLevel10
			GetLevelNumber = 10
	End Select
End Function

Function MakeBookTitle As String
	&apos; формируем заглавие книги
	Dim sBT As String, i As Integer
	sBT = &quot;&lt;title&gt;&quot; &amp; chr(10)
	For i = lCurrentElement To UBound(sBodyParagraphs)
		If sBodyParagraphs(i,1) = sStyleBookAuthor OR sBodyParagraphs(i,1) = sStyleBookTitle Then
			sBT = sBT &amp; &quot;&lt;p&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Else Exit For
		End If
	Next i
	lCurrentElement = i
	sBT = sBT &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10)
	MakeBookTitle = sBT
End Function

Function MakeAnnotation As String
	Dim sAnnot As String, i As Integer
	sAnnot = &quot;&lt;annotation&gt;&quot; &amp; chr(10)
	For i = lCurrentElement To UBound(sBodyParagraphs)
		If sBodyParagraphs(i,1) = sStyleAnnotation Then
			sAnnot = sAnnot &amp; &quot;&lt;p&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Else Exit For
		End If
	Next i
	lCurrentElement = i
	sAnnot = sAnnot &amp; &quot;&lt;/annotation&gt;&quot;
	MakeAnnotation = sAnnot
End Function

Function MakePoemTitle
	Dim i As Integer
	sPoemTitle = sPoemTitle &amp; &quot;&lt;poem&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
	If bMergePoemTitle = True Then &apos; собираем Заголовки стиха, идущие один за другим в одну строку
		sPoemTitle = sPoemTitle &amp; &quot;&lt;p&gt;&quot;
		For i = lCurrentElement To UBound(sBodyParagraphs)
			If sBodyParagraphs(i,1) = sStylePoemTitle Then
				sPoemTitle = sPoemTitle &amp; sBodyParagraphs(i,0) &amp;  &quot; &quot;
				oProgressBar.setValue(lCurrentElement) &apos; Статусбар
			Else Exit For
			End If
		Next i
		sPoemTitle = Mid(sPoemTitle, 1, Len(sPoemTitle)-1)
		sPoemTitle = sPoemTitle &amp; &quot;&lt;/p&gt;&quot;
		lCurrentElement = i
	Else &apos; Заголовки стиха не будут собираться в одну строку, а будут один под другим
		For i = lCurrentElement To UBound(sBodyParagraphs)
			If sBodyParagraphs(i,1) = sStylePoemTitle Then
				sPoemTitle = sPoemTitle &amp; &quot;&lt;p&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				oProgressBar.setValue(lCurrentElement) &apos; Статусбар
			Else Exit For
			End If
		Next i
		lCurrentElement = i
	End If
	sPoemTitle = sPoemTitle &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10)
End Function

Function MakePoem As String
	Dim sPoem As String, bEndPar As Boolean, i As Integer
	If sPoemTitle = &quot;&quot; Then	&apos; стихи без заголовка
		sPoem = &quot;&lt;poem&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
	Else 
		sPoem = sPoemTitle
	End If
	For i = lCurrentElement To UBound(sBodyParagraphs)
		If sBodyParagraphs(i,1) = sStylePoem Then
			If sBodyParagraphs(i,0) = &quot;&quot; Then
				sPoem = sPoem &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
			Else
				sPoem = sPoem &amp; &quot;&lt;v&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/v&gt;&quot; &amp; chr(10)
			End If
			oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Else 
			Exit For
		End If
	Next i
	sPoem = sPoem &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10
	lCurrentElement = i
	If sBodyParagraphs(lCurrentElement,1) = sStylePoemAuthor Then
		If bMergePoemAuthors = True Then &apos; собираем Авторов стиха, идущих один за другим в одну строку
			sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot;
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStylePoemAuthor Then
					sPoem = sPoem &amp; sBodyParagraphs(i,0) &amp; &quot;, &quot;
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else Exit For
				End If
			Next i
			sPoem = Mid(sPoem, 1, Len(sPoem)-2)
			sPoem = sPoem &amp; &quot;&lt;/text-author&gt;&quot;
			lCurrentElement = i
		Else &apos; Авторы стиха не будут собираться в одну строку, а будут один под другим
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStylePoemAuthor Then
					sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else 
					Exit For
				End If
			Next i
			lCurrentElement = i
		End If
	End If
	sPoem = sPoem &amp; &quot;&lt;/poem&gt;&quot;
	sPoemTitle = &quot;&quot;
	MakePoem = sPoem
End Function

Function MakeEpigraph As String
	Dim sEpig As String, bEndPar As Boolean, i As Integer
	sEpig = sEpig &amp; &quot;&lt;epigraph&gt;&quot; &amp; chr(10)
	For i = lCurrentElement To UBound(sBodyParagraphs)
		If sBodyParagraphs(i,1) = sStyleEpigraph Then
			sEpig = sEpig &amp; &quot;&lt;p&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Else Exit For
		End If
	Next i
	lCurrentElement = i
	If sBodyParagraphs(lCurrentElement,1) = sStyleEpigraphAuthor Then
		If bMergeEpigraphAuthors = True Then &apos; собираем Авторов епиграфа, идущих один за другим в одну строку
			sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot;
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStyleEpigraphAuthor Then
					sEpig = sEpig &amp; sBodyParagraphs(i,0) &amp; &quot;, &quot;
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else 
					Exit For
				End If
			Next i
			sEpig = Mid(sEpig, 1, Len(sEpig)-2)
			sEpig = sEpig &amp; &quot;&lt;/text-author&gt;&quot;
			lCurrentElement = i
		Else &apos; Авторы епиграфа не будут собираться в одну строку, а будут один под другим
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStyleEpigraphAuthor Then
					sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else Exit For
				End If
			Next i
			lCurrentElement = i
		End If
	End If
	sEpig = sEpig &amp; &quot;&lt;/epigraph&gt;&quot;
	MakeEpigraph = sEpig
End Function

Function MakeCite As String
	Dim sCite As String, bEndPar As Boolean, i As Integer
	sCite = &quot;&lt;cite&gt;&quot; &amp; chr(10)
	For i = lCurrentElement To UBound(sBodyParagraphs)
		If sBodyParagraphs(i,1) = sStyleCite Then
			sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
			oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Else 
			Exit For
		End If
	Next i
	lCurrentElement = i
	If sBodyParagraphs(lCurrentElement,1) = sStyleCiteAuthor Then
		If bMergeCiteAuthors = True Then &apos; собираем Авторов цитаты, идущих один за другим в одну строку
			sCite = sCite &amp; &quot;&lt;text-author&gt;&quot;
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStyleCiteAuthor Then
					sCite = sCite &amp; sBodyParagraphs(i,0) &amp; &quot;, &quot;
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else Exit For
				End If
			Next i
			sCite = Mid(sCite, 1, Len(sCite)-2)
			sCite = sCite &amp; &quot;&lt;/text-author&gt;&quot;
			lCurrentElement = i
		Else &apos; Авторы цитаты не будут собираться в одну строку, а будут один под другим
			For i = lCurrentElement To UBound(sBodyParagraphs)
				If sBodyParagraphs(i,1) = sStyleCiteAuthor Then
					sCite = sCite &amp; &quot;&lt;text-author&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
					oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else Exit For
				End If
			Next i
			lCurrentElement = i
		End If
	End If
	sCite = sCite &amp; &quot;&lt;/cite&gt;&quot;
	MakeCite = sCite
End Function

Function MakeSubtitle As String
	Dim sSubtitle As String, bEndPar As Boolean, i As Integer
	If bMergeSubTitle = True Then &apos; собираем подзаголовки, идущие один за другим в одну строку
		sSubtitle = sSubtitle &amp; &quot;&lt;subtitle&gt;&quot;
		For i = lCurrentElement To UBound(sBodyParagraphs)
			If sBodyParagraphs(i,1) = sStyleSubTitle Then
				sSubtitle = sSubtitle &amp; sBodyParagraphs(i,0) &amp; &quot; &quot;
				oProgressBar.setValue(lCurrentElement) &apos; Статусбар
			Else Exit For
			End If
		Next i
		lCurrentElement = i
		sSubtitle = sSubtitle &amp; &quot;&lt;/subtitle&gt;&quot;
	Else &apos; подзаголовки не будут собираться в одну строку, а будут один под другим
		For i = lCurrentElement To UBound(sBodyParagraphs)
			If sBodyParagraphs(i,1) = sStyleSubTitle Then
				sSubtitle = sSubtitle &amp; &quot;&lt;subtitle&gt;&quot; &amp; sBodyParagraphs(i,0) &amp; &quot;&lt;/subtitle&gt;&quot;
				oProgressBar.setValue(lCurrentElement) &apos; Статусбар
			Else Exit For
			End If
		Next i
		lCurrentElement = i
	End If
	MakeSubtitle = sSubtitle
End Function

Function MakeSection(sLevel As String) As String
	Dim sSect As String, bEndPar As Boolean, i As Integer
	sSect = sSect &amp; &quot;&lt;section&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
	sSect = sSect &amp; sBodyParagraphs(lCurrentElement,0) &amp; chr(10)
	sSect = sSect  &amp; &quot;&lt;/title&gt;&quot;
	oProgressBar.setValue(lCurrentElement) &apos; Статусбар
	lCurrentElement = lCurrentElement+1
	MakeSection = sSect
End Function

Function SaveElements(sParaStyleName As String, sPara As String)
	&apos; перебор по стилям
	Select Case sParaStyleName
		Case sStylePoemTitle
			MakePoemTitle
		Case sStylePoem
			oTextOutputStream.writeString(MakePoem &amp; chr(10))
		Case sStyleEpigraph
			oTextOutputStream.writeString(MakeEpigraph &amp; chr(10))
		Case sStyleCite
			oTextOutputStream.writeString(MakeCite &amp; chr(10))
		Case sStyleAnnotation
			oTextOutputStream.writeString(MakeAnnotation &amp; chr(10))
		Case sStyleSubTitle
			oTextOutputStream.writeString(MakeSubTitle &amp; chr(10))
		Case sStyleLevel1
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel2
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel3
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel4
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel5
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel6
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel7
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel8
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel9
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case sStyleLevel10
			oTextOutputStream.writeString(MakeSection(sParaStyleName) &amp; chr(10))
		Case &quot;&quot; &apos; &lt;empty-line/&gt;
			oTextOutputStream.writeString(&quot;&lt;empty-line/&gt;&quot; &amp; chr(10))
			lCurrentElement = lCurrentElement+1
		Case &quot;Table&quot; 
			oTextOutputStream.writeString(sPara &amp; chr(10))
			lCurrentElement = lCurrentElement+1
		Case &quot;Image&quot; 
			oTextOutputStream.writeString(sPara &amp; chr(10))
			lCurrentElement = lCurrentElement+1
		Case Else &apos; что-то другое или просто параграф - записываем как параграф
			oTextOutputStream.writeString(&quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10))
			lCurrentElement = lCurrentElement+1
	End Select
End Function

</script:module>