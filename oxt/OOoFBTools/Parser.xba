<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Parser" script:language="StarBasic">&apos;======================================================================================================================
&apos; 							модуль основного парсинга теста документа
&apos;======================================================================================================================
Option Explicit

Public Covers()			As String	&apos; массив, хранящий кодированные картинки-обложки
Public Images()			As String	&apos; массив, хранящий кодированные картинки с тегами &lt;binary&gt;
Public sLinksTo()		As String	&apos; массив ссылок КУДА и их ID основного текста
Public lAnalyzeProgress As Long		&apos; счетчик итерации прогресса анализа документа

&apos; оформление сносок
Private bFENoteCommon	 	As Boolean
Private sFootnoteLeft		As String
Private sFootnoteRight		As String
Private bFootnoteSpace		As Boolean
Private sFootnoteTitle		As String
&apos; концевые сноски
Private sENLeft		As String
Private sENRight	As String
Private bENSpace	As Boolean
Private sENTitle	As String

Private lBATIndex		As Long 	&apos; Указатель на индекс ячейки массива sBodyParagraphs, хранящей стиль Book Author или Book Title

Private iFootnoteCount	As Integer	&apos; счетчик сносок
Private iEndnoteCount	As Integer	&apos; счетчик концевых сносок
Private iImgCurrent		As Integer	&apos; для формирования номера картинки
Private sPrevStyle		As String	&apos; название предыдущего стиля - для формирования Уровней из нескольких строк
Private sPara			As String	&apos; отформатированный текст параграфа

&apos; парсер всего документа
Sub DocumentParser()
	iFootnoteCount = 0
	iEndnoteCount = 0
	lAnalyzeProgress = 0
	
	Dim oParEnum	As Object &apos;Счетчик, используемый для перебора параграфов
	Dim oPar		As Object &apos;Перебираемый параграф
	Dim oSectEnum	As Object &apos;Счетчик, используемый для перебора текстовых разделов
	Dim oSect		As Object &apos;Перебиремый текстовый раздел (section)
	Dim oCEnum		As Object &apos;Перебирает содержимое, такое как графические объекты
	Dim oContent	As Object &apos;Перебираемое содержимое

	Dim sBookmark As String : sBookmark = &quot;&quot;
	lBATIndex = -1 &apos; пока нет ни Автора Книги, ни Названия Книги
			
	&apos; Перебрать параграфы. Таблицы перебираются одновременно с параграфами
	oParEnum = ThisComponent.getText().createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.supportsService(&quot;com.sun.star.text.TextTable&quot;) Then
			OOo23TextTableParser( oPar ) &apos; парсер таблицы
		ElseIf oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If isRasterGraphic( oContent ) Then
					&apos; парсер растровой графики, привязанной к параграфу
					MakeGraphic( oPar, oContent, True, sPara, False )
				ElseIf isVectorGraphic( oContent ) Then
					&apos; парсер векторной графики, привязанной к параграфу
					MakeGraphic( oPar, oContent, True, sPara, False )
				Else
					&apos; Привязка к параграфу
					If LCase( oContent.ShapeType ) = &quot;frameshape&quot; Then
						If LCase(  oContent.FrameStyleName ) = &quot;frame&quot; Then
							&apos; Парсер Текстовой Врезки
							TextFrameParser(oContent)
						ElseIf LCase( oContent.FrameStyleName ) = &quot;formula&quot; Then
							&apos; парсер формулы, привязка &quot;параграф&quot;
							MakeGraphic( oPar, oContent, True, sPara, False )
						ElseIf LCase( oContent.FrameStyleName ) = &quot;ole&quot; Then
							&apos; парсер диаграм, привязка &quot;параграф&quot;
							MakeGraphic( oPar, oContent, True, sPara, False )
						End If
					End If
				End If
			Loop

			&apos; Теперь переберем текстовые разделы (sections) и поищем графические объекты,
			&apos; которые привязаны к символу, или вставлены как символы
			oSectEnum = oPar.createEnumeration()
			sPara = &quot;&quot;
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If LCase( oSect.TextPortionType ) = &quot;text&quot; Then
					&apos; парсер текстового абзаца
					sPara = sPara &amp; InLineAllParser( oSect )
					&apos; Обработка текста - на наличие обрыва строки (&lt;BR&gt; в html текстах) - иначе fb2-файл получается в некоторых случаях при форматной строке невалидным
					sPara = DelBreakLineInString( sPara )
				ElseIf LCase( oSect.TextPortionType ) = &quot;frame&quot; Then
					oCEnum = oSect.createContentEnumeration(&quot;com.sun.star.text.TextGraphicObject&quot;)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If isRasterGraphic( oContent ) Then
							&apos; парсер растровой графики, привязанной к символу
							MakeGraphic( oPar, oContent, True, sPara, False )
						ElseIf isVectorGraphic( oContent ) Then
							&apos; парсер векторной графики, привязанной к символу
							MakeGraphic( oPar, oContent, True, sPara, False )
						Else
							&apos; Привязка к символу
							If LCase( oContent.ShapeType ) = &quot;frameshape&quot; Then
								If LCase( oContent.FrameStyleName ) = &quot;frame&quot; Then
									&apos; Парсер Текстовой Врезки
									TextFrameParser(oContent)
								ElseIf LCase( oContent.FrameStyleName ) = &quot;formula&quot; Then
									&apos; парсер формулы, привязка &quot;символ&quot;
									MakeGraphic( oPar, oContent, True, sPara, False )
								ElseIf LCase( oContent.FrameStyleName ) = &quot;ole&quot; Then
									&apos; парсер диаграм, привязка &quot;символ&quot;
									MakeGraphic( oPar, oContent, True, sPara, False )
								End If
							End If
						End If
					Loop
					
				ElseIf LCase( oSect.TextPortionType ) = &quot;footnote&quot; Then
					&apos; парсер сносок
					sPara = sPara &amp; FootEndNoteParser( oSect )
				ElseIf LCase( oSect.TextPortionType ) = &quot;endnote&quot; Then
					&apos; парсер концевых сносок
					sPara = sPara &amp; FootEndNoteParser( oSect )
				ElseIf LCase( oSect.TextPortionType ) = &quot;textfield&quot; Then
					&apos; текстовые поля
					If bTextField = True Then
						sPara = sPara &amp; InLineAllParser( oSect )
					End If
				ElseIf LCase( oSect.TextPortionType ) = &quot;bookmark&quot; Then
					&apos; закладки
					If bDocLinks = True Then
						Dim SectBookmark As String : SectBookmark = oSect.Bookmark.getName()
						If sBookmark &lt;&gt; &quot;&quot; Then
							If InStr( sBookmark, SectBookmark ) = 0 Then
								&apos; не заносим дважды одну и ту же закладку...
								sBookmark = sBookmark &amp; &quot;?&quot; &amp; SectBookmark
							End If
						Else
							sBookmark = SectBookmark
						End If
						
						&apos; сохраняем позицию ОТКУДА ссылка и ее ID
						If UBound(sLinksTo()) = -1 Then
							AddNewItemToArray2IS( sLinksTo(), UBound(sBodyParagraphs()) + 1, SectBookmark )
						Else
							&apos; не заносим дважды одну и ту же закладку...
							If sLinksTo( UBound(sLinksTo()), 1 ) &lt;&gt; SectBookmark Then
								AddNewItemToArray2IS( sLinksTo(), UBound(sBodyParagraphs()) + 1, SectBookmark )
							End If
						End If

					End If
				&apos;Else
				&apos;	MsgBox &quot;Что-то другое : &quot; &amp; oSect.TextPortionType
				End If
			Loop

			&apos; Нумерованные и маркерованные списки (заголовки стиля Heading игнорируются)
			If oSect.NumberingIsNumber = True AND LCase( oSect.NumberingStyleName ) &lt;&gt; &quot;outline&quot; Then
				sPara = MakeNumberingNumberPara( oPar, sPara )
			End If
			
			&apos;В LO поломано восприятие локализованных стилей Цитата
			If isLibreOffice() Then
				Dim ParaStyle As String : ParaStyle = oPar.ParaStyleName
				If ParaStyle = GetLocaCiteStyleName() Then
					ParaStyle = &quot;Quotations&quot;
				End If
				StyleParser( oPar, ParaStyle, sPara, sBookmark )
			Else &apos; для OpenOffice
				StyleParser( oPar, oPar.ParaStyleName, sPara, sBookmark )
			End If
			sBookmark = &quot;&quot;
		End If
	Loop
End Sub

&apos; перебор по стилям
Sub StyleParser( oPar As Object, sParaStyleName As String, sPara As String, sBookmark As String )
	If sPara = &quot;&quot; Then
		If sParaStyleName = sStylePoem Then
			&apos; для разных видов стихов (каждое четверостишие - в своем &lt;stanza&gt;)
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = GetLocaCiteStyleName() Or sParaStyleName = sStyleCite Then
			&apos; для пустых строк в цитатах
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = sStyleAnnotation Then
			&apos; для пустых строк в аннотациях
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = sStyleEpigraph Then
			&apos; для пустых строк в эпиграфах
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = sStyleEpigraphAuthor Then
			&apos; для пустых строк Автора Эпиграфа
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = sStyleCiteAuthor Then
			&apos; для пустых строк Автора Цитат
			AddLevelToBodyArray( sBodyParagraphs(), &quot;&quot;, sParaStyleName, sBookmark, False )
		ElseIf sParaStyleName = sStyle_BookAnnotation Then
			AddBookAnnotation( &quot;&quot; )
		Else
			If IsLevel( sParaStyleName ) Then
				AddLevelToBodyArray( sBodyParagraphs(), sPara, sParaStyleName, sBookmark, True )
			Else
				AddLevelToBodyArray( sBodyParagraphs(), &quot;&lt;empty-line/&gt;&quot;, &quot;&quot;, sBookmark, False )
			End If
		End If
	Else
		If sParaStyleName = sStyleBookTitle Then
			AddLevelToBodyArray( sBodyParagraphs(), sPara, sParaStyleName, sBookmark, False )
			If lBATIndex = -1 Then
				lBATIndex = UBound( sBodyParagraphs() )
			End If
		ElseIf sParaStyleName = sStylePoemTitle Or sParaStyleName = sStylePoemSubTitle Or sParaStyleName = sStylePoem Or _
				sParaStyleName = sStylePoemAuthor Or sParaStyleName = sStylePoemDate Or _
				sParaStyleName = sStyleEpigraph Or sParaStyleName = sStyleEpigraphAuthor Or _
				sParaStyleName = sStyleCite Or sParaStyleName = sStyleCiteSubTitle Or sParaStyleName = sStyleCiteAuthor Or _
				sParaStyleName = sStyleAnnotation Or sParaStyleName = sStyleAnnotationSubTitle Or _
				sParaStyleName = sStyleSubTitle Or sParaStyleName = GetLocaCiteStyleName() Then
					AddLevelToBodyArray( sBodyParagraphs(), sPara, sParaStyleName, sBookmark, False )
		ElseIf IsLevel( sParaStyleName ) Then
				AddLevelToBodyArray( sBodyParagraphs(), sPara, sParaStyleName, sBookmark, True )
		ElseIf sParaStyleName = sStyle_BookAnnotation Then
			AddBookAnnotation( sPara )
		Else &apos; что-то другое или просто параграф
			Dim sParaStyle As String : sParaStyle = &quot;Para&quot;
			If bParaAdjust = True Then
				If oPar.ParaAdjust = 3 Then &apos; центрирование абзаца
					sParaStyle = &quot;ParaCenter&quot;
				ElseIf oPar.ParaAdjust = 1 Then &apos; выравнивание абзаца вправо
					sParaStyle = &quot;ParaRight&quot;
				End If
			End If
			AddLevelToBodyArray( sBodyParagraphs(), sPara, sParaStyle, sBookmark, False )
		End If
	End If

	lAnalyzeProgress = lAnalyzeProgress + 1
	oProgressBar.setValue( lAnalyzeProgress )

	sPrevStyle = sParaStyleName
End Sub

&apos; перебор по всем in-line стилям
Function InLineAllParser(oSect As Object) As String
	Dim sLexem As String, sLSpace As String, sRSpace As String, sStr As String

	&apos; обработка &quot;проблемных&quot; символов
	If bCorrectPara = True Then
		sLexem = CorrectPara(oSect.getString())
	Else
		sLexem = oSect.getString()
	End If
	
	&apos; игнорируем символы &lt; chr(32) (в docx файлах эти символы делают полученый fb2 невалидным)
	If Len( oSect.getString() ) &lt;= 1 And oSect.getString() &lt; chr(32) Then
		sLexem = &quot;&quot;
	End If

	&apos; вынос начальных и завершающих пробелов лексемы, если они есть, за тэги форматирования
	sStr = Trim( sLexem )
	If Len( sLexem ) &gt; Len( sStr ) Then &apos; изначальная лексема содержала пробелы в начале и(или) в конце
		Dim iPos As Integer : iPos = InStr( sLexem, sStr )
		sLSpace = Space( iPos - 1 )
		sRSpace = Space( Len( sLexem ) - Len ( Trim (sLexem ) ) - Len( sLSpace ) )
		sLexem = sStr
	End If
		
	If oSect.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
		Dim s As String
		s = Mid(oSect.HyperLinkURL, 1, 1)
		IF s &lt;&gt; &quot;#&quot; Then &apos; гиперссылка
			s = CorrectPara( oSect.HyperLinkURL )
		Else			&apos; закладка
			s = Mid(oSect.HyperLinkURL, 2)
			s = &quot;#&quot; &amp; CorrectID( CorrectBMLink( s ) )
		End If
		sLexem = &quot;&lt;a l:href=&quot;&quot;&quot; &amp; s &amp; &quot;&quot;&quot;&gt;&quot; &amp; sLexem &amp; &quot;&lt;/a&gt;&quot;
	End If
	
	If oSect.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
		sLexem = &quot;&lt;strong&gt;&quot; &amp; sLexem &amp; &quot;&lt;/strong&gt;&quot;
	End If
	If oSect.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
		sLexem = &quot;&lt;emphasis&gt;&quot; &amp; sLexem &amp; &quot;&lt;/emphasis&gt;&quot;
	End If
	If oSect.CharEscapement &gt; 0 Then
		sLexem = &quot;&lt;sup&gt;&quot; &amp; sLexem &amp; &quot;&lt;/sup&gt;&quot;
	End If
	If oSect.CharEscapement &lt; 0 Then
		sLexem = &quot;&lt;sub&gt;&quot; &amp; sLexem &amp; &quot;&lt;/sub&gt;&quot;
	End If
	
	If bCourrierNew = True Then
		If oSect.CharStyleName = &quot;code&quot; OR oSect.CharStyleName = &quot;Source Text&quot; OR _
			oSect.ParaConditionalStyleName = &quot;code&quot; OR oSect.ParaConditionalStyleName = &quot;Source Text&quot; OR _
			oSect.ParaStyleName = &quot;code&quot; OR oSect.ParaStyleName = &quot;Source Text&quot; OR _
			oSect.CharShadowed = True OR oSect.CharContoured = True OR _
			oSect.CharFontName = &quot;Courier New&quot; Then
				sLexem = &quot;&lt;code&gt;&quot; &amp; sLexem &amp; &quot;&lt;/code&gt;&quot;
		End If
	Else
		If oSect.CharStyleName = &quot;code&quot; OR oSect.CharStyleName = &quot;Source Text&quot; OR _
			oSect.ParaConditionalStyleName = &quot;code&quot; OR oSect.ParaConditionalStyleName = &quot;Source Text&quot; OR _
			oSect.ParaStyleName = &quot;code&quot; OR oSect.ParaStyleName = &quot;Source Text&quot; OR _
			oSect.CharShadowed = True OR oSect.CharContoured = True Then
				sLexem = &quot;&lt;code&gt;&quot; &amp; sLexem &amp; &quot;&lt;/code&gt;&quot;
		End If
	End If

	If oSect.CharStrikeout &gt; 0 Then
		sLexem = &quot;&lt;strikethrough&gt;&quot; &amp; sLexem &amp; &quot;&lt;/strikethrough&gt;&quot;
	End If
	&apos; только теперь, после всех проверок
	If sLexem = &quot;&quot; Then
		&apos; просто обычный текст
		sLexem = oSect.getString()
	End If
	
	&apos; проверка на пустой абзац с форматом &lt;strong&gt;, &lt;emphasis&gt;...
	If sLexem = &quot;&lt;strong&gt;&lt;/strong&gt;&quot; OR _
		sLexem = &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot; OR _
		sLexem = &quot;&lt;sub&gt;&lt;/sub&gt;&quot; OR _
		sLexem = &quot;&lt;sup&gt;&lt;/sup&gt;&quot; OR _
		sLexem = &quot;&lt;code&gt;&lt;/code&gt;&quot; OR _
		sLexem = &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot; Then
		sLexem = &quot;&quot;
	End If
	InLineAllParser = sLSpace &amp; sLexem &amp; sRSpace
End Function

&apos; добавление данных в массив sBodyParagraphs()
Function AddLevelToBodyArray( ByRef sBodyParagraphs() As String, sPara As String, sParaStyle As String, sBookmark As String, bLevel As Boolean )
	If bLevel = False Then
		AddNewItemToArray3( sBodyParagraphs(), sPara, sParaStyle, sBookmark )
	Else
		&apos; для уровней - проверка на несколько строк
		If sParaStyle &lt;&gt; sPrevStyle Then &apos; Разные уровни
			AddNewItemToArray3( sBodyParagraphs(), &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;, sParaStyle, sBookmark )
		Else &apos; Одинаковые уровни - несколько строк - собираем их в один элемент
			Dim LastItem As Long : LastItem = UBound( sBodyParagraphs() )
			sBodyParagraphs( LastItem, 0 ) = sBodyParagraphs( LastItem, 0 ) &amp; chr(10) &amp; &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;
			sBodyParagraphs( LastItem, 2 ) = sBodyParagraphs( LastItem, 2 ) &amp; &quot;|&quot; &amp; sBookMark
		End If
	End If
	lAnalyzeProgress = lAnalyzeProgress + 1
	oProgressBar.setValue( lAnalyzeProgress )
End Function


</script:module>