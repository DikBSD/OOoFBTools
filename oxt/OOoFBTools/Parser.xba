<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Parser" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Dim Covers() As String &apos; массив, хранящий кодированные картинки-обложки
Dim Images() As String &apos; массив, хранящий кодированные картинки с тегами &lt;binary&gt;

&apos; оформление сносок
Public sFootnoteLeft As String
Public sFootnoteRight As String
Public bFootnoteSpace As Boolean
&apos; применение стиля к тексту сносок
Public bStyleFootnote As Boolean
Public sFootnoteTitle As String
&apos; экспорт сложных структур текста сносок
Public bNotesElements As Boolean
Public lBATIndex As Long 	&apos; Указатель на индекс ячейки массива sBodyParagraphs, хранящей стиль Book Author или Book Title

Public sFootnoteText() As String
Dim iFootnoteCount As Integer
Dim iImgCurrent As Integer		&apos; для формирования номера картинки
Dim iCurrentTable As Integer	&apos; номер текушей таблицы
Dim sPrevStyle As String		&apos; название предыдущего стиля - для формирования Уровней из нескольких строк
Dim sPara As String				&apos; отформатированный текст параграфа

Sub DocumentParser
	Dim oParEnum As Object 	&apos;Счетчик, используемый для перебора параграфов
	Dim oPar As Object 		&apos;Перебираемый параграф
	Dim oSectEnum As Object &apos;Счетчик, используемый для перебора текстовых разделов
	Dim oSect As Object 	&apos;Перебиремый текстовый раздел (section)
	Dim oCEnum As Object 	&apos;Перебирает содержимое, такое как графические объекты
	Dim oContent As Object 	&apos;Перебираемое содержимое
	Dim textGraphService As String, graphicService As String, customShapeService As String
	
	textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	customShapeService	= &quot;com.sun.star.drawing.CustomShape&quot;

	iCurrentTable = 0	&apos; номер текущей таблицы, если она есть
	iImgCurrent = 0		&apos; номер текущей картинки, если она есть
	
	lBATIndex = -1 &apos; пока нет ни Автора Книги, ни Названия Книги
			
	&apos; Перебрать параграфы. Таблицы перебираются одновременно с параграфами
	oParEnum = ThisComponent.getText().createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		&apos; сначала ищем таблицы
		If oPar.supportsService(&quot;com.sun.star.text.TextTable&quot;) Then
			&apos; парсер таблицы
			OOo23TextTableParser(iCurrentTable)
		ElseIf oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Or _
					oContent.supportsService(customShapeService) Then
					&apos; парсер графики, привязанной к параграфу
					TextGraphicObjectParser(oContent)
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Frame&quot; Then
							&apos; Парсер Текстовой Врезки
							TextFrameParser(oContent)
						ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
							&apos; парсер формулы, привязка &quot;параграф&quot;
							OLEParser( oContent )
						ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер диаграм, привязка &quot;параграф&quot;
							OLEParser( oContent )
						End If
					End If
				End If
			Loop

			&apos; Теперь переберем текстовые разделы (sections) и поищем графические объекты,
			&apos; которые привязаны к символу, или вставлены как символы
			oSectEnum = oPar.createEnumeration()
			Dim sAllSectString As String &apos; текст всех секций параграфа (нужен для определения нумерации и маркеров)
			sPara = &quot;&quot;
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Text&quot; Then
					If oSect.NumberingIsNumber = True AND oSect.NumberingStyleName &lt;&gt; &quot;Outline&quot; Then &apos; заголовки стиля Heading игнорируются
						sAllSectString = sAllSectString &amp; oSect.getString()
					End If
					&apos; парсер текстового абзаца
					If bOnlyOneStyle = True Then
						sPara = sPara &amp; InLineParser( oSect )
					Else
						sPara = sPara &amp; InLineAllParser( oSect )
					End if
				ElseIf oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Or _
							oContent.supportsService(customShapeService) Then
							&apos; парсер графики, привязанной к символу
							TextGraphicObjectParser(oContent)
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Frame&quot; Then
									&apos; Парсер Текстовой Врезки
									TextFrameParser(oContent)
								ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
									&apos; парсер формулы, привязка &quot;символ&quot;
									OLEParser( oContent )
								ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм, привязка &quot;символ&quot;
									OLEParser( oContent )
								End If
							End If
						End If
					Loop
					
				ElseIf oSect.TextPortionType = &quot;Footnote&quot; Then
					&apos; парсер сносок
					sPara = sPara &amp; FootEndNoteParser(oSect)
				ElseIf oSect.TextPortionType = &quot;Endnote&quot; Then
					&apos; парсер сносок
					sPara = sPara &amp; FootEndNoteParser(oSect)
				ElseIf oSect.TextPortionType = &quot;TextField&quot; Then
					&apos; текстовые поля
					If bOnlyOneStyle = True Then
						sPara = sPara &amp; InLineParser( oSect )
					Else
						sPara = sPara &amp; InLineAllParser( oSect )
					End If
				ElseIf oSect.TextPortionType = &quot;Bookmark&quot; Then
					&apos; закладки
					If bDocLinks = True Then
						&apos; сохраняем позицию ОТКУДА ссылка и ее ID
						&apos; не заносим дважды одну и ту же закладку...
						If UBound(sLinksTo) = -1 Then
							AddLinksToArray(UBound(sBodyParagraphs)+1, oSect.Bookmark.Name)
						Else
							If sLinksTo(UBound(sLinksTo), 0) &lt;&gt; UBound(sBodyParagraphs)+1 AND _
								sLinksTo(UBound(sLinksTo), 1) &lt;&gt; oSect.Bookmark.Name Then
								AddLinksToArray(UBound(sBodyParagraphs)+1, oSect.Bookmark.Name)
							End If
						End If
					End If
					&apos;MsgBox &quot;Закладка - &quot; &amp; oSect.Bookmark.Name
				&apos;Else
				&apos;	MsgBox &quot;Что-то другое : &quot; &amp; oSect.TextPortionType
				End If
			Loop
			
			&apos; Теперь - парсер элементов - по стилям
			If oSect.NumberingIsNumber = True AND oSect.NumberingStyleName &lt;&gt; &quot;Outline&quot; Then
				&apos; заголовки стиля Heading игнорируются
				sPara = MakeNumberingNumberPara( oPar, sAllSectString, sPara )
				sAllSectString = &quot;&quot; &apos; &quot;обнуляем&quot;
			End If
			StyleParser(oPar.ParaStyleName, sPara)
		End If
	Loop
End Sub

Sub StyleParser(sParaStyleName As String, sPara As String)
	&apos; перебор по стилям
	If sPara = &quot;&quot; Then
		If sParaStyleName = sStylePoem Then
			&apos; для разных видов стихов (каждое четверостишие - в своем &lt;stanza&gt;)
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleCite Then
			&apos; для пустых строк в цитатах
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleAnnotation Then
			&apos; для пустых строк в аннотациях
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleEpigraph Then
			&apos; для пустых строк в эпиграфах
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		Else
			AddBodyArray(&quot;&lt;empty-line/&gt;&quot;, &quot;&quot;, False)
		End If
	Else
		Select Case sParaStyleName
			Case sStyleBookTitle
				AddBodyArray(sPara, sParaStyleName, False)
				If lBATIndex = -1 Then
					lBATIndex = UBound(sBodyParagraphs())
				End If
				
			Case sStylePoemTitle
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStylePoemSubTitle
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStylePoem
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStylePoemAuthor
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStylePoemDate
				AddBodyArray(sPara, sParaStyleName, False)
				
			Case sStyleEpigraph
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStyleEpigraphAuthor
				AddBodyArray(sPara, sParaStyleName, False)
				
			Case sStyleCite
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStyleCiteSubTitle
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStyleCiteAuthor
				AddBodyArray(sPara, sParaStyleName, False)
				
			Case sStyleAnnotation
				AddBodyArray(sPara, sParaStyleName, False)
			Case sStyleAnnotationSubTitle
				AddBodyArray(sPara, sParaStyleName, False)
					
			Case sStyleSubTitle
				AddBodyArray(sPara, sParaStyleName, False)
				
			Case sStyleLevel1
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel2
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel3
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel4
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel5
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel6
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel7
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel8
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel9
				AddBodyArray(sPara, sParaStyleName, True)
			Case sStyleLevel10
				AddBodyArray(sPara, sParaStyleName, True)
				
			Case sStyle_BookAnnotation
				AddBookAnnotation(sPara)
			Case Else &apos; что-то другое или просто параграф
				&apos; Отлов &quot;служебных&quot; стилей, применяемых для формирования раздела &lt;Description&gt; -
				&apos; они не должны быть в основном тексте книги  в fb2 файле.
				If sParaStyleName &lt;&gt; sStyle_BookAuthor AND sParaStyleName &lt;&gt; sStyle_BookTranslator AND _
					sParaStyleName &lt;&gt; sStyle_BookSeries AND sParaStyleName &lt;&gt; sStyle_PaperBookName AND _
					sParaStyleName &lt;&gt; sStyle_PaperBookPublisher AND sParaStyleName &lt;&gt; sStyle_PaperBookCity AND _
					sParaStyleName &lt;&gt; sStyle_PaperBookYear AND sParaStyleName &lt;&gt; sStyle_PaperBookISBN AND _
					sParaStyleName &lt;&gt; sStyle_PaperBookSeries AND sParaStyleName &lt;&gt; sStyle_BookKeywords AND _
					sParaStyleName &lt;&gt; sStyle_DateText AND sParaStyleName &lt;&gt; sStyle_DateValue AND _
					sParaStyleName &lt;&gt; sStyle_CustomInfo Then
					AddBodyArray(sPara, &quot;Para&quot;, False)
				End If
		End Select
	End If
	sPrevStyle = sParaStyleName
End Sub

&apos; перебор по in-line стилям
Function InLineParser(oSect As Object) As String
	&apos; обработка &quot;проблемных&quot; символов
	If bCorrectPara = True Then
		InLineParser = CorrectPara(oSect.getString())
	Else
		InLineParser = oSect.getString()
	End If
	
	If oSect.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
		Dim s As String
		s = Mid(oSect.HyperLinkURL, 1, 1)
		IF s &lt;&gt; &quot;#&quot; Then &apos; гиперссылка
			s = oSect.HyperLinkURL
		Else			&apos; закладка
			s = Mid(oSect.HyperLinkURL, 2)
			s = &quot;#_&quot; &amp; s
		End If
		InLineParser = &quot;&lt;a l:href=&quot;&quot;&quot; &amp; s &amp; &quot;&quot;&quot;&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/a&gt;&quot;
	ElseIf oSect.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
		InLineParser = &quot;&lt;strong&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/strong&gt;&quot;
	ElseIf oSect.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
		InLineParser = &quot;&lt;emphasis&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/emphasis&gt;&quot;
	ElseIf oSect.CharEscapement &gt; 0 Then
		InLineParser = &quot;&lt;sup&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/sup&gt;&quot;
	ElseIf oSect.CharEscapement &lt; 0 Then
		InLineParser = &quot;&lt;sub&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/sub&gt;&quot;
	ElseIf oSect.CharShadowed = True OR oSect.CharContoured = True OR oSect.CharStyleName = &quot;code&quot; Then
		&apos; тень или контур или символьный стиль code
		InLineParser = &quot;&lt;code&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/code&gt;&quot;
	ElseIf oSect.CharStrikeout &gt; 0 Then
		InLineParser = &quot;&lt;strikethrough&gt;&quot; &amp; InLineParser &amp; &quot;&lt;/strikethrough&gt;&quot;
	End If
	
	&apos; проверка на пустой абзац с форматом &lt;strong&gt;, &lt;emphasis&gt;...
	If InLineParser = &quot;&lt;strong&gt;&lt;/strong&gt;&quot; OR _
		InLineParser = &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot; OR _
		InLineParser = &quot;&lt;sub&gt;&lt;/sub&gt;&quot; OR _
		InLineParser = &quot;&lt;sup&gt;&lt;/sup&gt;&quot; OR _
		InLineParser = &quot;&lt;code&gt;&lt;/code&gt;&quot; OR _
		InLineParser = &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot; Then
		InLineParser = &quot;&quot;
	End If
End Function

&apos; перебор по всем in-line стилям
Function InLineAllParser(oSect As Object) As String
	&apos; обработка &quot;проблемных&quot; символов
	If bCorrectPara = True Then
		InLineAllParser = CorrectPara(oSect.getString())
	Else
		InLineAllParser = oSect.getString()
	End If
	
	If oSect.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
		Dim s As String
		s = Mid(oSect.HyperLinkURL, 1, 1)
		IF s &lt;&gt; &quot;#&quot; Then &apos; гиперссылка
			s = oSect.HyperLinkURL
		Else			&apos; закладка
			s = Mid(oSect.HyperLinkURL, 2)
			s = &quot;#_&quot; &amp; s
		End If
		InLineAllParser = &quot;&lt;a l:href=&quot;&quot;&quot; &amp; s &amp; &quot;&quot;&quot;&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/a&gt;&quot;
	End If
	If oSect.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
		InLineAllParser = &quot;&lt;strong&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/strong&gt;&quot;
	End If
	If oSect.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
		InLineAllParser = &quot;&lt;emphasis&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/emphasis&gt;&quot;
	End If
	If oSect.CharEscapement &gt; 0 Then
		InLineAllParser = &quot;&lt;sup&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/sup&gt;&quot;
	End If
	If oSect.CharEscapement &lt; 0 Then
		InLineAllParser = &quot;&lt;sub&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/sub&gt;&quot;
	End If
	If oSect.CharShadowed = True OR oSect.CharContoured = True OR oSect.CharStyleName = &quot;code&quot; Then
		&apos; тень или контур или символьный стиль code
		InLineAllParser = &quot;&lt;code&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/code&gt;&quot;
	End If
	If oSect.CharStrikeout &gt; 0 Then
		InLineAllParser = &quot;&lt;strikethrough&gt;&quot; &amp; InLineAllParser &amp; &quot;&lt;/strikethrough&gt;&quot;
	End If
	&apos; только теперь, после всех проверок
	If InLineAllParser = &quot;&quot; Then
		&apos; просто обычный текст
		InLineAllParser = oSect.getString()
	End If
	
	&apos; проверка на пустой абзац с форматом &lt;strong&gt;, &lt;emphasis&gt;...
	If InLineAllParser = &quot;&lt;strong&gt;&lt;/strong&gt;&quot; OR _
		InLineAllParser = &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot; OR _
		InLineAllParser = &quot;&lt;sub&gt;&lt;/sub&gt;&quot; OR _
		InLineAllParser = &quot;&lt;sup&gt;&lt;/sup&gt;&quot; OR _
		InLineAllParser = &quot;&lt;code&gt;&lt;/code&gt;&quot; OR _
		InLineAllParser = &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot; Then
		InLineAllParser = &quot;&quot;
	End If
End Function

&apos; парсер сносок
Function FootEndNoteParser(oSect As Object) As String
	Dim sNote As String, sNoteText As String
	Dim oFootnoteCursor As Object
	Static i As Integer
	sNote = &quot;&quot;
	i = iFootnoteCount + 1
	If bFootnoteSpace = True Then
		sNote = sNote &amp; &quot; &quot;
	End If
	sNote = sNote &amp; &quot;&lt;a l:href=&quot;&quot;#n&quot; &amp; i &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; sFootnoteLeft &amp; i &amp; sFootnoteRight &amp; &quot;&lt;/a&gt;&quot;
	
	ReDim Preserve sFootnoteText(iFootnoteCount) As String

	If bStyleFootnote = True Then &apos; форматирование текста сноски по inline-стилям
		&apos; отформатированный текст сноски сохраняем в массив
		FormatFootnoteText(oSect)
	Else &apos; не применяем inline-стили к тексту сносок
		oFootnoteCursor = oSect.Footnote.createTextCursor()
		oFootnoteCursor.gotoStart(False)
		If bNotesElements = True Then &apos; Экспорт сложных структур
			Dim sTextArray() As String &apos; временный массив для хранения всех строк одного абзаца
			Dim sType As String &apos; тип абзаца - стих, абзац, цитата...
			Do
				oFootnoteCursor.gotoEndOfParagraph(True)
				
				If bCorrectPara = True Then
					sNoteText = CorrectPara(oFootnoteCursor.String)
				Else
					sNoteText = oFootnoteCursor.String
				End If
			
				sType = FootnoteStyleParser(sTextArray, oFootnoteCursor.ParaStyleName, sNoteText)
				sTextArray(UBound(sTextArray())) = sTextArray(UBound(sTextArray())) &amp; chr(10) &amp; sType
			Loop While oFootnoteCursor.gotoNextParagraph(False)
			sFootnoteText(iFootnoteCount) = Join(sTextArray(), chr(10))
		Else &apos; Не экспортируем сложные структуры текста сносок
			Do
				oFootnoteCursor.gotoEndOfParagraph(True)
				sNoteText = sNoteText &amp; oFootnoteCursor.String &amp; chr(10)
			Loop While oFootnoteCursor.gotoNextParagraph(False)
	
			If bCorrectPara = True Then
				sFootnoteText(iFootnoteCount) = CorrectPara(sNoteText)
			Else
				sFootnoteText(iFootnoteCount) = sNoteText
			End If
		End If
	End If
	
	iFootnoteCount = iFootnoteCount + 1
	
	FootEndNoteParser = sNote
End Function

Function FormatFootnoteText(oSect)
	&apos; форматирование текста сноски по стилям
	Dim oFootnoteCursor As Object
	oFootnoteCursor = oSect.Footnote.createTextCursor()
	oFootnoteCursor.gotoStart(False)
	oFootnoteCursor.gotoEndOfParagraph(True)
	
	Dim oEnumF As Object, oSecEnumF As Object, oTextF As Object, oTextPortionF As Object
	Dim sParagF As String, sFNTH As String
		sParagF = &quot;&quot;
	Dim sTextArray() As String &apos; временный массив для хранения всех строк одного абзаца
	Dim sType As String &apos; тип абзаца - стих, абзац, цитата...
	
	Do
		oFootnoteCursor.gotoEndOfParagraph(True)
		oEnumF = oFootnoteCursor.createEnumeration
		While oEnumF.hasMoreElements
			oTextF = oEnumF.nextElement
			oSecEnumF = oTextF.createEnumeration
			While oSecEnumF.hasMoreElements
				oTextPortionF = oSecEnumF.nextElement
				If bOnlyOneStyle = True Then
					sParagF = sParagF &amp; InLineParser( oTextPortionF )
				Else
					sParagF = sParagF &amp; InLineAllParser( oTextPortionF )
				End If
			Wend
			&apos; парсер стилей сносок
			If bNotesElements = True Then
				sType = FootnoteStyleParser(sTextArray, oFootnoteCursor.ParaStyleName, sParagF)
				sTextArray(UBound(sTextArray())) = sTextArray(UBound(sTextArray())) &amp; chr(10) &amp; sType
				sParagF = &quot;&quot;
			End If	
		Wend
		If bNotesElements = False Then
			sParagF = sParagF &amp; chr(10)
		End If
	Loop While oFootnoteCursor.gotoNextParagraph(False)
	If bNotesElements = True Then
		sFootnoteText(iFootnoteCount) = Join(sTextArray(), chr(10))
	Else
		sFootnoteText(iFootnoteCount) = sParagF
	End If
End Function

&apos; парсер графики TextGraphicObject
Sub TextGraphicObjectParser( oContent As Object )
	MakeGraphic( oContent, True )
End Sub

&apos; парсер формул и диаграмм
Sub OLEParser( oContent As Object )
	MakeGraphic( oContent, False )
End Sub

&apos; создание картинки из графических объектов
Sub MakeGraphic( oContent As Object, bIsTextGraphic As Boolean )
	&apos; определяем тип (расширение) картинки
	Dim sType As String
	sType = GetGraphicType( oContent, bIsTextGraphic )
	
	&apos; создание тэгов картинок
	If oContent.AnchorType = 1 Then
		sPara = sPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sType &amp; &quot;&quot;&quot;/&gt;&quot;
	Else
		If bSaveImageTitle=True Then
			AddBodyArray(&quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sType &amp; &quot;&quot;&quot; title=&quot;&quot;&quot; &amp; oContent.getName() &amp; &quot;&quot;&quot;/&gt;&quot;, &quot;Image&quot;, False)
		Else
			AddBodyArray(&quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sType &amp; &quot;&quot;&quot;/&gt;&quot;, &quot;Image&quot;, False)
		End If
	End If
	
	&apos; экспорт картинки в файл
	Dim sFileNameURL As String, sFD As Object
	&apos; определяем тип документа
	sFD = GetFileData( ThisComponent.getURL() )
	If LCase( sFD.sExt ) = &quot;html&quot; Or LCase( sFD.sExt ) = &quot;htm&quot; Then
		sFileNameURL = ConvertFromURL( oContent.GraphicUrl )
	Else
		If IsWindowsOS() Then &apos; для Windows-системы
			sFileNameURL = getOOoFBToolsTempPath() &amp; &quot;\OOoFBToolsImage.png&quot;
		Else &apos; для Unix-систем
			sFileNameURL = getOOoFBToolsTempPath() &amp; &quot;/OOoFBToolsImage.png&quot;
		End If
		ExportGraphicToFile( oContent, bIsTextGraphic, sFileNameURL )
	End If
	
	&apos; кодирование картинки
	CodeToBase64( sFileNameURL, sType )
	
	iImgCurrent = iImgCurrent+1
	sPrevStyle = &quot;Image&quot;
End Sub

&apos; экспорт картинки в файл
Sub ExportGraphicToFile( oContent As Object, bIsTextGraphic As String, sFileNameURL As String )
	Dim oGP As Object, oGraphic As Object
	Dim args(3) As New com.sun.star.beans.PropertyValue
	oGP = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)   

	If bIsTextGraphic Then
		oGraphic = oContent.Graphic
	Else
		oGraphic = oContent.ReplacementGraphic
	End If

	args(0).Name  = &quot;MimeType&quot;
	args(0).Value = &quot;image/png&quot;
	args(1).Name  = &quot;URL&quot;
	args(1).Value = ConvertToURL( sFileNameURL )
	args(2).Name  = &quot;Compression&quot;
	args(2).Value = 1
	args(3).Name  =&quot;Interlaced&quot;
	args(3).Value = 0
	
	&apos; сохраняем картинку
	oGP.storeGraphic(oGraphic, args)
End Sub

&apos; генерируем base64-код картинок, формул и диаграм
Sub CodeToBase64( sGraphicUrl As String, sExt As String )
	&apos; удаляем временные файлы-скрипты
	If FileExists( getOOoFBToolsTempPath() &amp; &quot;/image.sh&quot; ) Then
		Kill getOOoFBToolsTempPath() &amp; &quot;/image.sh&quot;
	End If
	If FileExists( getOOoFBToolsTempPath() &amp; &quot;/mime-image.txt&quot; ) Then
		Kill getOOoFBToolsTempPath() &amp; &quot;/mime-image.txt&quot;
	End If
	
	&apos; кодируем картинки
	If IsWindowsOS() Then &apos; для Windows-системы
	
	Else &apos; для Unix-систем
		&apos; данные картинки и ее расширение
		Dim sScript As String
		Dim i As Integer
	
		&apos; генерируем скрипт
		sScript = &quot;#!/bin/sh&quot; &amp; chr(10) &amp; &quot;base64 &quot; &amp; sGraphicUrl &amp; &quot; &gt;&gt; &quot; &amp; getOOoFBToolsTempPath() &amp; &quot;/mime-image.txt&quot;
		SaveText( getOOoFBToolsTempPath() &amp; &quot;/image.sh&quot;, sScript, &quot;utf-8&quot; )
	
		&apos; делаем скрипт исполняемым
		Shell(ConvertFromUrl(getRootStorage( &quot;DikBSD.OOoFBTools&quot; ) &amp; &quot;/unix/mef.sh&quot;), 1, &quot;&quot;, true)
	
		&apos; конвертируем картинку в base64
		Shell( getOOoFBToolsTempPath() &amp; &quot;/image.sh&quot;, 1, &quot;&quot;, true)

		If FileExists( getOOoFBToolsTempPath() &amp; &quot;/mime-image.txt&quot; ) Then
			&apos; считываем код картинки из файла
			Dim aArray() As String, sCode As String
			ReadFileInArray( aArray(), getOOoFBToolsTempPath() &amp; &quot;/mime-image.txt&quot; )
			sCode = Join( aArray(), chr(10) )
		
			sCode =&quot;&lt;binary id=&quot;&quot;img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot; content-type=&quot;&quot;image/&quot; &amp; sExt &amp; &quot;&quot;&quot;&gt;&quot; &amp; sCode &amp; &quot;&lt;/binary&gt;&quot;
		
			&apos; добавляем очередную картинку в массив
			i = Ubound(Images()) + 1
			ReDim Preserve Images(i)
			Images(i) = sCode
		End If
	End If
End Sub

Function AddBodyArray(sPara As String, TextType As String, bLevel As Boolean)
	Dim l As Long
	l = Ubound(sBodyParagraphs(), 1) + 1
	&apos; для уровней - проверка на несколько строк
	If bLevel = False Then 
		If l &gt; 0 Then
			ReDim Preserve sBodyParagraphs(l, 1)
		Else Redim sBodyParagraphs(l, 1)
		End If
	
		sBodyParagraphs(l,0) = sPara
		sBodyParagraphs(l,1) = TextType
	Else
		If TextType &lt;&gt; sPrevStyle Then &apos; Разные уровни
			If l &gt; 0 Then
				ReDim Preserve sBodyParagraphs(l, 1)
			Else Redim sBodyParagraphs(l, 1)
			End If
			sBodyParagraphs(l,0) = &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;
			sBodyParagraphs(l,1) = TextType
		Else &apos; Одинаковые уровни - несколько строк - собираем их в один элемент
			Dim sText As String
			sText = sBodyParagraphs(UBound(sBodyParagraphs),0)
			sBodyParagraphs(UBound(sBodyParagraphs),0) = sText &amp; chr(10) &amp; &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;
		End If
	End If
	oProgressBar.setValue(l) &apos; Статусбар
End Function

Function AddLinksToArray(lTo As Long, sID As String)
	&apos; формирование строк массива  КУДА (№ строки массива sBodyParagraphs)
	Dim l As Long
	l = Ubound(sLinksTo(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sLinksTo(l, 1)
	Else Redim sLinksTo(l, 1)
	End If
	sLinksTo(l,0) = lTo
	sLinksTo(l,1) = &quot;_&quot; &amp; sID
End Function

Function AddBookAnnotation(sPara As String)
	&apos; Собираем всю &quot;отформатированную&quot; Аннотацию на Книгу
	Dim l As Long
	l = Ubound(sBookAnnotation()) + 1
	ReDim Preserve sBookAnnotation(l)
	sBookAnnotation(l) = sPara
	oProgressBar.setValue(UBound(sBodyParagraphs),0 &amp; UBound(sBookAnnotation) &apos; Статусбар
End Function

Function AddNotesArray(sTextArray As String, TextType As String, sPara As String, bLevel As Boolean)
	Dim l As Long
	l = Ubound(sTextArray()) + 1
	&apos; для уровней - проверка на несколько строк
	If bLevel = False Then 
		If l &gt; 0 Then
			ReDim Preserve sTextArray(l)
		Else Redim sTextArray(l)
		End If
		sTextArray(l) = sPara
	Else
		If TextType &lt;&gt; sPrevStyle Then &apos; Разные уровни
			If l &gt; 0 Then
				ReDim Preserve sTextArray(l)
			Else Redim sTextArray(l)
			End If
			sTextArray(l) = &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;
		Else &apos; Одинаковые уровни - несколько строк - собираем их в один элемент
			&apos; удаляем в конце строки последнего элемента массива символ  тип абзаца
			DelEndType(sTextArray)
			sTextArray(UBound(sTextArray)) = sTextArray(UBound(sTextArray)) &amp; &quot;&lt;p&gt;&quot; &amp; sPara &amp; &quot;&lt;/p&gt;&quot;
		End If
	End If
End Function

Function DelEndType(sTextArray As String)
	&apos; удаляем в конце строки последнего элемента массива символ  тип абзаца
	Dim sTempArray() As String, i As Integer, sResult As String
	sTempArray = Split(sTextArray(UBound(sTextArray)), chr(10))
	sResult = &quot;&quot;
	For i=LBound(sTempArray) To UBound(sTempArray)-1
		sResult = sResult &amp; sTempArray(i)
	Next i
	sTextArray(UBound(sTextArray)) = sResult
End Function

Function FootnoteStyleParser(sTextArray As String, sParaStyleName As String, sPara As String) As String
	&apos; перебор по стилям
	Dim sParaType As String
	sParaType = sParaStyleName
	If sPara = &quot;&quot; Then
		If sParaStyleName = sStylePoem Then
			&apos; для разных видов стихов (каждое четверостишие - в своем &lt;stanza&gt;)
			AddNotesArray(sTextArray, sParaStyleName, &quot;&quot;, False)
		ElseIf sParaStyleName = sStyleCite Then
			&apos; для пустых строк в цитатах
			AddNotesArray(sTextArray, sParaStyleName, &quot;&quot;, False)
		ElseIf sParaStyleName = sStyleAnnotation Then
			&apos; для пустых строк в аннотациях
			AddNotesArray(sTextArray, sParaStyleName, &quot;&quot;, False)
		ElseIf sParaStyleName = sStyleEpigraph Then
			&apos; для пустых строк в эпиграфах
			AddNotesArray(sTextArray, sParaStyleName, &quot;&quot;, False)
		Else
			AddNotesArray(sTextArray, sParaStyleName, &quot;&quot;, False)
			sParaType = &quot;&quot;
		End If
	Else
		Select Case sParaStyleName
			Case sStylePoemTitle
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStylePoemSubTitle
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStylePoem
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStylePoemAuthor
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStylePoemDate
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
				
			Case sStyleEpigraph
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStyleEpigraphAuthor
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
				
			Case sStyleCite
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStyleCiteSubTitle
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStyleCiteAuthor
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
				
			Case sStyleAnnotation
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
			Case sStyleAnnotationSubTitle
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
					
			Case sStyleSubTitle
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
				
			Case sStyleLevel1
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel2
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel3
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel4
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel5
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel6
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel7
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel8
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel9
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
			Case sStyleLevel10
				AddNotesArray(sTextArray, sParaStyleName, sPara, True)
				
			Case Else &apos; что-то другое или просто параграф
				AddNotesArray(sTextArray, sParaStyleName, sPara, False)
				sParaType = &quot;Para&quot;
		End Select
	End If
	sPrevStyle = sParaStyleName
	FootnoteStyleParser = sParaType
End Function

&apos; Обработка нумерованных и маркированных списков
Function MakeNumberingNumberPara( oPar, sStringPara, sFormatPara ) As String	
	&apos; sFormatPara - текст абзаца без тэгов форматирования
	&apos; sFormatPara - текст абзаца с тэгами форматирования
	If oPar.NumberingIsNumber = True Then &apos; нумерованные списки
		Dim oRN, oRNI
		oRN = oPar.NumberingRules
		oRNI = oRN.getByIndex(0)
		If UBound( oRNI ) = 9 Then &apos; нумерованные списки - нумерация видна в строке oPar.getString()
			Dim s As String, sPos As String
			s = Mid( oPar.getString(), 1, Len( oPar.getString() )-Len( sStringPara ) )
			sPos = Mid(sStringPara, 1,1)
			If sFormatPara &lt;&gt; &quot;&quot; And sPos &lt;&gt; &quot;&quot; Then InsertInString( sFormatPara, sPos, s &amp; &quot; &quot; &amp; sPos )
			MakeNumberingNumberPara = sFormatPara	
		ElseIf UBound( oRNI ) = 13 Then &apos; маркированные списки - маркер не виден в строке oPar.getString()
			If oRNI(11).Name &lt;&gt; &quot;BulletChar&quot; Then &apos;маркеры-картинки заменяем на •
				MakeNumberingNumberPara = &quot;• &quot; &amp; sFormatPara
			Else
				MakeNumberingNumberPara = oRNI(11).Value &amp; &quot; &quot; &amp; sFormatPara
			End If
		End If
	End If
End Function

&apos; парсер обложе книги
Sub MakeCoverParser
	Dim oParEnum As Object 	&apos;Счетчик, используемый для перебора параграфов
	Dim oPar As Object 		&apos;Перебираемый параграф
	Dim oSectEnum As Object &apos;Счетчик, используемый для перебора текстовых разделов
	Dim oSect As Object 	&apos;Перебиремый текстовый раздел (section)
	Dim oCEnum As Object 	&apos;Перебирает содержимое, такое как графические объекты
	Dim oContent As Object 	&apos;Перебираемое содержимое
	Dim textGraphService As String, graphicService As String, customShapeService As String
	
	textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	customShapeService	= &quot;com.sun.star.drawing.CustomShape&quot;

	oParEnum = ThisComponent.getText().createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Or _
					oContent.supportsService(customShapeService) Then
					&apos; нашли обложку книги, привязанной к параграфу
					MakeCoverTag( oContent, True )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Frame&quot; Then
							&apos; Парсер Текстовой Врезки
						ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
							&apos; нашли обложку книги - формулу, привязанную к параграфу
							MakeCoverTag( oContent, False )
						ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; нашли обложку книги - диаграмму, привязанную к параграфу
							MakeCoverTag( oContent, False )
						End If
					End If
				End If
			Loop

			&apos; Теперь переберем текстовые разделы (sections) и поищем графические объекты, которые привязаны к символу, или вставлены как символы
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()
				If oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Or _
							oContent.supportsService(customShapeService) Then
							&apos; нашли обложку книги, привязанной к символу
							MakeCoverTag( oContent, True )
						Else
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Frame&quot; Then
									&apos; Парсер Текстовой Врезки
								ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
									&apos; нашли обложку книги - формулу, привязанную к символу
									MakeCoverTag( oContent, False )
								ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; нашли обложку книги - диаграмму, привязанную к символу
									MakeCoverTag( oContent, False )
								End If
							End If
						End If
					Loop
				End If
			Loop
			&apos; Теперь - если стиль абзаца - Название Книги, то выход - дальше обложек быть не может
			If oPar.ParaStyleName = sStyleBookTitle Then
				Exit Sub
			End If
		End If
	Loop
End Sub

&apos; добавляем данные об очередной картинке-обложке в массив
Sub MakeCoverTag( oContent As Object, bIsTextGraphic As Boolean )
	&apos; заносим тэги обложек в массив
	Dim i As Integer
	i = Ubound(Covers()) + 1
	ReDim Preserve Covers(i)
	Covers(i) = &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; Ubound(Covers()) &amp; &quot;.&quot; &amp; GetGraphicType( oContent, bIsTextGraphic ) &amp; &quot;&quot;&quot;/&gt;&quot;
End Sub

Function GetGraphicType( oContent As Object, bIsTextGraphic As Boolean ) As String
	&apos; данные картинки и ее расширение
	Dim sExt As String, sUrl As String, sFD As Object, i As Integer
	
	&apos; определяем тип документа
	sFD = GetFileData( ThisComponent.getURL() )
	If LCase( sFD.sExt ) = &quot;html&quot; Or LCase( sFD.sExt ) = &quot;htm&quot; Then
		&apos; картинки лежат все конвертируемого файла (html, ...)
		sUrl = oContent.GraphicUrl
		sFD = GetFileData( sUrl )
		sExt = sFD.sExt
	Else
		&apos; картинки лежат внутри конвертируемого файла (odt, doc, rtf...)
		If bIsTextGraphic Then
			sExt = Mid( oContent.Graphic.MimeType, InStr( oContent.Graphic.MimeType, &quot;/&quot; )+1, Len(oContent.Graphic.MimeType) )
		Else &apos; для формул и диаграм
			sExt = &quot;png&quot;
		End If
	End If

	GetGraphicType = sExt
End Function

</script:module>