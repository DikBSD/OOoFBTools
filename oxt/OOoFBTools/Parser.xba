<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Parser" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Public Covers()		As String	&apos; массив, хранящий кодированные картинки-обложки
Public Images()		As String	&apos; массив, хранящий кодированные картинки с тегами &lt;binary&gt;

&apos; оформление сносок
Private bFENoteCommon	 	As Boolean
Private bFENoteSeparately	As Boolean
Private sFootnoteLeft	As String
Private sFootnoteRight	As String
Private bFootnoteSpace	As Boolean
Private sFootnoteTitle	As String
&apos; концевые сноски
Private sENLeft		As String
Private sENRight	As String
Private bENSpace	As Boolean
Private sENTitle	As String

Private lBATIndex		As Long 	&apos; Указатель на индекс ячейки массива sBodyParagraphs, хранящей стиль Book Author или Book Title

Private	vFootnoteText() As Variant	&apos; массив текста всех сносок по абзацам с их &quot;аттрибутами&quot;
Private	vEndnoteText()  As Variant	&apos; массив текста всех концевых сносок по абзацам с их &quot;аттрибутами&quot;
Private iFootnoteCount	As Integer	&apos; счетчик сносок
Private iEndnoteCount	As Integer	&apos; счетчик концевых сносок
Private iImgCurrent		As Integer	&apos; для формирования номера картинки
Private sPrevStyle		As String	&apos; название предыдущего стиля - для формирования Уровней из нескольких строк
Private sNotesPrevStyle As String	&apos; название предыдущего стиля - для формирования Уровней из нескольких строк в тексте сносок
Private sPara			As String	&apos; отформатированный текст параграфа

Sub DocumentParser()
	iFootnoteCount = 0
	iEndnoteCount = 0
	
	Dim oParEnum	As Object &apos;Счетчик, используемый для перебора параграфов
	Dim oPar		As Object &apos;Перебираемый параграф
	Dim oSectEnum	As Object &apos;Счетчик, используемый для перебора текстовых разделов
	Dim oSect		As Object &apos;Перебиремый текстовый раздел (section)
	Dim oCEnum		As Object &apos;Перебирает содержимое, такое как графические объекты
	Dim oContent	As Object &apos;Перебираемое содержимое
	
	Dim textGraphService		As String : textGraphService		= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService			As String : graphicService			= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	Dim customShapeService		As String : customShapeService		= &quot;com.sun.star.drawing.CustomShape&quot;
	Dim rectangleShapeService	As String : rectangleShapeService	= &quot;com.sun.star.drawing.RectangleShape&quot;
	Dim captionShapeService		As String : captionShapeService		= &quot;com.sun.star.drawing.CaptionShape&quot;
	Dim openBezierShapeService	As String : openBezierShapeService	= &quot;com.sun.star.drawing.OpenBezierShape&quot;
	Dim lineShapeService		As String : lineShapeService		= &quot;com.sun.star.drawing.LineShape&quot;
	Dim ellipseShapeService		As String : ellipseShapeService		= &quot;com.sun.star.drawing.EllipseShape&quot;

	lBATIndex = -1 &apos; пока нет ни Автора Книги, ни Названия Книги
			
	&apos; Перебрать параграфы. Таблицы перебираются одновременно с параграфами
	oParEnum = ThisComponent.getText().createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		&apos; сначала ищем таблицы
		If oPar.supportsService(&quot;com.sun.star.text.TextTable&quot;) Then
			&apos; парсер таблицы
			OOo23TextTableParser( oPar )
		ElseIf oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService( textGraphService ) OR oContent.supportsService( graphicService ) Then
					&apos; парсер растровой графики, привязанной к параграфаму
					MakeGraphic( oPar, oContent, True, sPara, False )
				ElseIf oContent.supportsService( customShapeService ) OR oContent.supportsService( rectangleShapeService ) OR _
					oContent.supportsService( captionShapeService ) OR oContent.supportsService( openBezierShapeService ) OR _
					oContent.supportsService( lineShapeService ) OR oContent.supportsService( ellipseShapeService ) Then
					&apos; парсер векторной графики, привязанной к параграфаму
					MakeGraphic( oPar, oContent, True, sPara, False )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Frame&quot; Then
							&apos; Парсер Текстовой Врезки
							TextFrameParser(oContent)
						ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
							&apos; парсер формулы, привязка &quot;параграф&quot;
							MakeGraphic( oPar, oContent, True, sPara, False )
						ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер диаграм, привязка &quot;параграф&quot;
							MakeGraphic( oPar, oContent, True, sPara, False )
						End If
					End If
				End If
			Loop

			&apos; Теперь переберем текстовые разделы (sections) и поищем графические объекты,
			&apos; которые привязаны к символу, или вставлены как символы
			oSectEnum = oPar.createEnumeration()
			Dim sAllSectString As String &apos; текст всех секций параграфа (нужен для определения нумерации и маркеров)
			sPara = &quot;&quot;
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Text&quot; Then
					If oSect.NumberingIsNumber = True AND oSect.NumberingStyleName &lt;&gt; &quot;Outline&quot; Then &apos; заголовки стиля Heading игнорируются
						sAllSectString = sAllSectString &amp; oSect.getString()
					End If
					&apos; парсер текстового абзаца
					sPara = sPara &amp; InLineAllParser( oSect )
					&apos; Обработка текста - на наличие обрыва строки (&lt;BR&gt; в html текстах) - иначе fb2-файл получается в некоторых случаях при форматной строке невалидным
					sPara = DelBreakLineInString( sPara )
				ElseIf oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService( textGraphService ) OR oContent.supportsService( graphicService ) Then
							&apos; парсер растровой графики, привязанной к символу
							MakeGraphic( oPar, oContent, True, sPara, False )
						ElseIf oContent.supportsService( customShapeService ) OR oContent.supportsService( rectangleShapeService ) OR _
							oContent.supportsService( captionShapeService ) OR oContent.supportsService( openBezierShapeService ) OR _
							oContent.supportsService( lineShapeService ) OR oContent.supportsService( ellipseShapeService ) Then
							&apos; парсер векторной графики, привязанной к символу
							MakeGraphic( oPar, oContent, True, sPara, False )
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Frame&quot; Then
									&apos; Парсер Текстовой Врезки
									TextFrameParser(oContent)
								ElseIf oContent.FrameStyleName = &quot;Formula&quot; Then
									&apos; парсер формулы, привязка &quot;символ&quot;
									MakeGraphic( oPar, oContent, True, sPara, False )
								ElseIf oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм, привязка &quot;символ&quot;
									MakeGraphic( oPar, oContent, True, sPara, False )
								End If
							End If
						End If
					Loop
					
				ElseIf oSect.TextPortionType = &quot;Footnote&quot; Then
					&apos; парсер сносок
					sPara = sPara &amp; FootEndNoteParser(oSect)
				ElseIf oSect.TextPortionType = &quot;Endnote&quot; Then
					&apos; парсер концевых сносок
					sPara = sPara &amp; FootEndNoteParser(oSect)
				ElseIf oSect.TextPortionType = &quot;TextField&quot; Then
					&apos; текстовые поля
					If bTextField = True Then
						sPara = sPara &amp; InLineAllParser( oSect )
					End If
				ElseIf oSect.TextPortionType = &quot;Bookmark&quot; Then
					&apos; закладки
					If bDocLinks = True Then
						&apos; сохраняем позицию ОТКУДА ссылка и ее ID
						&apos; не заносим дважды одну и ту же закладку...
						If UBound(sLinksTo) = -1 Then
							AddNewItemToArray2ISS(sLinksTo(), UBound(sBodyParagraphs)+1, &quot;_&quot; &amp; oSect.Bookmark.Name)
						Else
							If sLinksTo(UBound(sLinksTo), 0) &lt;&gt; UBound(sBodyParagraphs)+1 AND _
								sLinksTo(UBound(sLinksTo), 1) &lt;&gt; &quot;_&quot; &amp; oSect.Bookmark.Name Then
								AddNewItemToArray2ISS(sLinksTo, UBound(sBodyParagraphs)+1, &quot;_&quot; &amp; oSect.Bookmark.Name)
							End If
						End If
					End If
				&apos;Else
				&apos;	MsgBox &quot;Что-то другое : &quot; &amp; oSect.TextPortionType
				End If
			Loop
			
			&apos; Нумерованные и маркерованные списки
			If oSect.NumberingIsNumber = True AND oSect.NumberingStyleName &lt;&gt; &quot;Outline&quot; Then
				&apos; заголовки стиля Heading игнорируются
				sPara = MakeNumberingNumberPara( oPar, sAllSectString, sPara )
				sAllSectString = &quot;&quot; &apos; &quot;обнуляем&quot;
			End If
			StyleParser(oPar.ParaStyleName, sPara)
		End If
	Loop
End Sub

Sub StyleParser(sParaStyleName As String, sPara As String)
	&apos; перебор по стилям
	If sPara = &quot;&quot; Then
		If sParaStyleName = sStylePoem Then
			&apos; для разных видов стихов (каждое четверостишие - в своем &lt;stanza&gt;)
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleCite Then
			&apos; для пустых строк в цитатах
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleAnnotation Then
			&apos; для пустых строк в аннотациях
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleEpigraph Then
			&apos; для пустых строк в эпиграфах
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleEpigraphAuthor Then
			&apos; для пустых строк Автора Эпиграфа
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyleCiteAuthor Then
			&apos; для пустых строк Автора Цитат
			AddBodyArray(&quot;&quot;, sParaStyleName, False)
		ElseIf sParaStyleName = sStyle_BookAnnotation Then
			AddBookAnnotation( &quot;&quot; )
		Else
			If IsLevel( sParaStyleName ) Then
				AddBodyArray( sPara, sParaStyleName, True )
			Else
				AddBodyArray(&quot;&lt;empty-line/&gt;&quot;, &quot;&quot;, False)
			End If
		End If
	Else
		If sParaStyleName = sStyleBookTitle Then
			AddBodyArray(sPara, sParaStyleName, False)
			If lBATIndex = -1 Then
				lBATIndex = UBound( sBodyParagraphs() )
			End If
		ElseIf sParaStyleName = sStylePoemTitle Or sParaStyleName = sStylePoemSubTitle Or sParaStyleName = sStylePoem Or _
				sParaStyleName = sStylePoemAuthor Or sParaStyleName = sStylePoemDate Or _
				sParaStyleName = sStyleEpigraph Or sParaStyleName = sStyleEpigraphAuthor Or _
				sParaStyleName = sStyleCite Or sParaStyleName = sStyleCiteSubTitle Or sParaStyleName = sStyleCiteAuthor Or _
				sParaStyleName = sStyleAnnotation Or sParaStyleName = sStyleAnnotationSubTitle Or _
				sParaStyleName = sStyleSubTitle Then
					AddBodyArray( sPara, sParaStyleName, False )
		ElseIf IsLevel( sParaStyleName ) Then
				AddBodyArray( sPara, sParaStyleName, True )
		ElseIf sParaStyleName = sStyle_BookAnnotation Then
			AddBookAnnotation( sPara )
		Else &apos; что-то другое или просто параграф
			AddBodyArray( sPara, &quot;Para&quot;, False )
		End If
	End If
	sPrevStyle = sParaStyleName
End Sub

&apos; перебор по всем in-line стилям
Function InLineAllParser(oSect As Object) As String
	Dim sLexem As String, sLSpace As String, sRSpace As String, sStr As String

	&apos; обработка &quot;проблемных&quot; символов
	If bCorrectPara = True Then
		sLexem = CorrectPara(oSect.getString())
	Else
		sLexem = oSect.getString()
	End If
	
	&apos; вынос начальных и завершающих пробелов лексемы, если они есть, за тэги форматирования
	sStr = Trim( sLexem )
	If Len( sLexem ) &gt; Len( sStr ) Then &apos; изначальная лексема содержала пробелы в начале и(или) в конце
		Dim iPos As Integer : iPos = InStr( sLexem, sStr )
		sLSpace = Space( iPos-1 )
		sRSpace = Space( Len( sLexem ) - Len ( Trim (sLexem ) ) - Len( sLSpace ) )
		sLexem = sStr
	End If
		
	If oSect.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
		Dim s As String
		s = Mid(oSect.HyperLinkURL, 1, 1)
		IF s &lt;&gt; &quot;#&quot; Then &apos; гиперссылка
			s = CorrectPara( oSect.HyperLinkURL )
		Else			&apos; закладка
			s = Mid(oSect.HyperLinkURL, 2)
			s = &quot;#_&quot; &amp; CorrectBMLink( s )
		End If
		sLexem = &quot;&lt;a l:href=&quot;&quot;&quot; &amp; s &amp; &quot;&quot;&quot;&gt;&quot; &amp; sLexem &amp; &quot;&lt;/a&gt;&quot;
	End If
	
	If oSect.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
		sLexem = &quot;&lt;strong&gt;&quot; &amp; sLexem &amp; &quot;&lt;/strong&gt;&quot;
	End If
	If oSect.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
		sLexem = &quot;&lt;emphasis&gt;&quot; &amp; sLexem &amp; &quot;&lt;/emphasis&gt;&quot;
	End If
	If oSect.CharEscapement &gt; 0 Then
		sLexem = &quot;&lt;sup&gt;&quot; &amp; sLexem &amp; &quot;&lt;/sup&gt;&quot;
	End If
	If oSect.CharEscapement &lt; 0 Then
		sLexem = &quot;&lt;sub&gt;&quot; &amp; sLexem &amp; &quot;&lt;/sub&gt;&quot;
	End If
	If oSect.CharStyleName = &quot;code&quot; OR oSect.CharStyleName = &quot;Source Text&quot; OR _
		oSect.ParaConditionalStyleName = &quot;code&quot; OR oSect.ParaConditionalStyleName = &quot;Source Text&quot; OR _
		oSect.ParaStyleName = &quot;code&quot; OR oSect.ParaStyleName = &quot;Source Text&quot; OR _
		oSect.CharShadowed = True OR oSect.CharContoured = True Then
		sLexem = &quot;&lt;code&gt;&quot; &amp; sLexem &amp; &quot;&lt;/code&gt;&quot;
	Else
		If bCourrierNew = True Then
			If oSect.CharFontName = &quot;Courier New&quot; Then
				sLexem = &quot;&lt;code&gt;&quot; &amp; sLexem &amp; &quot;&lt;/code&gt;&quot;
			End If
		End If
	End If
	If oSect.CharStrikeout &gt; 0 Then
		sLexem = &quot;&lt;strikethrough&gt;&quot; &amp; sLexem &amp; &quot;&lt;/strikethrough&gt;&quot;
	End If
	&apos; только теперь, после всех проверок
	If sLexem = &quot;&quot; Then
		&apos; просто обычный текст
		sLexem = oSect.getString()
	End If
	
	&apos; проверка на пустой абзац с форматом &lt;strong&gt;, &lt;emphasis&gt;...
	If sLexem = &quot;&lt;strong&gt;&lt;/strong&gt;&quot; OR _
		sLexem = &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot; OR _
		sLexem = &quot;&lt;sub&gt;&lt;/sub&gt;&quot; OR _
		sLexem = &quot;&lt;sup&gt;&lt;/sup&gt;&quot; OR _
		sLexem = &quot;&lt;code&gt;&lt;/code&gt;&quot; OR _
		sLexem = &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot; Then
		sLexem = &quot;&quot;
	End If
	InLineAllParser = sLSpace + sLexem + sRSpace
End Function

</script:module>