<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="InCutParser" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

&apos; ////////////////////////////////////////////////////////////////////////////////////////////
&apos; ///////////////////////////////// Парсер текстовых врезок //////////////////////////////////
&apos; ////////////////////////////////////////////////////////////////////////////////////////////

Type tTableRowsInCut	&apos; для хранения данных по каждой структуре или параграфу Врезки
	str As String		&apos; текст структуры врезки (параграф, таблица)
	isTable As Boolean	&apos; если просто текст - то False, если таблица - True
End Type

&apos; /////////////////////////////////////////////////////////////////
&apos; Парсер Текстовой Врезки
Sub TextFrameParser( oContent As Object )
	Select Case sTextFrameToFB2
		Case sServD.sTable
			TextFrameTableParser( oContent )
			sPrevStyle = sTextFrameToFB2
		Case sServD.sCite
			TextFrameCiteParser( oContent )
			sPrevStyle = sTextFrameToFB2
		Case sServD.sStructure
			TextFrameStructParser( oContent )
			sPrevStyle = sTextFrameToFB2
		Case Else
			TextFrameTextParser( oContent )
			sPrevStyle = &quot;Para&quot;
	End Select
End Sub

&apos; парсер текстовой врезки как таблицы
Sub TextFrameTableParser( oCont As Object )
	Dim textGraphService	As String : textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService		As String : graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	
	Dim oParEnum As Object, oPar As Object, oCEnum As Object
	Dim oSectEnum As Object, oSect As Object, oContent As Object 
	Dim sFormatPara As String, sTable As String, sExt As String, sString As String
		
	Dim nMaxCollCount As Integer &apos; max число столбцов в таблице - из всех таблиц во Врезке
	Dim TableRows() As tTableRowsInCut &apos; массив, хранящий данные по каждой структуре или параграфу Врезки
	oParEnum = oCont.createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.ImplementationName = &quot;SwXParagraph&quot; Then
			sFormatPara = &quot;&quot;
			sString = &quot;&quot; &apos; Для &quot;отлова&quot; нумерованных списков
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
					&apos; парсер графики, привязанной к параграфу
					sExt = GetValidateForFB2FileExt( oContent )
					sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
					MakeGraphic( oContent, False )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер формул и диаграм, привязанной к параграфу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						End If
					End If
				End If
			Loop

			&apos; Символы
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
							&apos; парсер графики, привязанной к символу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм и формул, привязка &quot;символ&quot;
									sExt = GetValidateForFB2FileExt( oContent )
									sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
									MakeGraphic( oContent, False )
								End If
							End If
						End If
					Loop
				Else
					sString = sString &amp; oSect.getString()		
					If oSect.TextPortionType = &quot;Footnote&quot; Or oSect.TextPortionType = &quot;Endnote&quot; Then
						&apos; парсер сносок
						sFormatPara = sFormatPara &amp; FootEndNoteParser( oSect )
					Else
						If bOnlyOneStyle = True Then
							sFormatPara = sFormatPara &amp; InLineParser( oSect )
						Else
							sFormatPara = sFormatPara &amp; InLineAllParser( oSect )
						End If
					End If
				End If
			Loop
		
			If oPar.NumberingIsNumber = True Then &apos; нумерованные списки
				sFormatPara = MakeNumberingNumberPara( oPar, sString, sFormatPara )
				bMarker = True
			End If
		
			If bDelEL = True Then &apos; удаление пустых параграфов
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sTable = &quot;&lt;tr&gt;&quot; &amp; chr(10)
					sTable = sTable &amp; &quot;&lt;td align=&quot;&quot;&quot; &amp; GetFB2ParagraphAdjust( oPar ) &amp; &quot;&quot;&quot;&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
					sTable = sTable &amp; &quot;&lt;/tr&gt;&quot; &amp; chr(10)
					AddNewItemTotTableRowsInCutArray( TableRows, sTable, False )
				End If
			Else
				sTable = &quot;&lt;tr&gt;&quot; &amp; chr(10)
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sTable = sTable &amp; &quot;&lt;td align=&quot;&quot;&quot; &amp; GetFB2ParagraphAdjust( oPar ) &amp; &quot;&quot;&quot;&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
				Else &apos; пустая строка
					sTable = sTable &amp; &quot;&lt;td/&gt;&quot; &amp; chr(10)
				End If
				sTable = sTable &amp; &quot;&lt;/tr&gt;&quot; &amp; chr(10)
				AddNewItemTotTableRowsInCutArray( TableRows, sTable, False )
			End If
		ElseIf oPar.ImplementationName = &quot;SwXTextTable&quot; Then
			&apos; парсер таблицы
			Dim sT As String, sTI As String, nMaxCol As Integer
			nMaxCol = GetMaxColInTable( oPar )
			If nMaxCol &gt; nMaxCollCount Then nMaxCollCount = nMaxCol
			sT = OOo23TextTableParserForTextInCut( oPar )
			sTI = ReplaceInString( sT, &quot;&lt;table&gt;&quot; &amp; chr(10), &quot;&quot;, False )
			sTI = ReplaceInString( sTI, chr(10) &amp; &quot;&lt;/table&gt;&quot;, &quot;&quot;, False )
			AddNewItemTotTableRowsInCutArray( TableRows, sTI &amp; chr(10), True )
		End If
	Loop
	
	Dim i As Integer
	If nMaxCollCount &gt; 0 Then
		&apos; вставляем colspan
		For i=0 To UBound( TableRows() )
			If Not TableRows(i).isTable Then
				TableRows(i).str = InsertColspanForInCutRow( TableRows(i).str, nMaxCollCount )
			End If
		Next i
	End If
	
	&apos; формируем строку таблицы
	sTable = &quot;&quot;
	For i=0 To UBound( TableRows() )
		sTable = sTable &amp; TableRows(i).str
	Next i
	sTable = &quot;&lt;table&gt;&quot; &amp; chr(10) &amp; sTable &amp; &quot;&lt;/table&gt;&quot;
	
	AddBodyArray(sTable, &quot;Table&quot;, False)
End Sub

&apos; парсер текстовой врезки как цитаты
Sub TextFrameCiteParser( oCont As Object )
	Dim textGraphService	As String : textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService		As String : graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	
	Dim oParEnum As Object, oPar As Object, oCEnum As Object
	Dim oSectEnum As Object, oSect As Object, oContent As Object 
	Dim sFormatPara As String, sCite As String, sExt As String, sString As String
	
	oParEnum = oCont.createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.ImplementationName = &quot;SwXParagraph&quot; Then
			sFormatPara = &quot;&quot;
			sString = &quot;&quot; &apos; Для &quot;отлова&quot; нумерованных списков
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
					&apos; парсер графики, привязанной к параграфу
					sExt = GetValidateForFB2FileExt( oContent )
					sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
					MakeGraphic( oContent, False )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер формул и диаграм, привязанной к параграфу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						End If
					End If
				End If
			Loop

			&apos; Символы
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
							&apos; парсер графики, привязанной к символу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм и формул, привязка &quot;символ&quot;
									sExt = GetValidateForFB2FileExt( oContent )
									sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
									MakeGraphic( oContent, False )
								End If
							End If
						End If
					Loop
				Else
					sString = sString &amp; oSect.getString()		
					If oSect.TextPortionType = &quot;Footnote&quot; Or oSect.TextPortionType = &quot;Endnote&quot; Then
						&apos; парсер сносок
						sFormatPara = sFormatPara &amp; FootEndNoteParser( oSect )
					Else
						If bOnlyOneStyle = True Then
							sFormatPara = sFormatPara &amp; InLineParser( oSect )
						Else
							sFormatPara = sFormatPara &amp; InLineAllParser( oSect )
						End If
					End If
				End If
			Loop
		
			If oPar.NumberingIsNumber = True Then &apos; нумерованные списки
				sFormatPara = MakeNumberingNumberPara( oPar, sString, sFormatPara )
				bMarker = True
			End If
		
			If bDelEL = True Then &apos; удаление пустых параграфов
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				End If
			Else
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				Else &apos; пустая строка
					sCite = sCite &amp; &quot;&lt;empty-line/&gt;&quot; &amp; chr(10)
				End If
			End If
		ElseIf oPar.ImplementationName = &quot;SwXTextTable&quot; Then
			&apos; парсер таблицы
			sCite = sCite &amp; OOo23TextTableParserForTextInCut( oPar ) &amp; chr(10)
		End If
	Loop
	&apos; обработка начала и конца строки
	sCite = MakeStartEndOfText( sCite )
	AddBodyArray( sCite, &quot;Cite&quot;, False )
End Sub

&apos; парсер текстовой врезки как текста
Sub TextFrameTextParser( oCont As Object )
	Dim textGraphService	As String : textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService		As String : graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	
	Dim oParEnum As Object, oPar As Object, oCEnum As Object
	Dim oSectEnum As Object, oSect As Object, oContent As Object 
	Dim sFormatPara As String, sText As String, sExt As String, sString As String

	oParEnum = oCont.createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.ImplementationName = &quot;SwXParagraph&quot; Then
			sFormatPara = &quot;&quot;
			sString = &quot;&quot; &apos; Для &quot;отлова&quot; нумерованных списков
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
					&apos; парсер графики, привязанной к параграфу
					sExt = GetValidateForFB2FileExt( oContent )
					sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
					MakeGraphic( oContent, False )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер формул и диаграм, привязанной к параграфу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						End If
					End If
				End If
			Loop

			&apos; Символы
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
							&apos; парсер графики, привязанной к символу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм и формул, привязка &quot;символ&quot;
									sExt = GetValidateForFB2FileExt( oContent )
									sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
									MakeGraphic( oContent, False )
								End If
							End If
						End If
					Loop
				Else
					sString = sString &amp; oSect.getString()		
					If oSect.TextPortionType = &quot;Footnote&quot; Or oSect.TextPortionType = &quot;Endnote&quot; Then
						&apos; парсер сносок
						sFormatPara = sFormatPara &amp; FootEndNoteParser( oSect )
					Else
						If bOnlyOneStyle = True Then
							sFormatPara = sFormatPara &amp; InLineParser( oSect )
						Else
							sFormatPara = sFormatPara &amp; InLineAllParser( oSect )
						End If
					End If
				End If
			Loop
		
			If oPar.NumberingIsNumber = True Then &apos; нумерованные списки
				sFormatPara = MakeNumberingNumberPara( oPar, sString, sFormatPara )
				bMarker = True
			End If
			
			If bDelEL = True Then &apos; удаление пустых параграфов
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sText = sText &amp; &quot;&lt;p&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				End If
			Else
				If sFormatPara &lt;&gt; &quot;&quot; Then
					sText = sText &amp; &quot;&lt;p&gt;&quot; &amp; sFormatPara &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
				Else &apos; пустая строка
					sText = sText &amp; &quot;&lt;empty-line/&gt;&quot; &amp; chr(10)
				End If
			End If
		ElseIf oPar.ImplementationName = &quot;SwXTextTable&quot; Then
			&apos; парсер таблицы
			sText = sText &amp; OOo23TextTableParserForTextInCut( oPar ) &amp; chr(10)
		End If
	Loop
	
	&apos; обработка начала и конца строки
	sText = MakeStartEndOfText( sText )
	AddBodyArray(sText, &quot;Para&quot;, False)
End Sub

&apos;////////////////////////////////////////////////////////
&apos; парсер текстовой врезки как структуры
Sub TextFrameStructParser( oCont As Object )
	Dim textGraphService	As String : textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService		As String : graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	
	Dim oParEnum As Object, oPar As Object, oCEnum As Object
	Dim oSectEnum As Object, oSect As Object, oContent As Object 
	Dim sFormatPara As String, sExt As String, sString As String

	oParEnum = oCont.createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.ImplementationName = &quot;SwXParagraph&quot; Then
			sFormatPara = &quot;&quot;
			sString = &quot;&quot; &apos; Для &quot;отлова&quot; нумерованных списков
			oCEnum = oPar.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
			Do While oCEnum.hasMoreElements()
				oContent = oCEnum.nextElement()
				If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
					&apos; парсер графики, привязанной к параграфу
					sExt = GetValidateForFB2FileExt( oContent )
					sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
					MakeGraphic( oContent, False )
				Else
					&apos; Привязка к параграфу
					If oContent.ShapeType = &quot;FrameShape&quot; Then
						If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
							&apos; парсер формул и диаграм, привязанной к параграфу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						End If
					End If
				End If
			Loop

			&apos; Символы
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If oSect.TextPortionType = &quot;Frame&quot; Then
					oCEnum = oSect.createContentEnumeration(textGraphService)
					Do While oCEnum.hasMoreElements()
						oContent = oCEnum.nextElement()
						If oContent.supportsService(textGraphService) Or oContent.supportsService(graphicService) Then
							&apos; парсер графики, привязанной к символу
							sExt = GetValidateForFB2FileExt( oContent )
							sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
							MakeGraphic( oContent, False )
						Else
							&apos; Привязка к символу
							If oContent.ShapeType = &quot;FrameShape&quot; Then
								If oContent.FrameStyleName = &quot;Formula&quot; Or oContent.FrameStyleName = &quot;OLE&quot; Then
									&apos; парсер диаграм и формул, привязка &quot;символ&quot;
									sExt = GetValidateForFB2FileExt( oContent )
									sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
									MakeGraphic( oContent, False )
								End If
							End If
						End If
					Loop
				Else
					sString = sString &amp; oSect.getString()		
					If oSect.TextPortionType = &quot;Footnote&quot; Or oSect.TextPortionType = &quot;Endnote&quot; Then
						&apos; парсер сносок
						sFormatPara = sFormatPara &amp; FootEndNoteParser( oSect )
					Else
						If bOnlyOneStyle = True Then
							sFormatPara = sFormatPara &amp; InLineParser( oSect )
						Else
							sFormatPara = sFormatPara &amp; InLineAllParser( oSect )
						End If
					End If
				End If
			Loop
		
			If oPar.NumberingIsNumber = True Then &apos; нумерованные списки
				sFormatPara = MakeNumberingNumberPara( oPar, sString, sFormatPara )
				bMarker = True
			End If
		
			StyleParser(oPar.ParaStyleName, sFormatPara)
		ElseIf oPar.ImplementationName = &quot;SwXTextTable&quot; Then
			&apos; парсер таблицы
			Dim sTable as String
			sTable = OOo23TextTableParserForTextInCut( oPar )
			&apos;sTable = &quot;&lt;table&gt;&quot; &amp; chr(10) &amp; sTable &amp; &quot;&lt;/table&gt;&quot;
			AddBodyArray(sTable, &quot;Table&quot;, False)
		End If
	Loop
End Sub

&apos;////////////////////////////////////////////////////////////////////
&apos; парсер таблиц внутри Текстовой Врезки
Function OOo23TextTableParserForTextInCut( oTable As Object ) As String
	Dim nHeaderRowCount As Integer
	Dim sTable As String &apos; текст таблицы в fb2.1 формате
	Dim iCel As Integer &apos; текушая ячейка
	Dim CellNames
	iCel = 0 &apos; текушая ячейка
	CellNames = oTable.getCellNames()
	
	&apos; число строк заголовка таблицы
	nHeaderRowCount = GetHeaderRowCount( oTable )

	&apos; обработка сложных таблиц
	If IsComplexRowsCollTable(oTable) = True Then
		&apos;Сложная таблица: разное число столбцов и строк В ЯЧЕЙКЕ (очень сложная)
	Else
		&apos;Сложная таблица с разным числом столбцов в строке
		sTable = MakeComplexTable(nHeaderRowCount, oTable, CellNames)
	End If	
	OOo23TextTableParserForTextInCut = sTable
End Function

&apos; парсер графики внутри Текстовой Врезки
Function ImagesTextInCutParser( oContent As Object, sExt As String ) As String
	If bSaveImageTitle=True Then
		ImagesTextInCutParser = &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot; title=&quot;&quot;&quot; &amp; oContent.getName() &amp; &quot;&quot;&quot;/&gt;&quot;
	Else
		ImagesTextInCutParser = &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot;/&gt;&quot;
	End If
End Function

Sub AddNewItemTotTableRowsInCutArray( sArray() As tTableRowsInCut, sStr As String, isTable As Boolean )
	Dim j As Long
	j = Ubound(sArray()) + 1
	ReDim Preserve sArray(j)
	sArray(j).str = sStr
	sArray(j).isTable = isTable
End Sub

&apos; вставляем colspan для строки из 1-й ячейки (colspan=nCollMaxInTable)
Function InsertColspanForInCutRow( sText As String, nCollMaxInTable As Integer ) As String
	Dim sStr As String, i As Integer
	sStr = sText
	If Instr( sStr, &quot;&lt;td/&gt;&quot; )&gt;0 Or Instr( sStr, &quot;&lt;th/&gt;&quot; )&gt;0 Then
		&apos; для &quot;пустых&quot; тэгов
		InsertInString( sStr, &quot;/&gt;&quot;, &quot; colspan=&quot;&quot;&quot; &amp; nCollMaxInTable &amp; &quot;&quot;&quot;/&quot; )
	Else
		sStr = ReplaceInString( sStr, &quot;&lt;th&quot;, &quot;&lt;th colspan=&quot;&quot;&quot; &amp; nCollMaxInTable &amp; &quot;&quot;&quot;&quot;, False )
		sStr = ReplaceInString( sStr, &quot;&lt;td&quot;, &quot;&lt;td colspan=&quot;&quot;&quot; &amp; nCollMaxInTable &amp; &quot;&quot;&quot;&quot;, False )
	End If
	InsertColspanForInCutRow = sStr
End Function

&apos; обработка начала и конца строки
Function MakeStartEndOfText( sText As String ) As String
	If Mid( sText, 1, 3 ) = &quot;&lt;p&gt;&quot; Then
		sText = Mid(sText, 4, Len(sText))   &apos; убираем &lt;p&gt; в начале
	Else 
		If Mid( sText, 1, 13 ) = &quot;&lt;empty-line/&gt;&quot; Then &apos; &lt;empty-line/&gt;
			sText = &quot;&lt;/p&gt;&quot; &amp; Mid(sText, 14, Len(sText)) &apos; вставляем &lt;/p&gt; в начале вместо &lt;empty-line/&gt;
		End If
	End If
	If Mid( sText, Len(sText)-4, 4 ) = &quot;&lt;/p&gt;&quot; Then
		sText = Mid(sText, 1, Len(sText)-5) &apos; убираем &lt;/p&gt; в конце
	Else 
		If Mid( sText, Len(sText)-13, 13 ) = &quot;&lt;empty-line/&gt;&quot; Then &apos; &lt;empty-line/&gt;
			sText = Mid(sText, 1, Len(sText)-14) &amp; &quot;&lt;p&gt;&quot; &apos; вставляем &lt;p&gt; в конце вместо &lt;empty-line/&gt;
		ElseIf bDelEL And Mid( sText, Len(sText)-8, 8 ) = &quot;&lt;/table&gt;&quot; Then 
			sText = sText &amp; &quot;&lt;p&gt;&quot; &apos; иначе при опции &quot;Удалять пустые абзацы&quot; и Режимах &quot;Текст&quot; и &quot;Цитата&quot; после таблицы, как последнего элемента будет в функции записи fb2 стоять &lt;/p&gt; - невалидность
		End If
	End If
	MakeStartEndOfText = sText
End Function

&apos; возвращает валидное расширение файла Графики
Function GetValidateForFB2FileExt( oContent As Object ) As String
	&apos; определяем тип (расширение) картинки
	Dim sExt As String
	sExt = GetGraphicExt( oContent )
	&apos; приведение расширения графики к допустимому для fb2-читалок
	sExt = ValidateFileExt( sExt )
	GetValidateForFB2FileExt = sExt
End Function

</script:module>