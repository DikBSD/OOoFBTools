<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Functions" script:language="StarBasic">REM  *****  BASIC  *****
&apos; ===========================================================================
&apos;	Разные функции, необходимые для работы разных содулей пакета OOoFBTools
&apos; ===========================================================================

Option Explicit

&apos; ====================================================================
&apos;						 Работа с Документом
&apos; ====================================================================
&apos; делаем активным текущий документ
Sub ActiveDocument()
	Dim oDoc As Object : oDoc = ThisComponent
	oDoc.CurrentController.Frame.ContainerWindow.toFront()
	oDoc.CurrentController.Frame.Activate()
End Sub

&apos; сохранение документа, если он был изменен
Sub SaveDocIsModified( oDoc As Object )
	If ( oDoc.isModified ) Then
		If ( oDoc.hasLocation AND ( Not oDoc.isReadOnly ) ) Then
			oDoc.store()
		Else
			oDoc.setModified( False )
		End If
	End If
End Sub

&apos; закрытие документа
Sub CloseDoc( oDoc As Object )
	If HasUnoInterfaces( oDoc, &quot;com.sun.star.util.XCloseable&quot; ) Then
		oDoc.close( True )
	Else
		oDoc.dispose()
	End If
End Sub

&apos; загрузка документа (возвращает oDoc)
Function LoadDocFromUrl( sUrl As String ) As Object
	Dim args()
	Dim oDeskTop : oDeskTop = CreateUnoService(&quot;com.sun.star.frame.Desktop&quot;)
	LoadDocFromUrl = oDeskTop.Loadcomponentfromurl( sUrl, &quot;_blank&quot;, 0, args() )
End Function

&apos; ======================================================================================================================
&apos;						 							Работа с графикой
&apos; ======================================================================================================================
&apos; OLE, диаграммы, формулы...
Function isTextEmbeddedObject( ByRef oGraphic As Object ) As Boolean
	Dim textEmbeddedObject As String : textEmbeddedObject = &quot;com.sun.star.text.TextEmbeddedObject&quot;
	
	If oGraphic.supportsService( textEmbeddedObject ) Then
		isTextEmbeddedObject = True
	Else
		isTextEmbeddedObject = False
	End If
End Function	

&apos; векторная графика
Function isVectorGraphic( ByRef oGraphic As Object ) As Boolean
	Dim customShapeService			As String : customShapeService			= &quot;com.sun.star.drawing.CustomShape&quot;
	Dim rectangleShapeService		As String : rectangleShapeService		= &quot;com.sun.star.drawing.RectangleShape&quot;
	Dim captionShapeService			As String : captionShapeService			= &quot;com.sun.star.drawing.CaptionShape&quot;
	Dim openBezierShapeService		As String : openBezierShapeService		= &quot;com.sun.star.drawing.OpenBezierShape&quot;
	Dim closedBezierShapeService	As String : closedBezierShapeService	= &quot;com.sun.star.drawing.ClosedBezierShape&quot;
	Dim lineShapeService			As String : lineShapeService			= &quot;com.sun.star.drawing.LineShape&quot;
	Dim ellipseShapeService			As String : ellipseShapeService			= &quot;com.sun.star.drawing.EllipseShape&quot;
	Dim polyLineShapeService		As String : polyLineShapeService		= &quot;com.sun.star.drawing.PolyLineShape&quot;
	Dim polyPolygonShapeService		As String : polyPolygonShapeService		= &quot;com.sun.star.drawing.PolyPolygonShape&quot;
	
	If oGraphic.supportsService( customShapeService ) OR oGraphic.supportsService( rectangleShapeService ) OR _
		oGraphic.supportsService( captionShapeService ) OR oGraphic.supportsService( openBezierShapeService ) OR _
		oGraphic.supportsService( closedBezierShapeService ) OR oGraphic.supportsService( lineShapeService ) OR _
		oGraphic.supportsService( ellipseShapeService ) OR oGraphic.supportsService( polyLineShapeService ) OR _
		oGraphic.supportsService( polyPolygonShapeService ) Then
		isVectorGraphic = True
	Else
		isVectorGraphic = False
	End If
End Function

&apos; растровая графика
Function isRasterGraphic( ByRef oGraphic As Object ) As Boolean
	Dim textGraphService	As String : textGraphService	= &quot;com.sun.star.text.TextGraphicObject&quot;
	Dim graphicService		As String : graphicService		= &quot;com.sun.star.drawing.GraphicObjectShape&quot;
	
	If oGraphic.supportsService( textGraphService ) OR oGraphic.supportsService( graphicService ) Then
		isRasterGraphic = True
	Else
		isRasterGraphic = False
	End If
End Function

&apos; количество растровой графики в документе (TextGraphicObject и GraphicObjectShape)
Function DocRasterGraphicsCount() As Long
	DocRasterGraphicsCount = 0
	Dim oDoc			As Object	: oDoc			= ThisComponent
	Dim DrawPageCount	As Long		: DrawPageCount	= oDoc.getDrawPage().getCount()
	Dim oGraphic		As Object
	Dim l As Long
	For l = 0 To DrawPageCount - 1
		oGraphic = oDoc.getDrawPage().getByIndex(l)
		If isRasterGraphic( oGraphic ) Then
			DocRasterGraphicsCount = DocRasterGraphicsCount + 1
    	End If
	Next l
End Function

&apos; количество растровой графики (TextGraphicObject) в документе
Function TextGraphicObjectCount() As Long
	TextGraphicObjectCount = 0
	Dim oDoc			As Object	: oDoc			= ThisComponent
	Dim DrawPageCount	As Long		: DrawPageCount	= oDoc.getDrawPage().getCount()
	Dim oGraphic		As Object
	Dim l As Long
	For l = 0 To DrawPageCount - 1
		oGraphic = oDoc.getDrawPage().getByIndex(l)
		If oGraphic.supportsService(&quot;com.sun.star.text.TextGraphicObject&quot;) Then
			TextGraphicObjectCount = TextGraphicObjectCount + 1
    	End If
	Next l
End Function

&apos; количество растровой графики (GraphicObjectShape) в документе
Function GraphicObjectShapeCount() As Long
	GraphicObjectShapeCount = 0
	Dim oDoc			As Object	: oDoc			= ThisComponent
	Dim DrawPageCount	As Long		: DrawPageCount	= oDoc.getDrawPage().getCount()
	Dim oGraphic		As Object
	Dim l As Long
	For l = 0 To DrawPageCount - 1
		oGraphic = oDoc.getDrawPage().getByIndex(l)
		If oGraphic.supportsService(&quot;com.sun.star.drawing.GraphicObjectShape&quot;) Then
			GraphicObjectShapeCount = GraphicObjectShapeCount + 1
    	End If
	Next l
End Function

&apos; встраивание всей графики-ссылок в документ (файлы картинок находятся на жестком диске)
Sub embeddingAllGraphicLinksToDoc( ByRef Optional oProgressBar, ByRef Optional ProgressLabel )
	Dim oDoc			As Object	: oDoc			= ThisComponent
	Dim DrawPageCount	As Long		: DrawPageCount	= oDoc.getDrawPage().getCount()
	
	&apos; ищем все графические объекты-ссылки
	Dim oGraphic	As Object
	Dim oGraphics() As Object
	Dim l As Long
	For l = 0 To DrawPageCount - 1
		oGraphic = oDoc.getDrawPage().getByIndex(l)
		If isRasterGraphic( oGraphic ) Then
			If InStr(oGraphic.GraphicURL, &quot;vnd.sun&quot;) = 0 Then
				AddNewItemToObjectArray1( oGraphics(), oGraphic )
			End If
    	End If
	Next l
	
	Dim oText As Object
	If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
		oProgressBar.start( ProgressLabel, UBound( oGraphics() )
	End If
	For l = 0 To UBound( oGraphics() )
		If FileExists( oGraphics(l).GraphicUrl ) Then
			oText = oGraphics(l).getAnchor().getText()
			embeddingGraphicLinkToDoc( oDoc, oGraphics(l) )
			oText.removeTextContent( oGraphics(l) )
		End if
		If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
			oProgressBar.setValue(l)
		End If
	Next l
End Sub

&apos; встраивание графики-ссылки oGraphic в документ oDoc
Sub embeddingGraphicLinkToDoc ( oDoc, oGraphic )
	Dim oProvider		As Object : oProvider		= createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)
	Dim oShape			As Object : oShape			= oDoc.createInstance(&quot;com.sun.star.drawing.GraphicObjectShape&quot;)
	Dim oGraphicObject	As Object : oGraphicObject	= oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)
	oDoc.getDrawPage().add( oShape )

  	Dim props(0) As New com.sun.star.beans.PropertyValue
	props(0).Name  = &quot;URL&quot;
	props(0).Value = oGraphic.GraphicUrl

	oShape.Graphic = oProvider.queryGraphic( props() )

	oGraphicObject.GraphicUrl	= oShape.GraphicUrl
	oGraphicObject.Width		= oGraphic.getSize().Width
	oGraphicObject.Height		= oGraphic.getSize().Height
	oGraphicObject.AnchorType	= oGraphic.AnchorType &apos;com.sun.star.text.TextContentAnchorType.AS_CHARACTER

	oGraphic.getAnchor().getText().insertTextContent( oGraphic.getAnchor(), oGraphicObject, False )
	oDoc.getDrawPage().remove(oShape)
End Sub

&apos; изменение привязки для всей графики в документе
Sub changeAnchorForAllGraphics( iAnchor As Long, ByRef Optional oProgressBar, ByRef Optional ProgressLabel )
	Dim oDoc		As Object	: oDoc		= ThisComponent
	Dim oGraphics	As Object	: oGraphics	= oDoc.getGraphicObjects()
	Dim oThisGraphic As Object, i As Long

	If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
		oProgressBar.start( ProgressLabel, oGraphics.getCount() )
	End If

    For i = 0 To oGraphics.getCount() - 1
    	oThisGraphic = oGraphics.GetByIndex(i)
		oThisGraphic.AnchorType  = iAnchor
		If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
			oProgressBar.setValue(l)
		End If
	Next i
End Sub

&apos; изменение обтекания для всей графики в документе
Sub wrapImageForAllGraphics( wrapImage As Long, ByRef Optional oProgressBar, ByRef Optional ProgressLabel )
	Dim oDoc		As Object	: oDoc		= ThisComponent
	Dim oGraphics	As Object	: oGraphics = oDoc.getGraphicObjects()
	Dim oThisGraphic As Object, i As Long

	If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
		oProgressBar.start( ProgressLabel, oGraphics.getCount() )
	End If

    For i = 0 To oGraphics.getCount() - 1
    	oThisGraphic = oGraphics.GetByIndex(i)
		oThisGraphic.TextWrap = wrapImage
		&apos;oThisGraphic.Surround = wrapImage
		If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
			oProgressBar.setValue(l)
		End If
	Next i
End Sub

&apos; изменение горизонтального выравнивания графики в документе
Sub HorizontalAllignImageForAllGraphics( haImage As Long, ByRef Optional oProgressBar, ByRef Optional ProgressLabel )
	Dim oDoc		As Object	: oDoc		= ThisComponent
	Dim oGraphics	As Object	: oGraphics = oDoc.getGraphicObjects()
	Dim oThisGraphic As Object, i As Long

	If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
		oProgressBar.start( ProgressLabel, oGraphics.getCount() )
	End If

    For i = 0 To oGraphics.getCount() - 1
    	oThisGraphic = oGraphics.GetByIndex(i)
		oThisGraphic.HoriOrient = haImage
		If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
			oProgressBar.setValue(l)
		End If
	Next i
End Sub

&apos; изменение вертикального выравнивания графики в документе
Sub VerticalAllignImageForAllGraphics( vaImage As Long, ByRef Optional oProgressBar, ByRef Optional ProgressLabel )
	Dim oDoc		As Object	: oDoc		= ThisComponent
	Dim oGraphics	As Object	: oGraphics = oDoc.getGraphicObjects()
	Dim oThisGraphic As Object, i As Long

	If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
		oProgressBar.start( ProgressLabel, oGraphics.getCount() )
	End If

    For i = 0 To oGraphics.getCount() - 1
    	oThisGraphic = oGraphics.GetByIndex(i)
		oThisGraphic.VertOrient = vaImage
		If NOT IsMissing(oProgressBar) And ( NOT IsMissing(ProgressLabel) ) Then
			oProgressBar.setValue(l)
		End If
	Next i
End Sub
&apos; ====================================================================
&apos;						 Работа с датой и временем
&apos; ====================================================================
&apos; таймер - разница между окончанием и началом работы
Function TimerOfWorkAsDate( ByRef stertDateTime As Date, ByRef endDateTime As Date ) As Date
	TimerOfWorkAsDate = TimeValue( endDateTime ) - TimeValue( stertDateTime )
End Function

&apos; ====================================================================
&apos; 				Определение типа или языка символа
&apos; ====================================================================
&apos; Проверка является ли sVal кирилической буквой
Function IsCirillicLetter( sVal As String ) As Boolean
	&apos;А-Я, а-я, Ё,ё : 1040-1071, 1072-1103, 1025,1105 &apos; (s&gt;=1040 And s&lt;=1103) Or s=1025 Or s=1105
	&apos; Кирилица основная : 1024-1171, 1174,1175, 1178-1181, 1186,1187, 1198-1203, 1208-1211, 1240,1241, 1256,1257
	IsCirillicLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=1024 And s&lt;=1171) Or s=1174 Or s=1175 Or (s&gt;=1178 And s&lt;=1181) Or s=1186 Or s=1187 Or _
			(s&gt;=1198 And s&lt;=1203) Or (s&gt;=1208 And s&lt;=1211) Or s=1240 Or s=1241 Or s=1256 Or s=1257 Then
			IsCirillicLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal кирилической строчной буквой основного набора символов
Function IsSmallGeneralCirillicLetter( sVal As String ) As Boolean
	&apos;а-я,ё : 1072-1103, 1105
	IsSmallGeneralCirillicLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=1072 And s&lt;=1103) Or s=1105 Then
			IsSmallGeneralCirillicLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal кирилической ПРОПИСНОЙ буквой основного набора символов
Function IsCapitalGeneralCirillicLetter( sVal As String ) As Boolean
	&apos;А-Я,Ё : 1040-1071, 1025
	IsCapitalGeneralCirillicLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=1040 And s&lt;=1071) Or s=1025 Then
			IsCapitalGeneralCirillicLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal латинской буквой
Function IsLatinLetter( sVal As String ) As Boolean
	&apos; Основная латиница A-Z, a-z : 65-90, 97-122
	&apos; Латиница-1 : 192-255
	&apos; Расширенная латиница-A : 256-383
	&apos; Расширенная латиница-B : 399-539, 552,553,601,658
	&apos; Расширенные латинские дополнения : 7680-7929
	IsLatinLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=65 And s&lt;=90) Or (s&gt;=97 And s&lt;=122) Or _
			(s&gt;=256 And s&lt;=383) Or (s&gt;=399 And s&lt;=539) Or s=552 Or s=553 Or s=601 Or s=658 Or _
			(s&gt;=7680 And s&lt;=7929) Then
			IsLatinLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal строчной латинской буквой основного набора символов
Function IsSmallGeneralLatinLetter( sVal As String ) As Boolean
	&apos; Основная латиница a-z : 97-122
	IsSmallGeneralLatinLetter = False
	Dim s : s = Asc(sVal)
	If s &gt;= 97 And s &lt;= 122 Then
		IsSmallGeneralLatinLetter = True
	End If
End Function

&apos; Проверка является ли sVal ПРОПИСНОЙ латинской буквой основного набора символов
Function IsCapitalGeneralLatinLetter( sVal As String ) As Boolean
	&apos; Основная латиница A-Z : 65-90
	IsCapitalGeneralLatinLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If s &gt;= 65 And s &lt;= 90 Then
			IsCapitalGeneralLatinLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal греческой буквой
Function IsGreekLetter( sVal As String ) As Boolean
	&apos; Греческий основной : 902-974
	&apos; Греческий расширенный : 7936-8190
	IsGreekLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=902 And s&lt;=974) Or (s&gt;=7936 And s&lt;=8190) Then
			IsGreekLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal еврейской буквой
Function IsHebrewLetter( sVal As String ) As Boolean
	&apos; Иврит основной : 1456-1524
	&apos; Иврит расширенный : 64288-64335
	IsHebrewLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=1456 And s&lt;=1524) Or (s&gt;=64288 And s&lt;=64335) Then
			IsHebrewLetter = True
		End If
	End If
End Function

&apos; Проверка является ли sVal арабским буквой
Function IsArabicLetter( sVal As String ) As Boolean
	&apos; Арабский основной : 1548-1621
	&apos; Арабский расширенный : 1632-1790
	&apos; Арабский декоративный-A : 64336-65010
	&apos; Арабский декоративный-B : 65152-65276
	IsArabicLetter = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc(sVal)
		If (s&gt;=1548 And s&lt;=1621) Or (s&gt;=1632 And s&lt;=1790) Or _
			(s&gt;=64336 And s&lt;=65010) Or (s&gt;=65152 And s&lt;=65276) Then
			IsArabicLetter = True
		End If
	End If
End Function

&apos; какой язык у символа sVal
Function GetLang( sVal As String ) As String
	GetLang = &quot;Unknow&quot;
	If IsCirillicLetter(sVal) = True Then
		GetLang = &quot;Cirillic&quot;
	ElseIf IsLatinLetter(sVal) = True Then
		GetLang = &quot;Latin&quot;
	ElseIf IsGreekLetter(sVal) = True Then
		GetLang = &quot;Greek&quot;
	ElseIf IsHebrewLetter(sVal) = True Then
		GetLang = &quot;Hebrew&quot;
	ElseIf IsArabicLetter(sVal) = True Then
		GetLang = &quot;Arabic&quot;
	End If
End Function

&apos; является ли sVal буквой
Function IsLetter( sVal As String ) As Boolean
	IsLetter = False
	If IsCirillicLetter(sVal) = True Or IsLatinLetter(sVal) = True Or _
		IsGreekLetter(sVal) = True Or IsHebrewLetter(sVal) = True Or IsArabicLetter(sVal) = True Then
		IsLetter = True
	End If
End Function

&apos; является ли sVal цифрой
Function IsNumber( sVal As String ) As Boolean
	IsNumber = False
	If sVal &lt;&gt; &quot;&quot; Then
		Dim s : s = Asc( sVal )
		If ( s &gt;= 48 And s &lt;= 57 ) Then
			IsNumber = True
		End If
	End If
End Function

&apos; является ли sVal строчной буквой
Function IsSmallLetter( sVal As String ) As Boolean
	IsLetter = False
	If IsCirillicLetter(sVal) = True Or IsLatinLetter(sVal) = True Then
		IsLetter = True
	End If
End Function

&apos;========================================================================
&apos;				Работа со стилями документа
&apos;========================================================================
&apos; сортированный список всех символьных стилей, используемых в документе
Function ListOfDocumentCharacterStyles() As Array
	ListOfDocumentCharacterStyles = ListOfDocumentStyles( &quot;CharacterStyles&quot; )
End Function

&apos; сортированный список всех абзацевых стилей, используемых в документе
Function ListOfDocumentParagraphStyles() As Array
	ListOfDocumentParagraphStyles = ListOfDocumentStyles( &quot;ParagraphStyles&quot; )
End Function

&apos; сортированный список всех символьных стилей, используемых в документе
Function ListOfDocumentStyles( StyleType As String ) As Array
	Dim oCharacterStyles()		As Variant	: oCharacterStyles			= ThisComponent.StyleFamilies.getByName( StyleType )
	Dim sCharacterStyleNames()	As String	: sCharacterStyleNames()	= oCharacterStyles.getElementNames()
	
	Dim sListOfCharacterStyleNames As String
	Dim i As Long
	Dim aArray() As String
	For i = LBound(sCharacterStyleNames()) To UBound (sCharacterStyleNames())
		AddNewItemToArray1( aArray(), sCharacterStyleNames(i) )
	Next i
	bubble_sort(aArray())
	ListOfDocumentStyles = aArray()
End Function

&apos; поиск текста заданного стиля
Function GetTextOfStyle(sStyle As String, bMerge As Boolean) As String
	Dim sResult As String
	Dim oStr As Object, oEnum As Object
	Dim oDesc As Object, iCount As Long
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(sStyle)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		GetTextOfStyle = &quot;&quot;
		Exit Function
	End If
	For iCount = 0 To oEnum.getCount() - 1
		oStr = oEnum.getByIndex(iCount)
		If bMerge Then
			sResult = sResult &amp; oStr.getString() &amp; &quot; &quot;
		Else
			sResult = sResult &amp; chr(10) &amp; oStr.getString()
		End If
	Next iCount
	If bMerge Then
		sResult = Mid(sResult, 1, Len(sResult)-1)
	Else
		sResult = Mid(sResult, 2, Len(sResult)-1)
	End If
	GetTextOfStyle = sResult
End Function

&apos; есть ли в тексте абзац со стилем sStyle
Function IsStyleExists( sStyle As String ) As Boolean
	Dim oDesc As Object, oEnum As Object
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(sStyle)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		IsStyleExists = False
	Else
		IsStyleExists = True
	End If
End Function

&apos; форматирование абзаца заданным стилем
Sub SetParaStyle(Style As String)
	Dim document   As Object : document		= ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(1) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Template&quot;
	args1(0).Value = Style
	args1(1).Name = &quot;Family&quot;
	args1(1).Value = 2
	dispatcher.executeDispatch(document, &quot;.uno:StyleApply&quot;, &quot;&quot;, 0, args1())
End Sub

&apos; форматирование символа заданным стилем
Sub SetSymbolStyle(Style As String)
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(1) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Template&quot;
	args1(0).Value = Style
	args1(1).Name = &quot;Family&quot;
	args1(1).Value = 1
	dispatcher.executeDispatch(document, &quot;.uno:StyleApply&quot;, &quot;&quot;, 0, args1())
End Sub

&apos;  очистка всех стилей для выделенного символа
Sub ClearSymbolFormat()
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	
	Dim args1(2) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Underline.LineStyle&quot;
	args1(0).Value = 0
	args1(1).Name = &quot;Underline.HasColor&quot;
	args1(1).Value = False
	args1(2).Name = &quot;Underline.Color&quot;
	args1(2).Value = -1
	dispatcher.executeDispatch(document, &quot;.uno:Underline&quot;, &quot;&quot;, 0, args1())

	Dim args2(0) As New com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;Italic&quot;
	args2(0).Value = False
	dispatcher.executeDispatch(document, &quot;.uno:Italic&quot;, &quot;&quot;, 0, args2())

	Dim args3(0) As New com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;Bold&quot;
	args3(0).Value = False
	dispatcher.executeDispatch(document, &quot;.uno:Bold&quot;, &quot;&quot;, 0, args3())
	dispatcher.executeDispatch(document, &quot;.uno:SuperScript&quot;, &quot;&quot;, 0, Array())
End Sub

&apos;  очистка всех цветов для выделенного символа
Sub ClearFont_Back_BackgroundColor()
	Dim document   As Object : document = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;FontColor&quot;
	args1(0).Value = -1
	dispatcher.executeDispatch(document, &quot;.uno:FontColor&quot;, &quot;&quot;, 0, args1())
	dispatcher.executeDispatch(document, &quot;.uno:BackColor&quot;, &quot;&quot;, 0, Array())
	
	Dim args3(0) As New com.sun.star.beans.PropertyValue
	args3(0).Name = &quot;BackgroundColor&quot;
	args3(0).Value = -1
	dispatcher.executeDispatch(document, &quot;.uno:BackgroundColor&quot;, &quot;&quot;, 0, args3())
End Sub

&apos;/////////////////////////////////////// Очистка всех стилей в абзаце//////////////////////////////////////
&apos; очистка всех стилей в заданной видимой курсором области текста
Sub ClearStyleToBase()
	Dim BaseStyle As String : BaseStyle = GetLocaDefaultStyleName() &apos; название стиля &quot;Базовый&quot; в зависимости от локали
	Dim oDoc As Object : oDoc = ThisComponent.CurrentController.Frame
	Dim oDispatcher As Object : oDispatcher = createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; )
	oDispatcher.executeDispatch( oDoc, &quot;.uno:ResetAttributes&quot;, &quot;&quot;, 0, Array() )
	Dim args2(1) As New com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;Template&quot;
	args2(0).Value = BaseStyle
	args2(1).Name = &quot;Family&quot;
	args2(1).Value = 2
	oDispatcher.executeDispatch( oDoc, &quot;.uno:StyleApply&quot;, &quot;&quot;, 0, args2() )
	&apos; форматирование символа заданным стилем
	SetSymbolStyle( BaseStyle )
End Sub

&apos;========================================================================
&apos;				Работа со шрифтами документа
&apos;========================================================================
&apos; сортированный список всех шрифтов символов, используемых в документе
Function ListOfDocumentCharactersFonts() As Array
	ListOfDocumentCharactersFonts = ListOfDocumentFonts( &quot;CharacterStyles&quot; )
End Function

&apos; сортированный список всех шрифтов абзацев, используемых в документе
Function ListOfDocumentParagraphsFonts() As Array
	ListOfDocumentParagraphsFonts = ListOfDocumentFonts( &quot;ParagraphStyles&quot; )
End Function

&apos; сортированный список всех шрифтов абзацев, используемых в документе
Function ListOfDocumentFonts( StyleType As String ) As Array
	Dim oStyleFamilies		: oStyleFamilies	= ThisComponent.StyleFamilies
	Dim oParagraphStyles	: oParagraphStyles	= oStyleFamilies.getByName( StyleType )
	Dim oStyle
	Dim sListFontNames As String
	Dim aArray() As String
	Dim i
	For i = 0 To oParagraphStyles.Count - 1
		oStyle = oParagraphStyles(i)
		Dim j As Long
		Dim flag As Boolean : flag = False
		For j = 0 To UBound(aArray())
			If aArray(j) = oStyle.charFontName Then
				flag = True
				Exit For
			End If
		Next j
		If UBound(aArray()) = -1 Then
			AddNewItemToArray1( aArray(), oStyle.charFontName )
			flag = False
		Else
			If flag = False Then
				AddNewItemToArray1( aArray(), oStyle.charFontName )
			End If
		End If
	Next i
	bubble_sort(aArray())
	ListOfDocumentFonts = aArray()
End Function

&apos; список всех шрифтов, используемых в системе. Sort = True - сортированный список
Function ListSystemFonts( Sort As Boolean ) As Array
	Dim oToolkit			As Object	: oToolkit			= CreateUnoService(&quot;com.sun.star.awt.Toolkit&quot;)
	Dim oDevice				As Variant	: oDevice			= oToolkit.createScreenCompatibleDevice(0, 0)
	Dim oFontDescriptors	As Variant	: oFontDescriptors	= oDevice.FontDescriptors
	Dim oFontDescriptor		As Object
	Dim aFontArray()		As String
	Dim iIndex				As Long
	For iIndex = LBound(oFontDescriptors) To UBound(oFontDescriptors)
		oFontDescriptor = oFontDescriptors(iIndex)
		Dim j As Long
		Dim flag As Boolean : flag = False
		For j = 0 To UBound(aFontArray())
			If aFontArray(j) = oFontDescriptor.Name Then
				flag = True
				Exit For
			End If
		Next j
		If UBound(aFontArray()) = -1 Then
			AddNewItemToArray1( aFontArray(), oFontDescriptor.Name )
			flag = False
		Else
			If flag = False Then
				AddNewItemToArray1( aFontArray(), oFontDescriptor.Name )
			End If
		End If
	Next iIndex
	If Sort Then
		If Not IsEmpty(aFontArray()) Then
			bubble_sort( aFontArray() )
		End If
	End If
	ListSystemFonts = aFontArray()
End Function

&apos; ===========================================================
&apos; 				Работа с файлами
&apos; ===========================================================
&apos; Пуст ли файл
Function IsFileEmpty( sFileInput As String ) As Boolean
	Dim bFileEmpty As Boolean : bFileEmpty = False
	If FileExists(sFileInput) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object

		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sFileInput) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Dim s As String : s = oTIS.readLine()
		If s = &quot;&quot; Or s = chr(10) Or s = chr(13) Then
			bFileEmpty = True
		End If
		oTIS.closeInput()
	End If
	IsFileEmpty = bFileEmpty
End Function

&apos; Запись массива в файл
Sub SaveArray( aArray() As String, sFile As String )
	Dim oOS As Object, oFA As Object, oTOS As Object, i As Long

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sFile)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(&quot;utf-8&quot;)
	
	For i=LBound(aArray()) To UBound(aArray())
		oTOS.writeString(aArray(i) &amp; chr(10))
	Next i
	oTOS.closeOutput()
End Sub

Sub ReadFileInArray( aArray() As String, sFile As String )
	&apos; чтение файла в массив
	If FileExists(sFile) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object

		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sFile) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; chr(10) Then
				If sLine &lt;&gt; &quot;&quot; Then
					Dim l As Long
					l = Ubound(aArray()) + 1
					If l &gt; 0 Then
						ReDim Preserve aArray(l)
					Else Redim aArray(l)
					End If
					aArray(l) = sLine
				End If
			End If
		Loop
		oTIS.closeInput()
	End If
End Sub

&apos; Читаем настройки и задаем координаты X,Y форме
Function ReadXYFormPos( sFileName As String, nX As Long, nY As Long ) As Boolean
	On Error Resume Next
	If FileExists( sFileName ) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object
		
		oSFA = createUnoService ( &quot;com.sun.star.ucb.SimpleFileAccess&quot; )
		oFS = oSFA.openFileRead ( ConvertToURL ( sFileName ) )
		oTIS = createUnoService ( &quot;com.sun.star.io.TextInputStream&quot; )
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; &quot;&quot; Then
				&apos; Устанавливаем данные
				Dim sSetting() As String : sSetting = Split(sLine, &quot;=&quot;)
				If sSetting(0) = &quot;X&quot; Then
					nX = sSetting(1)
				ElseIf sSetting(0) = &quot;Y&quot; Then
					nY = sSetting(1)
				End If
			End If
		Loop
		oTIS.closeInput()
		ReadXYFormPos = True
	Else
		ReadXYFormPos = False
	End If
End Function

&apos; Читаем настройки и задаем значения контролам формы
Function ReadDlgSettings( sFileName As String, oDlg, nX As Long, nY As Long ) As Boolean
	If FileExists( sFileName ) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object
		oSFA = createUnoService ( &quot;com.sun.star.ucb.SimpleFileAccess&quot; )
		oFS = oSFA.openFileRead ( ConvertToURL ( sFileName ) )
		oTIS = createUnoService ( &quot;com.sun.star.io.TextInputStream&quot; )
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; &quot;&quot; Then
				&apos; Устанавливаем данные в контролы		
				Dim sSetting() As String : 	sSetting = Split( sLine, &quot;=&quot; )
				If sSetting(0) = &quot;X&quot; Then
					nX = sSetting(1)
				ElseIf sSetting(0) = &quot;Y&quot; Then
					nY = sSetting(1)
				Else
					Dim oCtrl As Object : oCtrl = oDlg.GetControl( sSetting(0) )
					If Not IsNull( oCtrl ) Then
						If oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot;	Then
							oCtrl.State = sSetting(1)
						ElseIf oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot;	Then
							oCtrl.State = sSetting(1)
						ElseIf oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot;	Then
							Dim oLB As Object : oLB = oDlg.getControl( sSetting(0) )
							oLB.SelectItemPos( sSetting(1), True )
						ElseIf oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot;	Then
							oCtrl.Text = sSetting(1)
						ElseIf oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot;		Then
							oCtrl.Text = sSetting(1)
						ElseIf oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoNumericFieldControl&quot; Then
							oCtrl.Text = sSetting(1)
						End If
					End If
				End If
			End If
		Loop
		oTIS.closeInput()
		ReadDlgSettings = True
	Else
		ReadDlgSettings = False
	End If
End Function

Sub SaveSettings( sSettingsFilename As String, oDlg As Object )
	&apos; записываем установки
	Dim oOS As Object, oFA As Object, oTOS As Object
	Dim oLB As Object &apos; Для работы с ListBox`ами

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite( sSettingsFilename )
	oOS.truncate()
	oTOS.setOutputStream( oOS )
	oTOS.setEncoding( &quot;utf-8&quot; )
	
	Dim ctrl As Object, i As Long
	ctrl = oDlg.getControls()
	For i = LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).SelectedItemPos &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoNumericFieldControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Value &amp; chr(10))
		End If
	Next i
	oTOS.writeString(&quot;X=&quot; &amp; oDlg.PosSize.X &amp; chr(10))
	oTOS.writeString(&quot;Y=&quot; &amp; oDlg.PosSize.Y &amp; chr(10))
	oTOS.writeString(&quot;end of file&quot; &amp; chr(10))
	oTOS.closeOutput()
End Sub

Sub SetSettingsToControlls( sCurrentLine As String, oDlg )
	On Error Resume Next &apos;Goto ErrorHandler
	Dim oLB As Object &apos; Для работы с ListBox`ами
	Dim sSetting() As String : sSetting = Split(sCurrentLine, &quot;=&quot;)
	
	If oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
		oLB = oDlg.getControl(sSetting(0))
		oLB.SelectItemPos(sSetting(1), True)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoNumericFieldControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	End If
	&apos;Exit Sub
	&apos;ErrorHandler: &apos; идем дальше
End Sub

Function SaveText(sFile As String, sText As String, sEncoding As String)
	&apos; Сохранение текстовой строки в файл
	Dim oOS As Object, oFA As Object, oTOS As Object

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sFile)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(sEncoding)
	oTOS.writeString(sText &amp; chr(10))
	oTOS.closeOutput()
End Function

&apos; Обработка текста на наличие обрыва строки (&lt;BR&gt; в html текстах) - иначе fb2-файл получается в некоторых случаях при форматной строке невалидным
Function DelBreakLineInString( sString As String ) As String
	Dim aTemp() As String
	aTemp() = Split( sString, chr(10) )
	Dim i As Long : sString = &quot;&quot;
	If UBound( aTemp() ) &lt;&gt; -1 Then
		For i = 0 To UBound( aTemp() )
			sString = sString &amp; aTemp( i ) &amp; &quot; &quot;
		Next i
	End If
	If sString&lt;&gt;&quot;&quot; Then
		sString = Left( sString, Len( sString )-1, )
	End If
	DelBreakLineInString = sString
End Function

&apos; /// Работа с экраном ///

Function ToScreenCenter(oDlg)
	&apos; центрирование на экране
	Dim CurPosSize As New com.sun.star.awt.Rectangle
	Dim oFrame, FramePosSize, xWindowPeer, WindowHeight, WindowWidth, DialogWidth, DialogHeight, iXPos, iYPos
	oFrame = ThisComponent.getCurrentController().Frame
	FramePosSize = oFrame.getComponentWindow.PosSize
	xWindowPeer = oDlg.getPeer()
	CurPosSize = oDlg.getPosSize()
	WindowHeight = FramePosSize.Height
	WindowWidth = FramePosSize.Width
	DialogWidth = CurPosSize.Width
	DialogHeight = CurPosSize.Height
	iXPos = ((WindowWidth/2) - (DialogWidth/2))
	iYPos = ((WindowHeight/2) - (DialogHeight/2))
	oDlg.setPosSize(iXPos, iYPos, DialogWidth, DialogHeight, com.sun.star.awt.PosSize.POS)
End Function

&apos; ====================================================================================
&apos; 								Работа с числами
&apos; ====================================================================================

&apos; Если число четное - возвращаем True, если нечетное - False
Function IsEvenNumber( lNumber As Long ) As Boolean
	Dim b
	b = lNumber Mod 2
	If b = 0 Then
		IsEvenNumber = True
	Else
		IsEvenNumber = False
	End If
End Function

&apos; ====================================================================================
&apos; 									Работа с массивами
&apos; ====================================================================================

&apos; удаление из сортированного массива int чисел всех одинаковых
Function RemoveIdenticalSortArrayElements_int( naArray() As Integer ) As Array
	If UBound( naArray() ) = -1 Then Exit Function
	Dim naTemp() As Integer
	Dim nCurrent As Integer, nPrev As Integer : nPrev = naArray(0)
	AddNewItemToIntArray1( naTemp(), nPrev )
	Dim l As Long
	For l=1 To UBound( naArray() )
		nCurrent = naArray(l)
		If nPrev &lt; nCurrent Then
			AddNewItemToIntArray1( naTemp(), nCurrent )
			nPrev = nCurrent
		Else
			nPrev = nCurrent
		End If
	Next l
&apos;	Redim naArray()
&apos;	For l=0 To UBound( naTemp() )
 &apos;		AddNewItemToIntArray1( naArray(), naTemp(l) )
&apos;	Next l
	RemoveIdenticalSortArrayElements_int = naTemp()
End Function

&apos; удаление из не сортированного массива int чисел всех одинаковых
Function RemoveIdenticalNonSortArrayElements_int( naArray() As Integer ) As Array
	If UBound( naArray() ) = -1 Then Exit Function
	Dim l As Integer, i As Integer
	Dim naTemp() As Integer
	Dim nCurrent As Integer, b As Boolean : b = False
	For l=0 To UBound( naArray() )
		nCurrent = naArray(l)
		For i=0 To UBound( naArray() )
			If l &lt;&gt; i Then
				If nCurrent = naArray(i) Then
					b = True
					Exit For
				Else
					b = False
				End If
			End If
		Next i
		If Not b Then &apos; нет текущего номера
			AddNewItemToIntArray1( naTemp(), nCurrent )
		End If
	Next l
	RemoveIdenticalNonSortArrayElements_int = naTemp()
End Function

Function AddNewItemToVarArray1( vArray() As Variant, vValue As Variant )
	Dim l As Long : l = Ubound(vArray()) + 1
	ReDim Preserve vArray(l)
	vArray(l) = vValue
End Function

Function AddNewItemToObjectArray1( oArray() As Object, oValue As Object )
	Dim l As Long : l = Ubound(oArray()) + 1
	ReDim Preserve oArray(l)
	oArray(l) = oValue
End Function

Function AddNewItemToIntArray1( nArray() As Integer, nValue As Integer )
	Dim l As Integer : l = Ubound(nArray()) + 1
	ReDim Preserve nArray(l)
	nArray(l) = nValue
End Function

Function AddNewItemToLongArray1( lArray() As Long, lValue As Long )
	Dim l As Long : l = Ubound(lArray()) + 1
	ReDim Preserve lArray(l)
	lArray(l) = lValue
End Function

Function AddNewItemToArray1( sArray() As String, sValue As String )
	Dim l As Long : l = Ubound(sArray()) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l)
	Else ReDim sArray(l)
	End If
	
	sArray(l) = sValue
End Function

Function AddNewItemToArray2( sArray() As String, sValue0 As String, sValue1 As String )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 1)
	Else Redim sArray(l, 1)
	End If
	
	sArray(l,0) = sValue0
	sArray(l,1) = sValue1	
End Function

Function AddNewItemToArray3( sArray() As String, sValue0 As String, sValue1 As String, sValue2 As String )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 2)
	Else Redim sArray(l, 2)
	End If
	
	sArray(l,0) = sValue0
	sArray(l,1) = sValue1
	sArray(l,2) = sValue2
End Function

Function AddNewItemToArray4( sArray() As String, sValue0 As String, sValue1 As String, sValue2 As String, sValue3 As String )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 3)
	Else Redim sArray(l, 3)
	End If
	
	sArray(l,0) = sValue0
	sArray(l,1) = sValue1
	sArray(l,2) = sValue2
	sArray(l,3) = sValue3
End Function

Function AddNewItemToArray2SB( sArray() As String, sValue0 As String, bValue1 As Boolean )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 1)
	Else Redim sArray(l, 1)
	End If
	
	sArray(l,0) = sValue0
	sArray(l,1) = bValue1	
End Function

Function AddNewItemToArray3SBB( aArray() As String, sValue0 As String, bValue1 As Boolean, bValue2 As Boolean )
	Dim l As Long : l = Ubound(aArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve aArray(l, 2)
	Else Redim aArray(l, 2)
	End If
	
	aArray(l,0) = sValue0
	aArray(l,1) = bValue1
	aArray(l,2) = bValue2
End Function


Function AddNewItemToArray2IS( sArray() As String, nValue0 As Long, sValue1 As String )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 1)
	Else Redim sArray(l, 1)
	End If
	
	sArray(l,0) = nValue0
	sArray(l,1) = sValue1	
End Function

Function AddNewItemToArray3ISS( sArray() As String, nValue0 As Long, sValue1 As String, sValue2 As String )
	Dim l As Long : l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 2)
	Else Redim sArray(l, 2)
	End If
	
	sArray(l,0) = nValue0
	sArray(l,1) = sValue1
	sArray(l,2) = sValue2
End Function

Function AddLineInArray( sTextArray() As String, sText As String, oProgressBar )
	Dim l As Long
	l = Ubound(sTextArray()) + 1
	If l &gt; 0 Then
		ReDim Preserve sTextArray(l)
	Else Redim sTextArray(l)
	End If
	sTextArray(l) = sText
	oProgressBar.setValue(l)
End Function

&apos; убираем перевод строки в тексте из ячеек матрицы
Function DelCR( sTextArray() As String )
	Dim sCR As String, i As Long
	For i = 0 To UBound(sTextArray())
		sCR = sTextArray(i)
		If InStr(sCR, chr(13)) &gt; 0 Then
			sTextArray(i) = ReplaceInString( sCR, chr(13), &quot;&quot;, False )
		End If
	Next i
End Function

&apos; удаление из массива указанного элемента
Function RemoveItemFrom3SBB( aArray() As String, ItemForRemove As String ) As Object
	&apos; ищем элемент (l), который нужно удалить
	Dim counter As Long
	For counter = 0 To UBound( aTablesName() )
		If aTablesName(counter,0) = ItemForRemove Then
			Exit For
		End If
	Next counter
	
	&apos; новый массив
	Dim aNewArray() As String
	
	&apos; заполняем его данными ДО удаляемого элемента
	Dim l As Long
	For l = 0 To counter-1
		AddNewItemToArray3SBB( aNewArray(), aArray(l,0), aArray(l,1), aArray(l,2) )
	Next l
	&apos; заполняем его данными ПОСЛЕ удаляемого элемента
	For l = counter + 1 To UBound( aArray() )
		AddNewItemToArray3SBB( aNewArray(), aArray(l,0), aArray(l,1), aArray(l,2) )
	Next l
	RemoveItemFrom3SBB = aNewArray
End Function

&apos; ====================================================================================
&apos; 								Работа со строками
&apos; ====================================================================================

&apos; возвращает регистр символа
Function IsLCase( s As String )
	Dim sT	As String : sT	= LCase( s )
	If s = ST Then
		IsLCase = True
	Else
		IsLCase = False
	End If
End Function

&apos; возвращает число подстрок в строке
Function GetSubStrCount(sStr As String, sSubStr As String) As Long
	Dim sArray() As String
	sArray = Split(sStr, sSubStr)
	GetSubStrCount = UBound(sArray)
End Function

&apos; транслитерация строки (только для русских букв)
Function RusTransliterationString( saTranslitLetters() As String, sString As String ) As String
	RusTransliterationString = sString
	Dim sStr As String : sStr = sString
	Dim s As String, nCode As Long
	If Not IsNull( sString ) Or Len( sString ) &gt; 0 Then
		Dim sTemplate As String : sTemplate = &quot;абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ&quot;
		Dim sTranslit As String : sTranslit = &quot;&quot;
		Dim i As Long, nInd As Long
		For i=1 To Len( sString )
			s = Mid( sStr, i, 1 )
			nInd = InStr( sTemplate, s )
			nCode = Asc( s )
			If ( nCode &gt;= 1040 And nCode &lt;=1103 ) Or nCode = 1025 Or nCode = 1105 Then
				If nInd &gt; 0 Then
					sTranslit = sTranslit &amp; saTranslitLetters(nInd-1)
				Else
					sTranslit = sTranslit &amp; &quot;-&quot;
				End If
			Else
				sTranslit = sTranslit &amp; s
			End If
		Next i
		RusTransliterationString = sTranslit
	End If
End Function

&apos; &quot;строгое&quot; значение строки (только цифры и латинские буквы)
Function StrictString( sString As String ) As String
	StrictString = sString
	If sString = Null Or Len( sString ) = 0 Then Exit Function

	Dim sStrictLetters As String : sStrictLetters = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-&quot;
	Dim sStrict As String : sStrict = &quot;&quot;
	Dim i As Long, nInd As Long, s As String
	For i=1 To Len( sString )
		s = Mid( sString, i, 1 )
		nInd = InStr( sStrictLetters, s )
		If nInd &gt; 0 Then
			sStrict = sStrict &amp; s
		End If
	Next i
	StrictString = sStrict
End Function

&apos; ====================================================================================
&apos; 								Корректура строки
&apos; ====================================================================================
&apos; удаление разрыва строки (для LO, у которого в regexp - баг)
Sub LOBreakLineTo( bDel, bPar, bSpace )
	Dim oDoc   		As Object : oDoc		= ThisComponent.CurrentController.Frame
	Dim Dispatcher	As Object : Dispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(18) As New com.sun.star.beans.PropertyValue
	Dim ReplaceSym As String
	If bDel = True Then
		&apos; Удаляем разрыв строки
		ReplaceSym = &quot;&quot;
	ElseIf bPar = True Then
		&apos; Заменяем разрыв строки на абзац
		ReplaceSym = &quot;\n&quot;
	ElseIf bSpace = True Then
		&apos; Заменяем разрыв строки на 1 пробел
		ReplaceSym = &quot; &quot;
	End If
	
	args1(0).Name = &quot;SearchItem.StyleFamily&quot;
	args1(0).Value = 2
	args1(1).Name = &quot;SearchItem.CellType&quot;
	args1(1).Value = 0
	args1(2).Name = &quot;SearchItem.RowDirection&quot;
	args1(2).Value = true
	args1(3).Name = &quot;SearchItem.AllTables&quot;
	args1(3).Value = false
	args1(4).Name = &quot;SearchItem.Backward&quot;
	args1(4).Value = false
	args1(5).Name = &quot;SearchItem.Pattern&quot;
	args1(5).Value = false
	args1(6).Name = &quot;SearchItem.Content&quot;
	args1(6).Value = false
	args1(7).Name = &quot;SearchItem.AsianOptions&quot;
	args1(7).Value = false
	args1(8).Name = &quot;SearchItem.AlgorithmType&quot;
	args1(8).Value = 1
	args1(9).Name = &quot;SearchItem.SearchFlags&quot;
	args1(9).Value = 65536
	args1(10).Name = &quot;SearchItem.SearchString&quot;
	args1(10).Value = &quot;\n&quot;
	args1(11).Name = &quot;SearchItem.ReplaceString&quot;
	args1(11).Value = ReplaceSym
	args1(12).Name = &quot;SearchItem.Locale&quot;
	args1(12).Value = 255
	args1(13).Name = &quot;SearchItem.ChangedChars&quot;
	args1(13).Value = 2
	args1(14).Name = &quot;SearchItem.DeletedChars&quot;
	args1(14).Value = 2
	args1(15).Name = &quot;SearchItem.InsertedChars&quot;
	args1(15).Value = 2
	args1(16).Name = &quot;SearchItem.TransliterateFlags&quot;
	args1(16).Value = 1280
	args1(17).Name = &quot;SearchItem.Command&quot;
	args1(17).Value = 3
	args1(18).Name = &quot;Quiet&quot;
	args1(18).Value = True

	Dispatcher.executeDispatch( oDoc, &quot;.uno:ExecuteSearch&quot;, &quot;&quot;, 0, args1() )
End Sub

&apos; Строка sSource изменяется - в ней до sBefore вставляется sInsert
Function InsertInString( sSource As String, sBefore As String, sInsert As String ) As String
	Dim i As Long, sStr1 As String, sStr2 As String
	i = InStr(sSource, sBefore)
	If i=0 Then
		Exit Function
	End If
	&apos; берем часть строки ДО sBefore
	sStr1 = Mid( sSource, 1, Instr(sSource, sBefore)-1 )
	sStr2 = Mid( sSource, Instr(sSource, sBefore)+1, Len(sSource) )
	sSource = sStr1 &amp; sInsert &amp; sStr2
	InsertInString = sSource
End Function

&apos; Строка sSource изменяется - в ней все части sDel заменяются на sReplace
&apos; Если sReplace - &quot;&quot;, то все sDel удаляются, иначе - замена на sReplace
Function ReplaceFromString( sSource As String, sDel As String, sReplace As String ) As Long
	If sSource = &quot;&quot; Then
		ReplaceFromString = 0
		Exit Function
	End If
	
	Dim i As Long, c As Long
	c = 0 &apos; счетчик число изменений в строке
	i = InStr(sSource, sDel)
	If i = 0 Then
		ReplaceFromString = 0
		Exit Function
	End If
	
On Local Error goTo ErrHandler &apos; на случай переполнения строки - таблица и т.д.
	Do While i &gt; 0
		&apos; В LO4 Mid в режиме замены работает неверно, поэтому используем ее в режиме функции возврата значений.
		sSource = Mid( sSource, 1, i - 1 ) &amp; sReplace &amp; Mid( sSource, i + Len( sDel ) )
		i = InStr( i, sSource, sDel )
		c = c + 1
	Loop
	ReplaceFromString = c
	Exit Function
ErrHandler:
	ReplaceFromString = c
End Function

&apos; Строка sSource изменяется - в ней все части sSearch заменяются на sReplace
&apos; Если sReplace - &quot;&quot;, то все sSearch удаляются, иначе - замена на sReplace
&apos; bCase - True - учитываем регистр, False - без учета регистра
&apos; lCount - счетчик числа замен - передается извне
Function ReplaceInStringWithRepCount( sSource As String, sSearch As String, sReplace As String, _
										bCase As Boolean, lCount As Long ) As String
	Dim sResult As String
	Dim lStartPos As Long, lCurrentPos As Long, c As Long &apos; счетчик числа замен
	c = 0
	If sSearch = &quot;&quot; Then
		sResult = sSource
		lCount = 0
	Else
		sResult = &quot;&quot;
		lStartPos = 1
		lCurrentPos = 1
		Do While lCurrentPos &lt;&gt; 0
			If bCase Then
				lCurrentPos = InStr( lStartPos, sSource, sSearch, 0 ) &apos; Учитывать регистр
			Else
				lCurrentPos = InStr( lStartPos, sSource, sSearch )
			End If
			If lCurrentPos &lt;&gt; 0 Then
				sResult = sResult &amp; Mid(sSource, lStartPos, lCurrentPos - lStartPos)
				sResult = sResult &amp; sReplace
				lStartPos = lCurrentPos + Len(sSearch)
				c = c + 1
			Else
				sResult = sResult &amp; Mid(sSource, lStartPos, Len(sSource))
			End If
		Loop
	End If
	lCount = c
	ReplaceInStringWithRepCount = sResult
End Function

&apos; Строка sSource изменяется - в ней все части sSearch заменяются на sReplace
&apos; Если sReplace - &quot;&quot;, то все sSearch удаляются, иначе - замена на sReplace
&apos; bCase - True - учитываем регистр, False - без учета регистра
Function ReplaceInString( sSource As String, sSearch As String, sReplace As String, bCase As Boolean ) As String
	Dim sResult As String
	Dim lStartPos As Long, lCurrentPos As Long
	If sSearch = &quot;&quot; Then
		sResult = sSource
	Else
		sResult = &quot;&quot;
		lStartPos = 1
		lCurrentPos = 1
		Do While lCurrentPos &lt;&gt; 0
			If bCase Then
				lCurrentPos = InStr( lStartPos, sSource, sSearch, 0 ) &apos; Учитывать регистр
			Else
				lCurrentPos = InStr( lStartPos, sSource, sSearch )
			End If
			If lCurrentPos &lt;&gt; 0 Then
				sResult = sResult &amp; Mid(sSource, lStartPos, lCurrentPos - lStartPos)
				sResult = sResult &amp; sReplace
				lStartPos = lCurrentPos + Len(sSearch)
			Else
				sResult = sResult &amp; Mid(sSource, lStartPos, Len(sSource))
			End If
		Loop
	End If
	ReplaceInString = sResult
End Function

&apos; корректировка абзаца - отлов символов &lt;,&gt;,&amp;
&apos; если размер строки больше допустимого в OpenBasic, то не обрабатываем строку - возвращаем ее, как есть (генерация исключения из-за переполнения).
Function CorrectPara( sPara As String ) As String
	Dim i As Long, iLen As Long
	Dim newPara As String, sChar As String
On Local Error GoTo ErrorHandler
	iLen = Len( sPara )&apos; длина анализируемой строки
	If iLen &gt; 0 Then
		For i = 1 To iLen
			sChar = Mid( sPara, i, 1 )
			If sChar = &quot;&amp;&quot; Then
				newPara = newPara + &quot;&amp;amp;&quot;
			ElseIf sChar = &quot;&lt;&quot; Then
				newPara = newPara + &quot;&amp;lt;&quot;
			ElseIf sChar = &quot;&gt;&quot; Then
				newPara = newPara + &quot;&amp;gt;&quot;
			Else
				newPara = newPara  + sChar
			End If
		Next i
		Dim s As String
		s = Mid( newPara, Len( newPara ), 1 )
		If s = chr(10) Or s = chr(13) Then
			newPara = Mid( newPara, 1, Len( newPara ) - 1 )
		End If
	End If
	CorrectPara = newPara
	Exit Function
ErrorHandler:
	&apos; не обрабатываем строку - переполлнение (размер строки больше допустимого в OpenBasic)
	CorrectPara = sPara
End Function

&apos; корректировка названия закладки - замена символов &lt;,&gt;,&amp; на _
Function CorrectBMLink( sPara As String ) As String
	Dim i As Long, iLen As Long
	Dim newPara As String, sChar As String
	iLen = Len(sPara)&apos; длина анализируемой строки
	For i = 1 To iLen
		sChar = Mid(sPara, i, 1)
		If sChar = &quot;&amp;&quot; OR sChar = &quot;&lt;&quot; OR sChar = &quot;&gt;&quot; Then
			newPara = newPara + &quot;_&quot;
		Else
			newPara = newPara  + sChar
		End If
	Next i
	CorrectBMLink = newPara
End Function

&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
Function FB2CorrectWord( sWord As String, iResult As Long )
	Dim i As Long, iLen As Long
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord &amp; &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		ElseIf sChar = &quot;&lt;&quot; Then
			newWord = newWord &amp; &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord &amp; &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
Function FB2CorrectBracketsWord( sWord As String, iResult As Long )
	Dim i As Long, iLen As Long
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&lt;&quot; Then
			newWord = newWord &amp; &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord &amp; &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
Function FB2CorrectAmpWord(sWord As String, iResult As Long)
	Dim i As Long, iLen As Long
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord &amp; &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

&apos; Убираем пустышки типа &lt;/x&gt;&lt;x&gt;
Function RemoveSuperfluous( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;/strong&gt;&lt;strong&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/emphasis&gt;&lt;emphasis&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/sub&gt;&lt;sub&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/sup&gt;&lt;sup&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/code&gt;&lt;code&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt;&lt;strikethrough&gt;&quot;, &quot;&quot;)
	RemoveSuperfluous = count
End Function

&apos; Убираем пустышки типа &lt;x&gt;&lt;/x&gt;
Function RemoveSuperfluousLR( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;strong&gt;&lt;/strong&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sub&gt;&lt;/sub&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;&lt;/sup&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;code&gt;&lt;/code&gt;&quot;, &quot;&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot;, &quot;&quot;)
	RemoveSuperfluousLR = count
End Function

&apos; Обработка пробелов, обрамленными стилями &lt;/x&gt; &lt;x&gt; и &lt;x&gt; &lt;/x&gt;
Function ClearStyleSpace( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;strong&gt; &lt;/strong&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;emphasis&gt; &lt;/emphasis&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sub&gt; &lt;/sub&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt; &lt;/sup&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;code&gt; &lt;/code&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;strikethrough&gt; &lt;/strikethrough&gt;&quot;, &quot; &quot;)
	
	count = count + ReplaceFromString(sSource, &quot;&lt;/strong&gt; &lt;strong&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/emphasis&gt; &lt;emphasis&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/sub&gt; &lt;sub&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/sup&gt; &lt;sup&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/code&gt; &lt;code&gt;&quot;, &quot; &quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt; &lt;strikethrough&gt;&quot;, &quot; &quot;)
	ClearStyleSpace = count
End Function

&apos; Обработка круглых скобок
Function WorkingRoundBracket( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;strong&gt;(&quot;, &quot;(&lt;strong&gt;&quot;)
	count = count + iResult(0) &amp; ReplaceFromString(sSource, &quot;)&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;)&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;emphasis&gt;(&quot;, &quot;(&lt;emphasis&gt;&quot;)
	count = count + iResult(1) &amp; ReplaceFromString(sSource, &quot;)&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;)&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sub&gt;(&quot;, &quot;(&lt;sub&gt;&quot;)
	count = count + iResult(2) &amp; ReplaceFromString(sSource, &quot;)&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;)&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	count = count + iResult(3) &amp; ReplaceFromString(sSource, &quot;)&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;)&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;code&gt;(&quot;, &quot;(&lt;code&gt;&quot;)
	count = count + iResult(4) &amp; ReplaceFromString(sSource, &quot;)&lt;/code&gt;&quot;, &quot;&lt;/code&gt;)&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	count = count + iResult(5) &amp; ReplaceFromString(sSource, &quot;)&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;)&quot;)
	WorkingRoundBracket = count
End Function

&apos; Обработка квадратных скобок
Function WorkingSquarteBracket( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;strong&gt;[&quot;, &quot;[&lt;strong&gt;&quot;)
	count = count + iResult(0) &amp; ReplaceFromString(sSource, &quot;]&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;]&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;emphasis&gt;[&quot;, &quot;[&lt;emphasis&gt;&quot;)
	count = count + iResult(1) &amp; ReplaceFromString(sSource, &quot;]&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;]&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sub&gt;[&quot;, &quot;[&lt;sub&gt;&quot;)
	count = count + iResult(2) &amp; ReplaceFromString(sSource, &quot;]&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;]&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	count = count + iResult(3) &amp; ReplaceFromString(sSource, &quot;]&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;]&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;code&gt;[&quot;, &quot;[&lt;code&gt;&quot;)
	count = count + iResult(4) &amp; ReplaceFromString(sSource, &quot;]&lt;/code&gt;&quot;, &quot;&lt;/code&gt;]&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	count = count + iResult(5) &amp; ReplaceFromString(sSource, &quot;]&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;]&quot;)
	WorkingSquarteBracket = count
End Function

&apos; Обработка фигурных скобок
Function WorkingFiguredBracket( sSource As String )
	Dim count As Long
	count = 0
	count = count + ReplaceFromString(sSource, &quot;&lt;strong&gt;{&quot;, &quot;{&lt;strong&gt;&quot;)
	count = count + iResult(0) &amp; ReplaceFromString(sSource, &quot;}&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;}&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;emphasis&gt;{&quot;, &quot;{&lt;emphasis&gt;&quot;)
	count = count + iResult(1) &amp; ReplaceFromString(sSource, &quot;}&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;}&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sub&gt;{&quot;, &quot;{&lt;sub&gt;&quot;)
	count = count + iResult(2) &amp; ReplaceFromString(sSource, &quot;}&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;}&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	count = count + iResult(3) &amp; ReplaceFromString(sSource, &quot;}&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;}&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;code&gt;{&quot;, &quot;{&lt;code&gt;&quot;)
	count = count + iResult(4) &amp; ReplaceFromString(sSource, &quot;}&lt;/code&gt;&quot;, &quot;&lt;/code&gt;}&quot;)
	count = count + ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	count = count + iResult(5) &amp; ReplaceFromString(sSource, &quot;}&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;}&quot;)
	WorkingFiguredBracket = count
End Function

&apos; ====================================================================================
&apos; 								Работа с таблицами
&apos; ====================================================================================
&apos; снятие защиты со всех ячеек всех таблиц (видимый курсор должен находиться ВНЕ таблицы)
Sub ResetAllTablesProtection()
	Dim oDoc   		As Object : oDoc  		= ThisComponent
	Dim oViewCursor	As Object : oViewCursor	= oDoc.getCurrentController().getViewCursor()
	If Not IsEmpty( oViewCursor.TextTable ) Then
		&apos; перепрыгиваем таблицу
		CursorAfterCurrentTextTable( oViewCursor )
	End If
	_UnoResetAllTablesProtection()
End Sub

&apos; список названий всех вложенных таблиц в ячейки других таблиц
Function getInnerTableNames( oDoc As Object )
	Dim aTablesName()	As String &apos; список всех вложенных таблиц
	Dim oTables			As Object : oTables = oDoc.getTextTables()
	Dim i As Long
	&apos; список вложенных таблиц
	For i=0 To oTables.getCount() - 1
		Dim oTable As Object : oTable = oTables.getByIndex(i)
		Dim oCurs : oCurs = oTable.getAnchor().getText().createTextCursor() &apos; родительская таблица
		If Not IsEmpty( oCurs.TextTable ) Then
			AddNewItemToArray1( aTablesName(), oTable.getName() )
		End If
	Next i
	getInnerTableNames = aTablesName()
End Function

Function IsTableNotInsertedTable(oTable As Object) As Boolean
	&apos; для таблицы без вложенных таблиц возвращает True
	&apos; для таблиц с вложенными таблицами - False
	&apos; РАЗОБРАТЬСЯ!!! - Не на всех сложных таблицах DataArray НЕ КАК ARRAY - глюк OOo
	On Error Goto ErrorHandler
&apos;	IsTableNotInsertedTable = IsArray(oTable.DataArray)
	If oTable.Columns.Count &gt; 0 OR IsArray(oTable.Data) = True OR IsArray(oTable.DataArray) = True Then
		IsTableNotInsertedTable = True
		Exit Function
	End If
	ErrorHandler:
	IsTableNotInsertedTable = False
End Function

&apos; Тип сложности таблицы
Function IsComplexRowsCollTable(oTable As Object) As Boolean
	&apos; True - если сложная таблица с разным числом столбцов и строк В ЯЧЕЙКЕ
	&apos; False - если сложная таблица с разным числом столбцов в строке
	Dim oCell As Object
	Dim n As String, i As Long
	Dim sNames() As String : sNames() = oTable.getCellNames()
	For i = LBound(sNames()) To UBound(sNames())
		oCell = oTable.getCellByName(sNames(i))
		n = &quot;&quot;
		GetCellLetterAndNumber(oCell.Cellname, n)
		If InStr(n, &quot;.&quot;) &gt; 0 Then
			IsComplexRowsCollTable = True
			Exit Function
		End If
	Next i
	IsComplexRowsCollTable = False
End Function

&apos; разбивает название ячейки таблицы на Букву (возвращаемое значение) и ее Номер (sNumber)
Function GetCellLetterAndNumber(sCell As String, sNumber As String) As String
	Dim i As Long
	Dim s As String, sy As String
	s = &quot;&quot;
	sy = &quot;&quot;
	If InStr(sCell, &quot;.&quot;) = 0 Then
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; sy
			End If
		Next i
	Else
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; Mid(sCell, i, Len(sCell))
				Exit For
			End If
		Next i
	End If
	GetCellLetterAndNumber = s
End Function

&apos; возвращает max число столбцов в сложной таблице (просмотр всех строк)
Function GetMaxColInTable(oTable As Object) As Long
	Dim i As Long, j As Long, nCollMaxInTable As Long
	Dim sNames() As String
	sNames() = oTable.getCellNames()
	nCollMaxInTable = 0
	i = 0
	Do While i &lt;= UBound(sNames())
		Dim oCell As Object
		Dim c As String, sNumber As String
		oCell = oTable.getCellByName(sNames(i)) &apos; первая ячейка строки
		c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
		j = 1 &apos; счетчик числа ячеек в строке
		i = i+1
		Do While i &lt;= UBound(sNames())
			&apos; следующая ячейка строки
			oCell = oTable.getCellByName(sNames(i))
			c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
			If c &lt;&gt; &quot;A&quot; Then
				j = j+1
				i = i+1
			Else &apos; нашли новую строку таблицы
				Exit Do
			End If
		Loop
		If nCollMaxInTable &lt; j Then
			nCollMaxInTable = j
		End If
	Loop
	GetMaxColInTable = nCollMaxInTable
End Function

&apos; число столбцов в строке стожной таблицы
Function GetColumnCountInRow(oTable As Object, nCell As Long, CellNames() ) As Long
	Dim oCell As Object, sNumber As String, c As String
	Dim nColumnCount As Long, i As Long, CellCursor
	nColumnCount = nCell
	nColumnCount = nColumnCount + 1
	i = 0
	Do While nColumnCount &lt;= UBound(CellNames())
		&apos; следующая ячейка строки
		oCell = oTable.getCellByName(CellNames(nColumnCount))
		CellCursor = oCell.createTextCursor()
		c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
		If c &lt;&gt; &quot;A&quot; Then
			nColumnCount = nColumnCount + 1
			i = i + 1
		Else	&apos; нашли новую строку таблицы - ячейка A
			Exit Do
		End If
	Loop
	GetColumnCountInRow = i+1
End Function

&apos;  возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы
Function GetMaxLineInRow(oTable, CellNames, iCel As Long) As Long
	Dim nMaxLines As Long, nLines As Long, iCol As Long
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To oTable.Columns.Count-1
		Cell = oTable.getCellByName(CellNames(iCel))
		nLines = UBound( Split( Cell.getString(), chr(10) ) )
		If nMaxLines &lt; nLines Then
			nMaxLines = nLines
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRow = nMaxLines
End Function

&apos; возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы,
&apos; учитывая то, что защищенная ячейка игнорируется и считается, что содержит 1 абзац. Т.е. все абзацы в ней сливаем вместе
Function GetMaxLineInRowWithProtect(oTable, CellNames, iCel As Long, nColumns As Long) As Long
	Dim nMaxLines As Long, nLines As Long, iCol As Long
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To nColumns-1
		Cell = oTable.getCellByName(CellNames(iCel))
		If Cell.IsProtected &lt;&gt; True Then &apos; пропускаем заблокированные ячейки
			nLines = UBound( Split( Cell.getString(), chr(10) ) )
			If nMaxLines &lt; nLines Then
				nMaxLines = nLines
			End If
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRowWithProtect = nMaxLines
End Function

&apos; возвращает выравнивание ячейки талицы по ширине в формате fb2
Function GetFB2ParagraphAdjust(CellCursor) As String
	Select Case CellCursor.paraAdjust
		Case com.sun.star.style.ParagraphAdjust.LEFT
			GetFB2ParagraphAdjust = &quot;left&quot;
		Case com.sun.star.style.ParagraphAdjust.CENTER
			GetFB2ParagraphAdjust = &quot;center&quot;
		Case com.sun.star.style.ParagraphAdjust.RIGHT
			GetFB2ParagraphAdjust = &quot;right&quot;
		Case Else
			GetFB2ParagraphAdjust =  &quot;left&quot;
	End Select
End Function

&apos; &quot;прыжок&quot; через таблицу
Sub CursorAfterCurrentTextTable( oCursor )
	While Not IsEmpty( oCursor.TextTable )
		oCursor.goDown( 1, False )
	Wend
	oCursor.gotoStartOfLine( False )
End Sub

&apos; ===============================================================================
&apos; 						Поиск данных в документе
&apos; ===============================================================================

&apos; есть ли строка Template в строковом массиве sArray()
Function IsExsistStringInArray( ByRef sArray() As String, Template As String ) As Long
	IsExsistStringInArray = -1
	Dim i As Long
	For i=0 To UBound( sArray() )
		If Template = sArray(i) Then
			IsExsistStringInArray = i
			Exit For
		End If
	Next i
End Function

&apos;********************************************************************************
&apos; есть ли в тексте неразрывный дефис
Function IsNoBreakDefExsist() As Boolean
	IsNoBreakDefExsist = False
	Dim vSearch	As Variant : vSearch = ThisComponent.createSearchDescriptor()
	vSearch.SearchString = chr(8209)
	Dim vFound As Variant : vFound = ThisComponent.findFirst( vSearch )
	If Not IsNull( vFound ) Then
		IsNoBreakDefExsist = True
	End If
End Function

&apos;********************************************************************************
&apos; есть ли в документе юникодные маркеры
Function IsUnicodeMarkerExistsInText() As Boolean
	IsUnicodeMarkerExistsInText = False
	Dim vSearch As Variant : vSearch = ThisComponent.createSearchDescriptor()
	With vSearch
		.SearchString				= &quot;[●◦○◈❄☼☀☆★⚐⚑✎✍☞☛✓✔✗✘✖☐☑☒❍❑❏❒❐➢➣➤➩➪➭➮➫➬➯➱➲✞☦☨✙✚◐◑]&quot; &apos;0x25FF
		.SearchRegularExpression	= True
	End With

	Dim vFound As Variant : vFound = ThisComponent.findFirst( vSearch )
	If Not IsNull( vFound ) Then
		IsUnicodeMarkerExistsInText = True
	End If
End Function

&apos; ====================================================================================
&apos; 									Работа с контролами
&apos; ====================================================================================
&apos; Установка итема языкового листбокса - язык системы по-умолчанию
Sub SetBookLangOOoDefaultLocal( oDlg As Object, slbLang As String )
	Dim i As Long
	For i=0 To UBound( sLangList() )
		If InStr( sLangList(i), &quot;(&quot; &amp; getOOoLocal() &amp; &quot;)&quot; ) &gt; 0  Then
			oDlg.getControl( slbLang ).selectItem( sLangList(i), True )
			Exit For
		End If
	Next i
End Sub

&apos; помечен ли хоть один CheckBox?
Function isOneCheckBoxeCheched( oDlg As Object ) As Boolean
	isOneCheckBoxeCheched = False
	Dim ctrl As Object : ctrl = oDlg.getControls()
	Dim i As Long
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			If ctrl(i).Model.State Then
				isOneCheckBoxeCheched = True
				Exit For
			End If
		End If
	Next i
End Function

&apos; сколько помечено CheckBox
Function countCheckBoxesCheched( oDlg As Object ) As Long
	countCheckBoxesCheched = 0
	Dim ctrl As Object : ctrl = oDlg.getControls()
	Dim i As Long
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			If ctrl(i).Model.State Then
				countCheckBoxesCheched = countCheckBoxesCheched + 1
				Exit For
			End If
		End If
	Next i
End Function

&apos; ====================================================================================
&apos; 								сортировка
&apos; ====================================================================================
&apos; перемена местами двух int массивов одинаковой размерности
Function swap_arrays_int( aArray1() As Long, aArray2() As Long ) As Boolean
	swap_arrays_int = False
	If UBound( aArray1() ) &lt;&gt; UBound( aArray1() ) Then Exit Function
	Dim l As Long
	Dim nTemp As Long
	For l=0 To UBound( aArray1() )
		nTemp = aArray1(l)
		aArray1(l) = aArray2(l)
		aArray2(l) = nTemp
	Next l
	swap_arrays_int = True
End Function

&apos; перемена местами двух string массивов одинаковой размерности
Function swap_arrays_string( aArray1() As String, aArray2() As String ) As Boolean
	swap_arrays_string = False
	If UBound( aArray1() ) &lt;&gt; UBound( aArray1() ) Then Exit Function
	Dim l As Long
	Dim sTemp As String
	For l=0 To UBound( aArray1() )
		sTemp = aArray1(l)
		aArray1(l) = aArray2(l)
		aArray2(l) = sTemp
	Next l
	swap_arrays_string = True
End Function

&apos; перемена местами двух итемов в массиве
Sub swap( aArray() As String, nPos1 As Long, nPos2 As Long )
	If UBound( aArray() )=-1 Then Exit Sub
	If nPos1 =-1 Then Exit Sub
	Dim sTemp As String
	sTemp = aArray(nPos1)
	aArray(nPos1) = aArray(nPos2)
	aArray(nPos2) = sTemp
End Sub

&apos; перемена местами двух итемов в массиве
Sub swap_int( aArray() As Long, nPos1 As Long, nPos2 As Long )
	If UBound( aArray() )=-1 Then Exit Sub
	Dim nTemp As Long
	nTemp = aArray(nPos1)
	aArray(nPos1) = aArray(nPos2)
	aArray(nPos2) = nTemp
End Sub

&apos; пузырьковая сортировка
Function bubble_sort( aArray() As String )
	Dim nSize As Long : nSize = Ubound(aArray())
	If nSize &lt;= 1 Then Exit Function
	Dim i As Long, j As Long
	&apos; Верхний предел внешнего цикла равен size-l, а не nSize, так как если все прочие элементы заняли свои места, 
	&apos; наибольший автоматически оказывается в правильной позиции. 
	For i = 0 To nSize - 1
		j = nSize - 1
		Do
			If (aArray(j - 1) &gt; aArray(j)) Then
				swap(aArray, j - 1, j)
			End If
		j = j - 1
		Loop While (j &gt; i)
	Next i
End Function

&apos; пузырьковая сортировка
Function bubble_sort_int( aArray() As Integer )
	Dim nSize As Integer : nSize = Ubound(aArray())
	If nSize &lt;= 1 Then Exit Function
	Dim i As Integer, j As Integer
	&apos; Верхний предел внешнего цикла равен size-l, а не nSize, так как если все прочие элементы заняли свои места, 
	&apos; наибольший автоматически оказывается в правильной позиции. 
	For i = 0 To nSize - 1
		j = nSize - 1
		Do
			If ( aArray(j - 1) &gt; aArray(j) ) Then
				swap_int(aArray, j - 1, j)
			End If
		j = j - 1
		Loop While (j &gt; i)
	Next i
End Function

&apos; ====================================================================================
&apos; 							Работа с системой
&apos; ====================================================================================
&apos; True, если это LibreOffice. False - если OpenOffice
Function isLibreOffice() As Boolean
	isLibreOffice = False
	If (Not GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;)) Then
		GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
	End If
	Dim s As String : s = getProductName()
	If InStr( s, &quot;LibreOffice&quot; ) = 1 Then
		isLibreOffice = True
	End If
End Function

&apos; возвращает название с версией Офиса
Function getOfficeName() As String
	If (Not GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;)) Then
		GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
	End If
	getOfficeName = getProductName()
End Function

&apos; Возвращает версию офиса без точек одним числом (например, 430, а не 4.3.0)
Function getOfficeVersion() As String
	If (Not GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;)) Then
		GlobalScope.BasicLibraries.loadLibrary(&quot;Tools&quot;)
	End If
	getOfficeVersion = getSolarVersion()
End Function

&apos; Версия OOo
Function OOoWriterVersion() As String
	Dim oSet, oConfigProvider
	Dim oParm(0) As New com.sun.star.beans.PropertyValue
	oConfigProvider = createUnoService(&quot;com.sun.star.configuration.ConfigurationProvider&quot;)
	oParm(0).Name = &quot;nodepath&quot;
	oParm(0).Value = &quot;/org.openoffice.Setup/Product&quot;
	oSet = oConfigProvider.createInstanceWithArguments(&quot;com.sun.star.configuration.ConfigurationAccess&quot;,oParm())
	OOoWriterVersion = oSet.getByName(&quot;ooSetupVersion&quot;)
End Function

&apos; Возвращает путь к папке конфигурации пользователя
Function getOOoFBToolsSettingsDir() As String
	&apos; Для Windows - C:\Documents and Settings\dikbsd\.OOoFBTools
	&apos; для Linux - /home/dikbsd/.OOoFBTools
	getOOoFBToolsSettingsDir = getHomePath() &amp; &quot;/.OOoFBTools/&quot;
End Function

&apos; Возвращает путь к домашней папке пользователя
Function getHomePath() As String
	Dim oPathSubst
	oPathSubst = createUnoService(&quot;com.sun.star.util.PathSubstitution&quot;)
	getHomePath = oPathSubst.getSubstituteVariableValue(&quot;$(home)&quot;)
End Function

&apos; Возвращает путь к ВРЕМЕННОЙ  папке OOo
Function getTempPath() As String
	Dim oPathSettings
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	getTempPath = oPathSettings.Temp
	If Right(getTempPath, 1) = &quot;/&quot; Then getTempPath = Mid(getTempPath, 1, Len(getTempPath)-1)
End Function

&apos; возвращает временную папку для OOoFBTools (в зависимости от системы)
Function getOOoFBToolsTempPath() As String
	If GetOS() = 0 Then &apos; Windows
		getOOoFBToolsTempPath = ConvertFromUrl( getTempPath() ) &amp; &quot;\ooofbtools-tmp&quot;
	Else &apos; Mac OS X, Linux, FreeBSD и т.д.
		getOOoFBToolsTempPath = &quot;/tmp/ooofbtools-tmp&quot;
	End If
End Function

&apos; что за система: 0 - Windows, 1 - Mac OS X, 2 - Linux, FreeBSD и т.д.
Function _GetOS() As Long &apos; старая ф-я определения OS - не работает под Linux и OOo 3.0
	Dim oPathSettings, sDir As String
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	sDir = oPathSettings.Work
	If InStr( sDir, &quot;file:///home/&quot; ) &gt; 0 Then
		GetOS = 2 &apos; Linux, FreeBSD и т.д.
	ElseIf InStr( sDir, &quot;file:///Users/&quot; ) &gt; 0 Then
		GetOS = 1 &apos; Mac OS X
	Else
		GetOS = 0 &apos; Windows
	End If
End Function

Function GetOS() As Long 
   Dim sDir As String : sDir = GetHomePath() 
   If InStr( sDir, &quot;file:///home/&quot; ) &gt; 0 Or InStr( sDir, &quot;file:///root&quot; ) &gt; 0 Then 
      GetOS = 2 &apos; Linux, FreeBSD и т.д. 
   ElseIf InStr( sDir, &quot;file:///Users/&quot; ) &gt; 0 Then 
      GetOS = 1 &apos; Mac OS X 
   Else 
      GetOS = 0 &apos; Windows 
   End If 
End Function

&apos; &quot;Путь&quot; к расширению
Function getRootStorage( sOXTName As String ) As String
	Dim oPIP As Object
	oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	getRootStorage = oPIP.getPackageLocation( sOXTName )
End Function

&apos; Версия расширения
Function getMyVersion( sOXTName As String ) As String
	getMyVersion = &quot;&quot;
	Dim oPIP As Object : oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	Dim aaExtensionList : aaExtensionList = oPIP.getExtensionList()
	Dim aExtensionList
	For Each aExtensionList In aaExtensionList
		If aExtensionList(0) = sOXTName Then
			 getMyVersion = aExtensionList(1)
			 Exit Function
		End If
	Next
End Function

&apos; Возвращает локаль
Function getOOoLocal() As String
	Dim sProvider As String	: sProvider	= &quot;com.sun.star.configuration.ConfigurationProvider&quot;
	Dim sAccess As String	: sAccess	= &quot;com.sun.star.configuration.ConfigurationAccess&quot;
	Dim oConfigProvider : oConfigProvider = createUnoService( sProvider )
	Dim oParm(0) As New com.sun.star.beans.PropertyValue
	oParm(0).Name	= &quot;nodepath&quot;
	oParm(0).Value	= &quot;/org.openoffice.Setup/L10N&quot;
	Dim oSet : oSet	= oConfigProvider.createInstanceWithArguments( sAccess, oParm() )
	getOOoLocal	= LCase( Left( Trim( oSet.getByName(&quot;ooLocale&quot;) ), 2 ) )
End Function

&apos; Запустить указанный файл
Sub FileExecute( sFilePath As String )
	Dim oSSE As Object : oSSE = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	oSSE.execute( sFilePath, &quot;&quot;, 0)
End Sub

&apos; ====================================================================================
&apos;								UNO функции
&apos; ====================================================================================
Sub _UnoDelete()
	&apos; удаление выделенного текста
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Delete&quot;, &quot;&quot;, 0, Array())
End Sub

Sub _UnoCut()
	&apos; вырезать выделенный текст в буфер
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Cut&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoCopy()
	&apos; копировать выделенный текст в буфер
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoPaste()
	&apos; вставить из буфера текст
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Paste&quot;, &quot;&quot;, 0, Array())
End Sub

Sub _UnoInsertFootnote()
	&apos; вставить сноску
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:InsertFootnote&quot;, &quot;&quot;, 0, Array())
End Sub

Sub _UnoInsertEndnote()
	&apos; вставить концевую сноску
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:InsertEndnote&quot;, &quot;&quot;, 0, Array())
End Sub

Sub _UnoSwBackspace()
	&apos; Backspace
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:SwBackspace&quot;, &quot;&quot;, 0, Array())
End Sub

Sub _UnoInsertText( sText As String )
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Text&quot;
	args1(0).Value = sText
	dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args1())
End Sub

Sub _UnoInsertBookmark( sBookMark As String )
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Bookmark&quot;
	args1(0).Value = sBookMark
	dispatcher.executeDispatch(document, &quot;.uno:InsertBookmark&quot;, &quot;&quot;, 0, args1())
End Sub

Sub _UnoDeleteBookMark( sBookMark As String )
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Bookmark&quot;
	args1(0).Value = sBookMark
	dispatcher.executeDispatch(document, &quot;.uno:DeleteBookmark&quot;, &quot;&quot;, 0, args1())
End Sub

&apos; вставка гиперссылки на выделенный текст: цель - закладка sBookMarkName
Sub _UnoMakeBookmarkHyperlink( sSelectedText As String, sBookMarkName As String )
	Dim oDocControlFrame	As Object : oDocControlFrame	= ThisComponent.CurrentController.Frame
	Dim oDispatcher			As Object : oDispatcher			= createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; )
	Dim args1(4) 			As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Hyperlink.Text&quot;
	args1(0).Value = sSelectedText
	args1(1).Name = &quot;Hyperlink.URL&quot;
	args1(1).Value = &quot;#&quot; &amp; sBookMarkName
	args1(2).Name = &quot;Hyperlink.Target&quot;
	args1(2).Value = &quot;&quot;
	args1(3).Name = &quot;Hyperlink.Name&quot;
	args1(3).Value = &quot;&quot;
	args1(4).Name = &quot;Hyperlink.Type&quot;
	args1(4).Value = 1
	oDispatcher.executeDispatch( oDocControlFrame, &quot;.uno:SetHyperlink&quot;, &quot;&quot;, 0, args1() )
End Sub

&apos; вставка гиперссылки на выделенный текст: цель - элемент оглавления стиля заголовок sOutline
Sub BuildHyperLink( ByRef oDocControlFrame As Object, sSelectedText As String, sOutline As String )
	Dim oDocControlFrame	As Object : oDocControlFrame	= ThisComponent.CurrentController.Frame
	Dim oDispatcher			As Object : oDispatcher			= createUnoService( &quot;com.sun.star.frame.DispatchHelper&quot; )
	Dim args1(4)			As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Hyperlink.Text&quot;
	args1(0).Value = sSelectedText
	args1(1).Name = &quot;Hyperlink.URL&quot;
	args1(1).Value = &quot;#&quot; &amp; sOutline &amp; &quot;|outline&quot;
	args1(2).Name = &quot;Hyperlink.Target&quot;
	args1(2).Value = &quot;&quot;
	args1(3).Name = &quot;Hyperlink.Name&quot;
	args1(3).Value = &quot;&quot;
	args1(4).Name = &quot;Hyperlink.Type&quot;
	args1(4).Value = 1
	oDispatcher.executeDispatch( oDocControlFrame, &quot;.uno:SetHyperlink&quot;, &quot;&quot;, 0, args1() )
End Sub

&apos; снятие защиты со всех ячеек всех таблиц (видимый курсор должен находиться ВНЕ таблицы)
Sub _UnoResetAllTablesProtection()
	Dim oDoc   		As Object : oDoc  		= ThisComponent.CurrentController.Frame
	Dim oDispatcher As Object : oDispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	oDispatcher.executeDispatch(oDoc, &quot;.uno:ResetTableProtection&quot;, &quot;&quot;, 0, Array())
End Sub

&apos; снятие защиты с ячейки таблиц (видимый курсор должен находиться в этой ячейке)
Sub _UnoResetCellProtection()
	Dim oDoc   		As Object : oDoc  		= ThisComponent.CurrentController.Frame
	Dim oDispatcher As Object : oDispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	oDispatcher.executeDispatch(oDoc, &quot;.uno:UnsetCellsReadOnly&quot;, &quot;&quot;, 0, Array())
End Sub

&apos; масштабирование символов по ширине
sub _UnoSetCharacterWidthScalingFactor( value As Long )
	Dim oDoc   		As Object : oDoc   		= ThisComponent.CurrentController.Frame
	Dim oDispatcher	As Object : oDispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;CharacterWidthScalingFactor&quot;
	args1(0).Value = value &apos; 100 - 100%
	oDispatcher.executeDispatch( oDoc, &quot;.uno:CharacterWidthScalingFactor&quot;, &quot;&quot;, 0, args1() )
End Sub

&apos; интервал для символов (стандарт, разрядка или уплотнение)
Sub _UnoSetCharSpacing( value As Long )
	Dim oDoc   		As Object : oDoc   		= ThisComponent.CurrentController.Frame
	Dim oDispatcher	As Object : oDispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Spacing&quot;
	args1(0).Value = value &apos; 0 - стандартный интервал
	oDispatcher.executeDispatch( oDoc, &quot;.uno:Spacing&quot;, &quot;&quot;, 0, args1() )
End Sub

&apos; выделение всего документа
Sub _UnoSelectAllDocument()
	Dim oDoc   		As Object : oDoc   		= ThisComponent.CurrentController.Frame
	Dim oDispatcher	As Object : oDispatcher	= createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	oDispatcher.executeDispatch( oDoc, &quot;.uno:SelectAll&quot;, &quot;&quot;, 0, Array() )
End Sub
&apos; ====================================================================================
&apos; 						Функции по работе с закладками
&apos; ====================================================================================
&apos; удаление неиспользуемых закладок (на них ничто не ссылается) во всем Документе (текст, Врезки, таблицы)
Function DeleteNotUsedBookmarksInDocument()
	DeleteNotUsedBookmarksInDocument = False
	Dim oDoc As Object : oDoc = thisComponent
	Dim sNotUseBookMarksArray()	As String &apos; массив всех неиспользуемых закладок в документе
	sNotUseBookMarksArray() = FindNotUsedBookmarksInDocument()
	
	&apos; удаление найденных неиспользуемых закладок в документе
	Dim oBookMarks()  As Object : oBookMarks = oDoc.getBookmarks()
	Dim i As Long, count As Long
	count = UBound( sNotUseBookMarksArray() )
	For i = 0 To count
		_UnoDeleteBookMark( oBookMarks.getByName( sNotUseBookMarksArray(i) ).getName() )
		oDoc.setModified( True )
		DeleteNotUsedBookmarksInDocument = True
	Next i
End Function

&apos; поиск неиспользуемых закладок (на них ничто не ссылается) во всем Документе (текст, Врезки, таблицы)
Function FindNotUsedBookmarksInDocument()
	Dim oDoc As Object : oDoc = thisComponent
	Dim sAllBookMarksArray() As String &apos; массив всех закладок в документе
	Dim sUseBookMarksArray() As String &apos; массив всех используемых закладок в документе
	Dim sNotUseBookMarksArray()	As String &apos; массив всех неиспользуемых закладок в документе

	sAllBookMarksArray() = getAllBookmarksName()
	&apos; поиск по тексту
	_FindNotUsedBookmarksInText( oDoc, sAllBookMarksArray(), sUseBookMarksArray())
	
	&apos; поиск по Текстовым врезкам
	Dim oTextFrames() As Object : oTextFrames = oDoc.getTextFrames()
	Dim count As Long : count = oTextFrames.getCount()
	Dim i As Long
	For i = 0 To count - 1
		_FindNotUsedBookmarksInText( oTextFrames.getByIndex(i), sAllBookMarksArray(), sUseBookMarksArray() )
	Next i
	
	&apos; поиск по таблицам
	Dim oTextTables()  As Object : oTextTables = oDoc.getTextTables()
	count = oTextTables.getCount()
	For i = 0 To count - 1
		Dim oTable As Object : oTable = oTextTables.getByIndex(i)
		Dim oCellNames() As String : oCellNames() = oTable.getCellNames()
		Dim j As Long
		count = UBound( oCellNames() )
		For j = 0 To count
			_FindNotUsedBookmarksInText( oTable.getCellByName( oCellNames(j) ), sAllBookMarksArray(), sUseBookMarksArray() )
		Next j
	Next i
	
	&apos; все закладки, на которые есть ссылки в сносках
	Dim oFootnotes()  As Object : oFootnotes = oDoc.getFootnotes()
	count = oFootnotes.getCount()
	For i = 0 To count - 1
		_FindNotUsedBookmarksInText( oFootnotes.getByIndex(i), sAllBookMarksArray(), sUseBookMarksArray() )
	Next i
	
	&apos; все закладки, на которые есть ссылки в концевых сносках
	Dim oEndnotes()  As Object : oEndnotes = oDoc.getEndnotes()
	count = oEndnotes.getCount()
	For i = 0 To count - 1
		_FindNotUsedBookmarksInText( oEndnotes.getByIndex(i), sAllBookMarksArray(), sUseBookMarksArray() )
	Next i
	
	&apos; определение неиспользуемых закладок в документе
	sNotUseBookMarksArray() = getNotUseBookmarksName( sAllBookMarksArray(), sUseBookMarksArray() )
	
	FindNotUsedBookmarksInDocument() = sNotUseBookMarksArray()
End Function

&apos; поиск неиспользуемых закладок (на них ничто не ссылается) в текстовых объектах (текст, врезки, ячейки таблиц)
Sub _FindNotUsedBookmarksInText( ByRef oTextObject As Object, sAllBookMarksArray() As String, ByRef sUseBookMarksArray() As String )
	Dim oParEnum	As Object &apos;Счетчик, используемый для перебора параграфов
	Dim oPar		As Object &apos;Перебираемый параграф
	Dim oSectEnum	As Object &apos;Счетчик, используемый для перебора текстовых разделов
	Dim oSect		As Object &apos;Перебиремый текстовый раздел (section)

	oParEnum = oTextObject.getText().createEnumeration()
	Do While oParEnum.hasMoreElements()
		oPar = oParEnum.nextElement()
		If oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			&apos; Перебор текстовых разделов
			oSectEnum = oPar.createEnumeration()
			Do While oSectEnum.hasMoreElements()
				oSect = oSectEnum.nextElement()				
				If LCase( oSect.TextPortionType ) = &quot;text&quot; Then
					Dim BookMarkName As String : BookMarkName = getUseBookmarkname( oSect )
					If BookMarkName &lt;&gt; &quot;&quot; Then
						&apos; не заносим одну и ту же закладку в список
						If Not ifBookmarkExist( sUseBookMarksArray(), BookMarkName ) Then
							AddNewItemToArray1( sUseBookMarksArray(), BookMarkName )
						End If
					End If
				End If
			Loop
		End If
	Loop
End Sub

&apos; есть ли заданная закладка в массиве
Function ifBookmarkExist( sUseBookMarksArray() As String, BookMarkName As String ) As Boolean
	ifBookmarkExist = False
	
	Dim i As Long
	For i = 0  To UBound( sUseBookMarksArray() )
		If BookMarkName = sUseBookMarksArray(i) Then
			ifBookmarkExist = True
			Exit Function
		End If
	Next i
End Function

&apos; список используемых закладок в текстовой врезке
Sub getUseBookmerkFromTextFrame( ByRef sUseBookMarksArray() As String )
	Dim oTextFrames() : oTextFrames = thisComponent.getTextFrames()
	Dim i As Long, f As Long
	f = oTextFrames.getCount()
	For i=0 To f-1
		oTextFrames.getByIndex(i)
	Next i
End Sub

&apos; имя используемой закладки в oLexsem, если закладка есть
Function getUseBookmarkname( oLexsem As Object ) As String
	getUseBookmarkname = &quot;&quot;
	If oLexsem.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
		Dim s As String : s = Mid(oLexsem.HyperLinkURL, 1, 1)
		IF s = &quot;#&quot; Then
			getUseBookmarkname = Mid(oLexsem.HyperLinkURL, 2)
		End If
	End If
End Function

&apos; список имен всех закладок в документе
Function getAllBookmarksName()
	Dim sAllBookMarksArray() As String
	Dim oBookMarks() : oBookMarks = thisComponent.getBookmarks()
	Dim i As Long, b As Long
	b = oBookMarks.getCount()
	For i=0 To b-1
		AddNewItemToArray1( sAllBookMarksArray(), oBookMarks.getByIndex(i).getName() )
	Next i
	getAllBookmarksName = sAllBookMarksArray()
End Function

&apos; список имен всех неиспользуемых закладок в документе (сравнение со списками всех закладок и всех используемых закладок в документе)
Function getNotUseBookmarksName( sAllBookMarksArray() As String, sUseBookMarksArray() As String )
	Dim sNotUseBookMarksArray()	As String
	Dim i As Long, j As Long
	For i = LBound( sAllBookMarksArray() ) To UBound( sAllBookMarksArray() )
		&apos; смотрим закладку из списка sAllBookMarksArray() в списке sUseBookMarksArray() - есть ли такая?
		Dim Exist As Boolean : Exist = False
		For j = LBound( sUseBookMarksArray() ) To UBound( sUseBookMarksArray() )
			If sAllBookMarksArray(i) &lt;&gt; sUseBookMarksArray(j) Then
				Exist = False
			Else
				Exist = True
				Exit For
			End If
		Next j
		If Not Exist Then
			AddNewItemToArray1( sNotUseBookMarksArray(), sAllBookMarksArray(i) )
		End If
	Next i
	getNotUseBookmarksName = sNotUseBookMarksArray()
End Function

&apos; Вставить текст в место закладки.
&apos; возвращает: True - если вставили текст в место закладки. False - если нет такой закладки
Function InsertTextToBookMark( sBookMarkName As String, sText As String ) As Boolean
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName( sBookMarkName )
		oBookMark.getAnchor.setString( sText )
		InsertTextToBookMark = True
	Else
		InsertTextToBookMark = False
	End If
End Function

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; переместить видимый курсор на закладку: bSel=True - выделить текст закладки, bSel=False - не выделять текст закладки
&apos; возвращает: True - если перешли на закладку. False - если нет такой закладки
Function GoToViewCursorToBookMark( ByRef oViewCursor As Object, sBookMarkName As String, bSel As Boolean ) As Boolean
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName(sBookMarkName).getAnchor()
		If Not bSel Then &apos; просто перейти на начало закладки
			oViewCursor.gotoRange(oBookMark.getStart(), False)
		Else &apos; выделить текст закладки
			oViewCursor.gotoRange(oBookMark, False) &apos; выделить закладку
&apos;			oViewCursor.gotoRange(oBookMark.getStart(), False)	&apos; то же самое,
&apos;			oViewCursor.gotoRange(oBookMark.getEnd(), True)		&apos; только используя 2 строки
		End If
		GoToViewCursorToBookMark = True
	Else
		GoToViewCursorToBookMark = False
	End If
End Function

&apos; расширить выделение до начала закладки (если курсор правее конца закладки), или начала закладки (если курсор левее начала закладки)
Function ExtendSelectTextToBookMark( ByRef oViewCursor As Object, sBookMarkName As String )
	ExtendSelectTextToBookMark = False
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName(sBookMarkName).getAnchor()
		oViewCursor.gotoRange(oBookMark, True) &apos; расширить выделение до начала закладки (если курсор правее конца закладки), или начала закладки (если курсор левее начала закладки)
		ExtendSelectTextToBookMark = True
	End If
End Function

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; возвращает массив с названиями зон поиска - помеченных закладками списка текста сносок (не по порядку их добавления, а по индексу их массива закладок)
Function GetFindListNoteZones( ByRef oBookMarks As Object, sConstBookMarkListNote As String ) As Array
	Dim l As Long
	Dim aBookMarks() As String
	For l=0 To oBookMarks.getCount()-1
		Dim b : b = oBookMarks.getByIndex( l )
		Dim s As String : s = b.Name
		If InStr( s, sConstBookMarkListNote ) = 1 Then
			AddNewItemToArray1( aBookMarks(), s )
		End If
	Next l
	GetFindListNoteZones = aBookMarks()
End Function

&apos; //////////////////////////////////////////////////////////////////////////
&apos; удаление всех закладок, соответствующих шаблону sBookMarkTemplate
Function DeleteAllBookMarkWithTemplate( ByRef oBookMarks As Object, sBookMarkTemplate As String ) As Long
	Dim aBookMarks() As String : aBookMarks = GetFindListNoteZones( oBookMarks, sBookMarkTemplate )
	Dim l As Long
	For l=0 To UBound( aBookMarks() )
		_UnoDeleteBookMark( aBookMarks(l) )
		DeleteAllBookMarkWithTemplate = DeleteAllBookMarkWithTemplate+1
	Next l
End Function

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; расширение курсора от закладки 1 до конца закладки 2
Sub ExtendSelectTextToEndBookMark( ByRef oDoc As Object, ByRef oViewCursor As Object, sBookMarkStartName As String, ByRef oBookMarkEnd As Object )
	&apos; возвращаемся к закладке - началу текста сноски
	Dim b : b = oDoc.getBookmarks().getByName( sBookMarkStartName ).getAnchor()
	&apos; курсор - на начала закладки (текста сноски)
	oViewCursor.gotoRange(b.getStart(), False)
	&apos; расширяем выделение курсора до конца зоны поиска - блока текста сносок
	oViewCursor.gotoRange(oBookMarkEnd.getEnd(), True)
	&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
	_UnoDeleteBookMark( sBookMarkStartName )
	_UnoInsertBookmark( sBookMarkStartName )
End Sub

&apos; расширение видимого курсора от начала курсора 1 до конца курсора 2
Sub ExtendViewCursorFromStartCursor1ToEndCursor2( ByRef oViewCursor As Object, ByRef oLCurs As Object, ByRef oRCurs As Object )
	&apos; курсор - на начала закладки выделенной зоны
	oViewCursor.gotoRange(oLCurs, False)
	&apos; расширяем выделение курсора до конца выделенной зоны
	oViewCursor.gotoRange(oRCurs, True)
End Sub

&apos; ====================================================================================
&apos; 					Функции по работе с выделенным текстом
&apos; ====================================================================================
&apos; есть ли выделение курсором. True - есть
Function IsSelection( ByRef oSel As Object ) As Boolean
	Dim oCursor : oCursor = oSel.Text.CreateTextCursorByRange( oSel )
	If oCursor.IsCollapsed() Then &apos; ничего не выделено
		IsSelection = False
	Else
		IsSelection = True
	End If
End Function

&apos; //////////////////////////////////////////////////////////////////////////
&apos; сколько выделено областей текста
Function GetSelectionCount() As Long
	Dim lCount As Long : lCount = 0
	Dim oSels As Object : oSels = ThisComponent.getCurrentSelection()
	If oSels.ImplementationName &lt;&gt; &quot;SwXTextRanges&quot; Then
		GetSelectionCount = -1 &apos; выделен не Текст!
		Exit Function
	End If
	If Not IsNull(oSels) Then
		Dim lSelCount As Long : lSelCount = oSels.getCount()
		Dim l As Long
		For l = 0 To lSelCount - 1
			Dim oSel As Object : oSel = oSels.getByIndex(l)
			If IsSelection( oSel ) Then lCount = lCount+1
		Next l
	End If
	GetSelectionCount = lCount
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; возвращает &quot;реальную&quot; левую границу курсора (и для случая, если конец курсора находится раньше начала)
&apos; основано на коде Andrew Pitonyak
Function GetLeftMostCursor( ByRef oSel As Object ) As Object
	Dim oRange, oCursor
	If oSel.getText().compareRegionStarts( oSel.getEnd(), oSel ) &gt;= 0 Then
		oRange = oSel.getEnd()
	Else
		oRange = oSel.getStart()
	End If
	oCursor = oSel.getText().CreateTextCursorByRange( oRange )
	oCursor.goRight( 0, False )
	GetLeftMostCursor = oCursor
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; возвращает &quot;реальную&quot; правую границу курсора (и для случая, если конец курсора находится раньше начала)
&apos; основано на коде Andrew Pitonyak
Function GetRightMostCursor( ByRef oSel As Object ) As Object
	Dim oRange, oCursor
	If oSel.getText().compareRegionStarts( oSel.getEnd(), oSel ) &gt;= 0 Then
		oRange = oSel.getStart()
	Else
		oRange = oSel.getEnd()
	End If
	oCursor = oSel.getText().CreateTextCursorByRange( oRange )
	oCursor.goLeft( 0, False )
	GetRightMostCursor = oCursor
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; Находится ли курсор внутри выделенной области?
&apos; основано на коде Andrew Pitonyak
Function IsAnythingSelected( ByRef oDoc As Object ) As Boolean
	IsAnythingSelected = False
	
	If IsNull( oDoc )		Then Exit Function
	Dim oSels : oSels = oDoc.getCurrentSelection() &apos;все выделения в тексте
	If IsNull( oSels )		Then Exit Function
	If oSels.ImplementationName &lt;&gt; &quot;SwXTextRanges&quot; Then Exit Function &apos; только для выделений Текста!
	If oSels.getCount() = 0 Then Exit Function
	
	If oSels.getCount() &gt; 1 Then
		IsAnythingSelected = True
	Else
		Dim oSel	As Object : oSel	= oSels.getByIndex( 0 ) &apos;текущее выделение в тексте
		Dim oCursor As Object : oCursor = oSel.getText().CreateTextCursorByRange( oSel ) &apos;временный курсор
		If Not oCursor.IsCollapsed() Then IsAnythingSelected = True
	End If
End Function

&apos; ////////////////////////////////////////////////////////////////////////
&apos; Создать курсоры, охватывающие выбранные текстовые области.
&apos; основано на коде Andrew Pitonyak
Function CreateSelectedTextIterator( ByRef oDoc As Object, sPrompt As String, sMessTitle As String, ByRef oCurs() ) As Boolean
	CreateSelectedTextIterator = True
	
	Dim oLCurs &apos;Курсор левой границы текущего выделения
	Dim oRCurs &apos;Курсор правой границы текущего выделения
		
	If Not IsAnythingSelected(ThisComponent) Then
		If MsgBox( sPrompt, 1 + 32 + 256, sMessTitle ) = 1 Then
			oLCurs = oDoc.getText().createTextCursor()
			oLCurs.gotoStart( False )
			oRCurs = oDoc.getText().createTextCursor()
			oRCurs.gotoEnd( False )
			oCurs = DimArray( 0, 1 )
			oCurs( 0, 0 ) = oLCurs
			oCurs( 0, 1 ) = oRCurs
		Else
			oCurs = DimArray()
			CreateSelectedTextIterator = False
		End If
	Else
		Dim oSels		As Object	: oSels		= oDoc.getCurrentSelection() &apos; все выделения текста
		Dim lSelCount	As Long		: lSelCount = oSels.getCount() &apos;число выделенных областей текста
		oCurs = DimArray( lSelCount - 1, 1 )
		Dim l As Long
		For l = 0 To lSelCount - 1
			Dim oSel As Object : oSel = oSels.getByIndex( l ) &apos; текущее выделение
			oLCurs = GetLeftMostCursor( oSel )
			oRCurs = GetRightMostCursor( oSel )
			oCurs( l, 0 ) = oLCurs
			oCurs( l, 1 ) = oRCurs
		Next l
	End If
End Function

&apos; расширить видимый курсор на начало первого абзаца и конец последнего абзайа в выделении
Function ExtendViewCursorToStartEndParaOfSelections( ByRef oViewCursor As Object, ByRef Optional IsTextSelected As Boolean ) As Boolean
	ExtendViewCursorToStartEndParaOfSelections = False
	Dim oSels As Object : oSels = ThisComponent.getCurrentSelection()
	If oSels.ImplementationName = &quot;SwXTextRanges&quot; Then
		If Not IsNull(oSels) Then
			Dim oSel As Object : oSel = oSels.getByIndex(0)
			If LCase( oSel.ParaStylename ) = &quot;footnote&quot; Or LCase( oSel.ParaStylename ) = &quot;endnote&quot; Or Not IsEmpty( oSel.TextFrame ) Or Not IsEmpty( oSel.TextTable ) Then
				IsTextSelected = False
				ExtendViewCursorToStartEndParaOfSelections = False
				Exit Function
			End If
			
			If NOT IsMissing( IsTextSelected ) Then
				If IsSelection( oSel ) Then
					IsTextSelected = True
				Else
					IsTextSelected = False
				End If
			End If
			
			&apos; 1-й текстовый курсор - на начало 1-го абзаца в выделении
			Dim otxtCurs1	As Object : otxtCurs1	= oSel.Text.createTextCursor()
			otxtCurs1.gotoRange(oSel.getStart(), False)
			otxtCurs1.gotoStartOfParagraph(False)
			&apos; 2-й текстовый курсор - на конец последнего абзаца в выделении
			Dim otxtCurs2	As Object : otxtCurs2	= oSel.Text.createTextCursor()
			otxtCurs2.gotoRange(oSel.getEnd(), False)
			otxtCurs2.gotoEndOfParagraph(True)
			&apos; расширяем видимый курсор
			oViewCursor.gotoRange(otxtCurs1.getStart(), False)
			oViewCursor.gotoRange(otxtCurs2.getEnd(), True)

			ExtendViewCursorToStartEndParaOfSelections = True
		End If
	End If
End Function

&apos; =======================================================================================================
&apos; 										Форматирование документа 
&apos; =======================================================================================================
&apos; Установка размера полей бумаги
&apos; поля задаются в см. типа Double (например 1.5)
Sub setMargins( ByRef FromLeft As Double, ByRef FromRight As Double, ByRef FromTop As Double, ByRef FromBottom As Double )
	Dim oDoc			As Object : oDoc			= ThisComponent
	Dim oTextCurs		As Object : oTextCurs		= oDoc.getText().CreateTextCursor()
	Dim sPageStyleName	As String : sPageStyleName	= oTextCurs.PageStyleName
	Dim oPageStyles		As Object : oPageStyles		= oDoc.getStyleFamilies().getByName( &quot;PageStyles&quot; )
	Dim oStyle			As Object : oStyle			= oPageStyles.getByName( sPageStyleName )

	oStyle.LeftMargin	= FromLeft		* 1000
	oStyle.RightMargin	= FromRight		* 1000
	oStyle.TopMargin	= FromTop		* 1000
	oStyle.BottomMargin	= FromBottom	* 1000
End Sub

&apos; Установка формата бумаги
&apos; PaperFormat задается из значений: A3, A4, A5, A6, Letter
Sub setPageFormat( ByRef PaperFormat As String )
	Dim oDoc			As Object : oDoc			= ThisComponent
	Dim oTextCurs		As Object : oTextCurs		= oDoc.getText().CreateTextCursor()
	Dim sPageStyleName	As String : sPageStyleName	= oTextCurs.PageStyleName
	Dim oPageStyles		As Object : oPageStyles		= oDoc.getStyleFamilies().getByName( &quot;PageStyles&quot; )
	Dim oStyle			As Object : oStyle			= oPageStyles.getByName( sPageStyleName )

	If PaperFormat = &quot;A3&quot; Then
		oStyle.Width = 29700
		oStyle.Height = 42000
	ElseIf PaperFormat = &quot;A4&quot; Then
		oStyle.Width = 21000
		oStyle.Height = 29700
	ElseIf PaperFormat = &quot;A5&quot; Then
		oStyle.Width = 14800
		oStyle.Height = 21000
	ElseIf PaperFormat = &quot;A6&quot; Then
		oStyle.Width = 10500
		oStyle.Height = 14800
	ElseIf PaperFormat = &quot;Letter&quot; Then
		oStyle.Width = 21590
		oStyle.Height = 27940
	Else
		&apos; по-умолчанию - A4
		oStyle.Width = 21000
		oStyle.Height = 29700
	End If
End Sub

&apos; ориентация страницы
&apos; Landscape = True - альбомная ориентация. Landscape = False - портретная
Sub setPageOrientation( Landscape As Boolean )
	Dim oDoc			As Object : oDoc			= ThisComponent
	Dim oTextCurs		As Object : oTextCurs		= oDoc.getText().CreateTextCursor()
	Dim sPageStyleName	As String : sPageStyleName	= oTextCurs.PageStyleName
	Dim oPageStyles		As Object : oPageStyles		= oDoc.StyleFamilies.getByName( &quot;PageStyles&quot; )
	Dim oStyle			As Object : oStyle			= oPageStyles.getByName( sPageStyleName )

	Dim TempWidth	: TempWidth		= oStyle.Width 
	Dim TempHeight	: TempHeight	= oStyle.Height
	
	If Landscape Then
		&apos; нужна альбомная ориентация
		oStyle.IsLandscape = True
		oStyle.Width	= TempHeight
		oStyle.Height	= TempWidth
	Else
		&apos; нужна портретная ориентация
		oStyle.IsLandscape = False
		oStyle.Width	= TempWidth
		oStyle.Height	= TempHeight
	End If
End Sub

&apos; обработка капителя для текста
Sub UncapitelText( ByRef oDoc As Object, SymbolType As Long )
	Dim oText		As Variant	: oText			= oDoc.getText()
	Dim oTextCursor	As Variant	: oTextCursor	= oText.CreateTextCursor()
	oTextCursor.GoToStart( False )	
	Dim oSymbolCursor As Variant
	Do
		If NOT oTextCursor.goRight(1, True) Then Exit Do
		oSymbolCursor = oTextCursor.Text.createTextCursorByRange( oTextCursor.getEnd() )
		oSymbolCursor.goLeft(1, True)
		If oSymbolCursor.CharcaseMap = 4 Then
			oSymbolCursor.CharcaseMap = SymbolType
		End If
	Loop Until 0
End Sub

&apos; обработка капителя для сносок и концевых сносок
&apos; IsFootNote = True - обработка сносок; IsFootNote = False - обработка концевых сносок
Sub UncapitelFootEndNote( ByRef oDoc As Object, SymbolType As Long, IsFootNote As Boolean )
	Dim oFootnotes As Object
	If IsFootNote Then
		oFootnotes = oDoc.getFootNotes()
	Else
		oFootnotes = oDoc.getEndNotes()
	End If
	
	Dim nFootnoteCount	As Long : nFootnoteCount = oFootnotes.getCount()
	Dim oFootnote		As Object
	Dim oTextCursor		As Variant
	Dim oSymbolCursor	As Variant
	Dim nCount			As Long
	If oFootnotes.hasElements() Then
		For nCount = 0 To nFootnoteCount - 1
			oFootNote = oFootnotes.getByIndex(nCount)
			oTextCursor = oFootNote.getText().CreateTextCursor()
			Do
				If NOT oTextCursor.goRight(1, True) Then Exit Do
					oSymbolCursor = oTextCursor.Text.createTextCursorByRange( oTextCursor.getEnd() )
					oSymbolCursor.goLeft(1, True)
					If oSymbolCursor.CharcaseMap = 4 Then
						oSymbolCursor.CharcaseMap = SymbolType
					End If
			Loop Until 0
		Next nCount
	End If
End Sub

&apos; обработка капителя для текстовых врезок
Sub UncapitelTextFrame( ByRef oDoc As Object, SymbolType As Long )
	Dim oTextFrames()	As Object	: oTextFrames		= oDoc.getTextFrames()
	Dim nTextFrameCount As Long	: nTextFrameCount	= oTextFrames.getCount()
	Dim oTextFrame		As Object
	Dim oTextCursor		As Variant
	Dim oSymbolCursor	As Variant
	Dim nCount			As Long
	If oTextFrames.hasElements() Then
		For nCount = 0 To nTextFrameCount - 1
			oTextFrame = oTextFrames.getByIndex(nCount)
			oTextCursor = oTextFrame.getText().CreateTextCursor()
			Do
				If NOT oTextCursor.goRight(1, True) Then Exit Do
					oSymbolCursor = oTextCursor.Text.createTextCursorByRange( oTextCursor.getEnd() )
					oSymbolCursor.goLeft(1, True)
					If oSymbolCursor.CharcaseMap = 4 Then
						oSymbolCursor.CharcaseMap = SymbolType
					End If
			Loop Until 0
		Next nCount
	End If
End Sub

&apos; обработка капителя для таблиц
Sub UncapitelTable( ByRef oDoc As Object, SymbolType As Long )
	Dim oTextTables()	As Object	: oTextTables		= oDoc.getTextTables()
	Dim nTextTableCount As Long	: nTextTableCount	= oTextTables.getCount()
	Dim oTextTable		As Object
	Dim oCellNames()	As String
	Dim oTextCursor		As Variant
	Dim oSymbolCursor	As Variant
	Dim nCount			As Long
	If oTextTables.hasElements() Then
		For nCount = 0 To nTextTableCount - 1
			oTextTable = oTextTables.getByIndex(nCount)
			oCellNames() = oTextTable.getCellNames()
			Dim nCellCount As Long : nCellCount = UBound( oCellNames() )
			Dim i As Long
			For i = 0 To nCellCount
				oTextCursor = oTextTable.getCellByName( oCellNames(i) ).getText().CreateTextCursor()
				Do
					If NOT oTextCursor.goRight(1, True) Then Exit Do
						oSymbolCursor = oTextCursor.Text.createTextCursorByRange( oTextCursor.getEnd() )
						oSymbolCursor.goLeft(1, True)
						If oSymbolCursor.CharcaseMap = 4 Then
							oSymbolCursor.CharcaseMap = SymbolType
						End If
				Loop Until 0
			Next i
		Next nCount
	End If
End Sub

&apos; ====================================================================================
&apos; 									Полезные заготовки
&apos; ====================================================================================
&apos; парсер текстовой врезки
Sub _TextFrameParser( ByRef oTextFrame As Object )
	If oTextFrame.supportsService(&quot;com.sun.star.text.TextFrame&quot;) Then
		Dim oObjEnum As Object, oObj As Object
		oObjEnum = oTextFrame.createEnumeration()
		Do While oObjEnum.hasMoreElements()
			oObj = oObjEnum.nextElement()
			If oObj.supportsService(&quot;com.sun.star.text.TextTable&quot;) Then
				&apos; работа с таблицей
			ElseIf oObj.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
				&apos; работа с текстом
			End If
		Loop
	End If
End Sub

&apos; перебор текста по абзацам
Sub _TextParser( Optional ByRef oText As Object )
	Dim vText As Variant
	If NOT IsMissing(oText) Then
		vText = oText
	Else
		vText = ThisComponent.Text
	End If

	Dim oCursor As Variant : oCursor = vText.CreateTextCursor()
	oCursor.GoToStart(False)
	Do
		If NOT oCursor.gotoEndOfParagraph(True) Then Exit Do
		&apos; работа с текстом
	Loop Until NOT oCursor.gotoNextParagraph(False)
End Sub

&apos; ====================================================================================
&apos; 									Для отладки
&apos; ====================================================================================

Sub ssn( ByRef oObject As Object )
	MsgBox &quot;Object Name: &quot; + oObject.Name + chr(10) + chr(10) + _
		&quot;SupportedServiceName: &quot; + chr(10) + _
		Join( oObject.getSupportedServiceNames(), chr(10) ), 64, &quot;SupportedServiceName&quot;
End Sub

Sub SaveGebugObjectListPMS( oObject, sObjectName As String, sFilePath As String )
	Dim s As String
	s = &quot;Object: &quot; &amp; sObjectName &amp; chr(10) &amp; _
		&quot;ImplementationName: &quot; &amp; oObject.ImplementationName &amp; chr(10) &amp; chr(10) &amp; _
		&quot;Properties:&quot; &amp; chr(10) &amp; oObject.dbg_properties &amp; chr(10) &amp; chr(10) &amp; _
		&quot;Methods:&quot; &amp; chr(10)&amp; oObject.dbg_methods &amp; chr(10) &amp; chr(10) &amp; _
		&quot;SupportedInterfaces:&quot; &amp; chr(10) &amp; oObject.dbg_supportedInterfaces &amp; chr(10) &amp; chr(10)
	SaveText(sFilePath, s, &quot;utf-8&quot;)
End Sub
</script:module>