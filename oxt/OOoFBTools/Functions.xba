<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Functions" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit
&apos; Разные функции, необходимые для работы разных содулей пакета OOoFBTools

Type tFileData	&apos; для хранения данных файла
	sFileUrl As String
	sFile As String
	sName As String
	sExt As String
End Type

&apos; /// Работа с файлами ///

&apos; Пуст ли файл
Function IsFileEmpty( sFileInput As String ) As Boolean
	Dim bFileEmpty As Boolean : bFileEmpty = False
	If FileExists(sFileInput) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object

		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sFileInput) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Dim s As String : s = oTIS.readLine()
		If s = &quot;&quot; Or s = chr(10) Or s = chr(13) Then
			bFileEmpty = True
		End If
		oTIS.closeInput()
	End If
	IsFileEmpty = bFileEmpty
End Function

&apos; возвращает данные файла
Function GetFileData( sFileUrl As String ) As tFileData
	Dim sFD As tFileData
	Dim i As Integer, sExt As String
	Dim j As Integer : j = 0
	For i=1 To Len(sFileUrl)-1
		If Mid(sFileUrl, i, 1) = &quot;.&quot; Then
			j=i+1
		End If
	Next i
	sExt = Mid(sFileUrl, j, Len(sFileUrl))
	
	sFD.sFileUrl = sFileUrl
	sFD.sFile = Dir(ThisComponent.getURL, 0)
	sFD.sName = Mid( sFileUrl, 1, Len(sFileUrl) - (Len(sExt)+1) )
	sFD.sExt = sExt
	
	GetFileData = sFD
End Function

Function SaveArray( aArray() As String, sFile As String )
	&apos; Запись массива в файл
	Dim oOS As Object, oFA As Object, oTOS As Object, i As Integer

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sFile)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(&quot;utf-8&quot;)
	
	For i=LBound(aArray()) To UBound(aArray())
		oTOS.writeString(aArray(i) &amp; chr(10))
	Next i
	oTOS.closeOutput()
End Function

Function ReadFileInArray( aArray() As String, sFile As String )
	&apos; чтение файла в массив
	If FileExists(sFile) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object

		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sFile) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; chr(10) Then
				If sLine &lt;&gt; &quot;&quot; Then
					Dim l As Long
					l = Ubound(aArray()) + 1
					If l &gt; 0 Then
						ReDim Preserve aArray(l)
					Else Redim aArray(l)
					End If
					aArray(l) = sLine
				End If
			End If
		Loop
		oTIS.closeInput()
	End If
End Function

Function SaveSettings(sSettingsFilename As String, oDlg As Object)
	&apos; записываем установки
	Dim oOS As Object, oFA As Object, oTOS As Object
	Dim oLB As Object &apos; Для работы с ListBox`ами

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sSettingsFilename)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(&quot;utf-8&quot;)
	
	Dim ctrl As Object, i As Integer
	ctrl = oDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).SelectedItemPos &amp; chr(10))
		End If
	Next i
	oTOS.writeString(&quot;end of file&quot; &amp; chr(10))
	oTOS.closeOutput()
End Function

Function SetSettingsInControlls(sCurrentLine As String, oDlg)
	On Error Goto ErrorHandler
	Dim oLB As Object &apos; Для работы с ListBox`ами
	Dim sSetting() As String
	sSetting = Split(sCurrentLine, &quot;=&quot;)
	
	If oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
		oLB = oDlg.getControl(sSetting(0))
		oLB.SelectItemPos(sSetting(1), True)
	End If
	Exit Function
	ErrorHandler: &apos; идем дальше
End Function

Function SaveText(sFile As String, sText As String, sEncoding As String)
	&apos; Сохранение текстовой строки в файл
	Dim oOS As Object, oFA As Object, oTOS As Object

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sFile)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(sEncoding)
	oTOS.writeString(sText &amp; chr(10))
	oTOS.closeOutput()
End Function

&apos; /// Работа с экраном ///

Function ToScreenCenter(oDlg)
	&apos; центрирование на экране
	Dim CurPosSize As New com.sun.star.awt.Rectangle
	Dim oFrame, FramePosSize, xWindowPeer, WindowHeight, WindowWidth, DialogWidth, DialogHeight, iXPos, iYPos
	oFrame = ThisComponent.getCurrentController().Frame
	FramePosSize = oFrame.getComponentWindow.PosSize
	xWindowPeer = oDlg.getPeer()
	CurPosSize = oDlg.getPosSize()
	WindowHeight = FramePosSize.Height
	WindowWidth = FramePosSize.Width
	DialogWidth = CurPosSize.Width
	DialogHeight = CurPosSize.Height
	iXPos = ((WindowWidth/2) - (DialogWidth/2))
	iYPos = ((WindowHeight/2) - (DialogHeight/2))
	oDlg.setPosSize(iXPos, iYPos, DialogWidth, DialogHeight, com.sun.star.awt.PosSize.POS)
End Function

&apos; /// Работа с числами ///

Function IsEvenNumber(lNumber As Long) As Boolean
	&apos; Если число четное - возвращаем True, если нечетное - False
	Dim b
	b = lNumber Mod 2
	If b = 0 Then
		IsEvenNumber = True
	Else
		IsEvenNumber = False
	End If
End Function

&apos; /// Работа с массивами ///

Function AddNewItemToArray1(sArray() As String, sValue As String)
	Dim j As Long
	j = Ubound(sArray()) + 1
	ReDim Preserve sArray(j)
	sArray(j) = sValue
End Function

Function AddNewItemToArray2(sArray As String, sValue1 As String, sValue2 As String)
	Dim l As Long
	l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 1)
	Else Redim sArray(l, 1)
	End If
	
	sArray(l,0) = sValue1
	sArray(l,1) = sValue2	
End Function

Function AddLineInArray( sTextArray() As String, sText As String, oProgressBar )
	Dim l As Long
	l = Ubound(sTextArray()) + 1
	If l &gt; 0 Then
		ReDim Preserve sTextArray(l)
	Else Redim sTextArray(l)
	End If
	sTextArray(l) = sText
	oProgressBar.setValue(l)
End Function

Function DelCR( sTextArray() As String )
	&apos; убираем перевод строки в тексте из ячеек матрицы
	Dim sCR As String, i As Integer
	For i = 0 To UBound(sTextArray())
		sCR = sTextArray(i)
		If InStr(sCR, chr(13)) &gt; 0 Then
			sTextArray(i) = ReplaceInString( sCR, chr(13), &quot;&quot;, False )
		End If
	Next i
End Function

&apos; /// Работа со строками ///
&apos; возвращает число подстрок в строке
Function GetSubStrCount(sStr As String, sSubStr As String) As Integer
	Dim sArray() As String
	sArray = Split(sStr, sSubStr)
	GetSubStrCount = UBound(sArray)
End Function

&apos; очистка всех стилей в абзаце
Sub ClearParaStyle()
	Dim document   As Object, dispatcher As Object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:ResetAttributes&quot;, &quot;&quot;, 0, Array())
	
	Dim args2(1) As New com.sun.star.beans.PropertyValue
	args2(0).Name = &quot;Template&quot;
	args2(0).Value = &quot;&quot;
	args2(1).Name = &quot;Family&quot;
	args2(1).Value = 2

	dispatcher.executeDispatch(document, &quot;.uno:StyleApply&quot;, &quot;&quot;, 0, args2())
End Sub

&apos; /// Корректура строки ///

&apos; Строка sSource изменяется - в ней до sBefore вставляется sInsert
Function InsertInString( sSource As String, sBefore As String, sInsert As String )
	Dim i As Integer, sStr1 As String, sStr2 As String
	i = InStr(sSource, sBefore)
	If i=0 Then
		Exit Function
	End If
	&apos; берем часть строки ДО sBefore
	sStr1 = Mid( sSource, 1, Instr(sSource, sBefore)-1 )
	sStr2 = Mid( sSource, Instr(sSource, sBefore)+1, Len(sSource) )
	sSource = sStr1 &amp; sInsert &amp; sStr2
End Function

Function ReplaceFromString( sSource As String, sDel As String, sReplace As String ) As Integer
	&apos; Строка sSource изменяется - в ней все части sDel заменяются на sReplace
	&apos; Если sReplace - &quot;&quot;, то все sDel удаляются, иначе - замена на sReplace
	If sSource = &quot;&quot; Then
		ReplaceFromString = 0
		Exit Function
	End If
	
	Dim i As Integer, c As Integer
	c = 0 &apos; счетчик число изменений в строке
	i = InStr(sSource, sDel)
	If i=0 Then
		ReplaceFromString = 0
		Exit Function
	End If
	Do While i &gt; 0
		Mid(sSource, i, Len(sDel), sReplace)
		i = InStr(i, sSource, sDel)
		c = c+1
	Loop
	ReplaceFromString = c
End Function

Function ReplaceInStringWithRepCount( sSource As String, sSearch As String, sReplace As String, _
										bCase As Boolean, lCount As Long ) As String
	&apos; Строка sSource изменяется - в ней все части sSearch заменяются на sReplace
	&apos; Если sReplace - &quot;&quot;, то все sSearch удаляются, иначе - замена на sReplace
	&apos; bCase - True - учитываем регистр, False - без учета регистра
	&apos; lCount - счетчик числа замен - передается извне
	Dim sResult As String
	Dim lStartPos As Long, lCurrentPos As Long, c As Long &apos; счетчик числа замен
	c = 0
	If sSearch = &quot;&quot; Then
		sResult = sSource
		lCount = 0
	Else
		sResult = &quot;&quot;
		lStartPos = 1
		lCurrentPos = 1
		Do While lCurrentPos &lt;&gt; 0
			If bCase Then
				lCurrentPos = InStr( lStartPos, sSource, sSearch, 0 ) &apos; Учитывать регистр
			Else
				lCurrentPos = InStr( lStartPos, sSource, sSearch )
			End If
			If lCurrentPos &lt;&gt; 0 Then
				sResult = sResult + Mid(sSource, lStartPos, lCurrentPos - lStartPos)
				sResult = sResult + sReplace
				lStartPos = lCurrentPos + Len(sSearch)
				c = c+1
			Else
				sResult = sResult + Mid(sSource, lStartPos, Len(sSource))
			End If
		Loop
	End If
	lCount = c
	ReplaceInStringWithRepCount = sResult
End Function

Function ReplaceInString( sSource As String, sSearch As String, sReplace As String, bCase As Boolean ) As String
	&apos; Строка sSource изменяется - в ней все части sSearch заменяются на sReplace
	&apos; Если sReplace - &quot;&quot;, то все sSearch удаляются, иначе - замена на sReplace
	&apos; bCase - True - учитываем регистр, False - без учета регистра
	Dim sResult As String
	Dim lStartPos As Long, lCurrentPos As Long
	If sSearch = &quot;&quot; Then
		sResult = sSource
	Else
		sResult = &quot;&quot;
		lStartPos = 1
		lCurrentPos = 1
		Do While lCurrentPos &lt;&gt; 0
			If bCase Then
				lCurrentPos = InStr( lStartPos, sSource, sSearch, 0 ) &apos; Учитывать регистр
			Else
				lCurrentPos = InStr( lStartPos, sSource, sSearch )
			End If
			If lCurrentPos &lt;&gt; 0 Then
				sResult = sResult + Mid(sSource, lStartPos, lCurrentPos - lStartPos)
				sResult = sResult + sReplace
				lStartPos = lCurrentPos + Len(sSearch)
			Else
				sResult = sResult &amp; Mid(sSource, lStartPos, Len(sSource))
			End If
		Loop
	End If
	ReplaceInString = sResult
End Function

Function CorrectPara(sPara As String) As String
	&apos; корректировка абзаца - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newPara As String, sChar As String
	iLen = Len(sPara)&apos; длина анализируемой строки
	For i = 1 To iLen
		sChar = Mid(sPara, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newPara = newPara + &quot;&amp;amp;&quot;
		ElseIf sChar = &quot;&lt;&quot; Then
			newPara = newPara + &quot;&amp;lt;&quot;
		ElseIf sChar = &quot;&gt;&quot; Then
			newPara = newPara + &quot;&amp;gt;&quot;
		Else
			newPara = newPara  + sChar
		End If
	Next i
	CorrectPara = newPara
End Function

Function FB2CorrectWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord &amp; &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		ElseIf sChar = &quot;&lt;&quot; Then
			newWord = newWord &amp; &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord &amp; &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

Function FB2CorrectBracketsWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&lt;&quot; Then
			newWord = newWord &amp; &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord &amp; &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

Function FB2CorrectAmpWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord &amp; &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		Else
			newWord = newWord &amp; sChar
		End If
	Next i
	sWord = newWord
End Function

Sub RemoveSuperfluous( sSource As String, iResult As Integer )
	&apos; Убираем пустышки типа &lt;/x&gt;&lt;x&gt;
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt;&lt;strong&gt;&quot;, &quot;&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt;&lt;emphasis&gt;&quot;, &quot;&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt;&lt;sub&gt;&quot;, &quot;&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt;&lt;sup&gt;&quot;, &quot;&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt;&lt;code&gt;&quot;, &quot;&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt;&lt;strikethrough&gt;&quot;, &quot;&quot;)
End Sub

Function RemoveSuperfluous2(sSource As String, iResult1 As Integer, iResult2 As Integer)
	&apos; Убираем пустышки типа &lt;/x&gt;&lt;x&gt; и &lt;x&gt;&lt;/x&gt;
	iResult1(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt;&lt;strong&gt;&quot;, &quot;&quot;)
	iResult1(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt;&lt;emphasis&gt;&quot;, &quot;&quot;)
	iResult1(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt;&lt;sub&gt;&quot;, &quot;&quot;)
	iResult1(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt;&lt;sup&gt;&quot;, &quot;&quot;)
	iResult1(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt;&lt;code&gt;&quot;, &quot;&quot;)
	iResult1(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt;&lt;strikethrough&gt;&quot;, &quot;&quot;)
	
	iResult2(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;&lt;/strong&gt;&quot;, &quot;&quot;)
	iResult2(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot;, &quot;&quot;)
	iResult2(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;&lt;/sub&gt;&quot;, &quot;&quot;)
	iResult2(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;&lt;/sup&gt;&quot;, &quot;&quot;)
	iResult2(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;&lt;/code&gt;&quot;, &quot;&quot;)
	iResult2(5) = ReplaceFromString(sSource, &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot;, &quot;&quot;)
End Function

Function ClearStyleSpace(sSource As String, iResult1 As Integer, iResult2 As Integer)
	&apos; Обработка пробелов, обрамленными стилями &lt;/x&gt; &lt;x&gt; и &lt;x&gt; &lt;/x&gt;
	iResult1(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt; &lt;/strong&gt;&quot;, &quot; &quot;)
	iResult1(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt; &lt;/emphasis&gt;&quot;, &quot; &quot;)
	iResult1(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt; &lt;/sub&gt;&quot;, &quot; &quot;)
	iResult1(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt; &lt;/sup&gt;&quot;, &quot; &quot;)
	iResult1(4) = ReplaceFromString(sSource, &quot;&lt;code&gt; &lt;/code&gt;&quot;, &quot; &quot;)
	iResult1(5) = ReplaceFromString(sSource, &quot;&lt;strikethrough&gt; &lt;/strikethrough&gt;&quot;, &quot; &quot;)
	
	iResult2(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt; &lt;strong&gt;&quot;, &quot; &quot;)
	iResult2(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt; &lt;emphasis&gt;&quot;, &quot; &quot;)
	iResult2(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt; &lt;sub&gt;&quot;, &quot; &quot;)
	iResult2(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt; &lt;sup&gt;&quot;, &quot; &quot;)
	iResult2(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt; &lt;code&gt;&quot;, &quot; &quot;)
	iResult2(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt; &lt;strikethrough&gt;&quot;, &quot; &quot;)
End Function

Function WorkingRoundBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;(&quot;, &quot;(&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;)&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;)&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;(&quot;, &quot;(&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;)&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;)&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;(&quot;, &quot;(&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;)&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;)&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;)&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;)&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;(&quot;, &quot;(&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;)&lt;/code&gt;&quot;, &quot;&lt;/code&gt;)&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;)&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;)&quot;)
End Function

Function WorkingSquarteBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;[&quot;, &quot;[&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;]&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;]&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;[&quot;, &quot;[&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;]&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;]&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;[&quot;, &quot;[&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;]&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;]&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;]&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;]&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;[&quot;, &quot;[&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;]&lt;/code&gt;&quot;, &quot;&lt;/code&gt;]&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;]&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;]&quot;)
End Function

Function WorkingFiguredBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;{&quot;, &quot;{&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;}&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;}&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;{&quot;, &quot;{&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;}&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;}&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;{&quot;, &quot;{&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;}&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;}&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;}&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;}&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;{&quot;, &quot;{&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;}&lt;/code&gt;&quot;, &quot;&lt;/code&gt;}&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;}&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;}&quot;)
End Function

&apos; /// Для таблиц ///

Function IsMatrix(oTable As Object) As Boolean
	&apos; для простой прямоугольной матрицы возвращает True
	&apos; для сложной таблицы - False
	&apos; РАЗОБРАТЬСЯ!!! - Не на всех сложных таблицах DataArray НЕ КАК ARRAY - глюк OOo
	On Error Goto ErrorHandler
&apos;	IsMatrix = IsArray(oTable.DataArray)
	If oTable.Columns.Count&gt;0 OR IsArray(oTable.Data)=True OR IsArray(oTable.DataArray)=True Then
		IsMatrix = True
		Exit Function
	End If
	ErrorHandler:
	IsMatrix = False
End Function

Function IsComplexRowsCollTable(oTable As Object) As Boolean
	&apos; True - если сложная таблица с разным числом столбцов и строк В ЯЧЕЙКЕ
	&apos; False - если сложная таблица с разным числом столбцов в строке
	Dim sNames() As String
	Dim oCell As Object
	Dim n As String, i As Integer
	sNames() = oTable.getCellNames()
	For i = LBound(sNames()) To UBound(sNames())
		oCell = oTable.getCellByName(sNames(i))
		n = &quot;&quot;
		GetCellLetterAndNumber(oCell.Cellname, n)
		If InStr(n, &quot;.&quot;) &gt; 0 Then
			IsComplexRowsCollTable = True
			Exit Function
		End If
	Next i
	IsComplexRowsCollTable = False
End Function

Function GetCellLetterAndNumber(sCell As String, sNumber As String) As String
	&apos; разбивает название ячейки таблицы на Букву (возвращаемое значение) и ее Номер (sNumber)
	Dim i As Integer
	Dim s As String, sy As String
	s = &quot;&quot;
	sy = &quot;&quot;
	If InStr(sCell, &quot;.&quot;) = 0 Then
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; sy
			End If
		Next i
	Else
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; Mid(sCell, i, Len(sCell))
				Exit For
			End If
		Next i
	End If
	GetCellLetterAndNumber = s
End Function

Function GetMaxColInTable(oTable As Object) As Integer
	&apos; возвращает max число столбцов в сложной таблице (просмотр всех строк)
	Dim i As Integer, j As Integer, nCollMaxInTable As Integer
	Dim sNames() As String
	sNames() = oTable.getCellNames()
	nCollMaxInTable = 0
	i = 0
	Do While i &lt;= UBound(sNames())
		Dim oCell As Object
		Dim c As String, sNumber As String
		oCell = oTable.getCellByName(sNames(i)) &apos; первая ячейка строки
		c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
		j = 1 &apos; счетчик числа ячеек в строке
		i = i+1
		Do While i &lt;= UBound(sNames())
			&apos; следующая ячейка строки
			oCell = oTable.getCellByName(sNames(i))
			c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
			If c &lt;&gt; &quot;A&quot; Then
				j = j+1
				i = i+1
			Else &apos; нашли новую строку таблицы
				Exit Do
			End If
		Loop
		If nCollMaxInTable &lt; j Then
			nCollMaxInTable = j
		End If
	Loop
	GetMaxColInTable = nCollMaxInTable
End Function

Function GetColumnCountInRow(oTable As Object, nCell As Integer, CellNames() ) As Integer
	&apos; число столбцов в строке стожной таблицы
	Dim oCell As Object, sNumber As String, c As String
	Dim nColumnCount As Integer, i As Integer, CellCursor
	nColumnCount = nCell
	nColumnCount = nColumnCount + 1
	i = 0
	Do While nColumnCount &lt;= UBound(CellNames())
		&apos; следующая ячейка строки
		oCell = oTable.getCellByName(CellNames(nColumnCount))
		CellCursor = oCell.createTextCursor()
		c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
		If c &lt;&gt; &quot;A&quot; Then
			nColumnCount = nColumnCount + 1
			i = i + 1
		Else	&apos; нашли новую строку таблицы - ячейка A
			Exit Do
		End If
	Loop
	GetColumnCountInRow = i+1
End Function

Function GetMaxLineInRow(oTable, CellNames, iCel As Integer) As Integer
	&apos;  возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы
	Dim nMaxLines As Integer, nLines As Integer, iCol As Integer
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To oTable.Columns.Count-1
		Cell = oTable.getCellByName(CellNames(iCel))
		nLines = UBound( Split( Cell.getString(), chr(10) ) )
		If nMaxLines &lt; nLines Then
			nMaxLines = nLines
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRow = nMaxLines
End Function

Function GetMaxLineInRowWithProtect(oTable, CellNames, iCel As Integer, nColumns As Integer) As Integer
	&apos;  возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы,
	&apos; учитывая то, что защищенная ячейка игнорируется и считается, что содержит 1 абзац. Т.е. все абзацы в ней сливаем вместе
	Dim nMaxLines As Integer, nLines As Integer, iCol As Integer
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To nColumns-1
		Cell = oTable.getCellByName(CellNames(iCel))
		If Cell.IsProtected &lt;&gt; True Then &apos; пропускаем заблокированные ячейки
			nLines = UBound( Split( Cell.getString(), chr(10) ) )
			If nMaxLines &lt; nLines Then
				nMaxLines = nLines
			End If
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRowWithProtect = nMaxLines
End Function

Function GetFB2ParagraphAdjust(CellCursor) As String
	&apos; возвращает выравнивание ячейки талицы по ширине в формате fb2
	Select Case CellCursor.paraAdjust
		Case com.sun.star.style.ParagraphAdjust.LEFT
			GetFB2ParagraphAdjust = &quot;left&quot;
		Case com.sun.star.style.ParagraphAdjust.CENTER
			GetFB2ParagraphAdjust = &quot;center&quot;
		Case com.sun.star.style.ParagraphAdjust.RIGHT
			GetFB2ParagraphAdjust = &quot;right&quot;
		Case Else
			GetFB2ParagraphAdjust =  &quot;left&quot;
	End Select
End Function

&apos; /// Поиск ///

Function FindTextOfStyle(sStyle As String, bMerge As Boolean) As String
	Dim sResult As String
	Dim oStr As Object, oEnum As Object
	Dim oDesc As Object, iCount As Integer
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(sStyle)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		FindTextOfStyle = &quot;&quot;
		Exit Function
	End If
	For iCount = 0 To oEnum.getCount() - 1
		oStr = oEnum.getByIndex(iCount)
		If bMerge Then
			sResult = sResult &amp; oStr.getString() &amp; &quot; &quot;
		Else
			sResult = sResult &amp; chr(10) &amp; oStr.getString()
		End If
	Next iCount
	If bMerge Then
		sResult = Mid(sResult, 1, Len(sResult)-1)
	Else
		sResult = Mid(sResult, 2, Len(sResult)-1)
	End If
	FindTextOfStyle = sResult
End Function

&apos; есть ли в тексте абзац со стелем sStyle
Function IsStyleExists( sStyle As String ) As Boolean
	Dim oDesc As Object, oEnum As Object
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(sStyle)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		IsStyleExists = False
	Else
		IsStyleExists = True
	End If
End Function

&apos; /// Работа с контролами  ///

Function IsFillAllFields As Boolean
	Dim ctrl As Object, i As Integer, b As Boolean
	b = False
	ctrl = oStylesDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
			If Trim(ctrl(i).Model.Text) &lt;&gt; &quot;&quot; Then
				b = True
			Else
				b = False
				Exit For
			End If
		End If
	Next i
	
	If b = False Then
		MsgBox &quot;Заполните, пожалуйста, все поля!&quot;, 64, &quot;OOoFBTools&quot;
		IsFillAllFields = False
		Exit Function
	End If
	IsFillAllFields = True
End Function

&apos; //////////// сортировка //////////////
Function swap( aArray() As String, nPos1 As Integer, nPos2 As Integer )
	&apos; перемена местами двух итемов в массиве
	Dim sTemp As String
	sTemp = aArray(nPos1)
	aArray(nPos1) = aArray(nPos2)
	aArray(nPos2) = sTemp
End Function

Function bubble_sort( aArray() As String, nSize As Integer )
	&apos; пузырьковая сортировка
	Dim i As Integer, j As Integer
	&apos; Верхний предел внешнего цикла равен size-l, а не nSize, так как если все прочие элементы заняли свои места, 
	&apos; наибольший автоматически оказывается в правильной позиции. 
	For i=0 To nSize-1
		j=nSize-1
		Do
			If (aArray(j-1) &gt; aArray(j)) Then
				swap(aArray, j-1, j)
			End If
		j = j-1
		Loop While (j&gt;i)
	Next i
End Function

&apos; /// Работа с системой ///

&apos; Версия OOo
Function OOoWriterVersion() As String
	Dim oSet, oConfigProvider
	Dim oParm(0) As New com.sun.star.beans.PropertyValue
	oConfigProvider = createUnoService(&quot;com.sun.star.configuration.ConfigurationProvider&quot;)
	oParm(0).Name = &quot;nodepath&quot;
	oParm(0).Value = &quot;/org.openoffice.Setup/Product&quot;
	oSet = oConfigProvider.createInstanceWithArguments(&quot;com.sun.star.configuration.ConfigurationAccess&quot;,oParm())
	OOoWriterVersion = oSet.getByName(&quot;ooSetupVersion&quot;)
End Function

&apos; Возвращает путь к папке конфигурации пользователя
Function getUserPath() As String
	&apos; Для Windows - C:\Documents and Settings\vadim\Application Data\OpenOffice.org2\user\config\
	&apos; для Linux - /home/vadim/.openoffice.org2/user/config/OOoFBTools/
	Dim oPathSettings
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	getUserPath = oPathSettings.UserConfig
End Function

&apos; Возвращает путь к домашней папке пользователя
Function getHomePath() As String
	Dim oPathSubst
	oPathSubst = createUnoService(&quot;com.sun.star.util.PathSubstitution&quot;)
	getHomePath = oPathSubst.getSubstituteVariableValue(&quot;$(home)&quot;)
End Function

&apos; Возвращает путь к ВРЕМЕННОЙ  папке OOo
Function getTempPath() As String
	Dim oPathSettings
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	getTempPath = oPathSettings.Temp
End Function

&apos; возвращает временную папку для OOoFBTools (в зависимости от системы)
Function getOOoFBToolsTempPath() As String
	If GetOS() = 0 Then &apos; Windows
		getOOoFBToolsTempPath = ConvertFromUrl( getTempPath() ) &amp; &quot;\ooofbtools-tmp&quot;
	Else &apos; Mac OS X, Linux, FreeBSD и т.д.
		getOOoFBToolsTempPath = &quot;/tmp/ooofbtools-tmp&quot;
	End If
End Function

&apos; что за система: 0 - Windows, 1 - Mac OS X, 2 - Linux, FreeBSD и т.д.
Function GetOS() As Integer
	Dim oPathSettings, sDir As String
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	sDir = oPathSettings.Work
	If InStr( sDir, &quot;file:///home/&quot; ) &gt; 0 Then
		GetOS = 2 &apos; Linux, FreeBSD и т.д.
	ElseIf InStr( sDir, &quot;file:///Users/&quot; ) &gt; 0 Then
		GetOS = 1 &apos; Mac OS X
	Else
		GetOS = 0 &apos; Windows
	End If
End Function

&apos; &quot;Путь&quot; к расширению
Function getRootStorage( sOXTName As String ) As String
	Dim oPIP As Object
	oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	getRootStorage = oPIP.getPackageLocation( sOXTName )
End Function

&apos; Версия расширения
Function getMyVersion( sOXTName As String ) As String
	Dim oPIP As Object
	Dim aaExtensionList
	Dim aExtensionList
	oPIP = GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	aaExtensionList = oPIP.getExtensionList
	For Each aExtensionList In aaExtensionList
		If aExtensionList(0) = sOXTName Then
			 getMyVersion = aExtensionList(1)
			 Exit Function
		End If
	Next
	getMyVersion = &quot;&quot;
End Function

&apos; Запустить указанный файл
Sub FileExecute( sFilePath As String )
	Dim oSSE As Object
	oSSE = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	oSSE.execute( sFilePath, &quot;&quot;, 0)
End Sub

&apos; /// Для отладки ///

Sub SaveGebugObjectListPMS( oObject, sObjectName As String, sFilePath As String )
	Dim s As String
	s = &quot;Object: &quot; &amp; sObjectName &amp; chr(10) &amp; _
		&quot;ImplementationName: &quot; &amp; oObject.ImplementationName &amp; chr(10) &amp; chr(10) &amp; _
		&quot;Properties:&quot; &amp; chr(10) &amp; oObject.dbg_properties &amp; chr(10) &amp; chr(10) &amp; _
		&quot;Methods:&quot; &amp; chr(10)&amp; oObject.dbg_methods &amp; chr(10) &amp; chr(10) &amp; _
		&quot;SupportedInterfaces:&quot; &amp; chr(10) &amp; oObject.dbg_supportedInterfaces &amp; chr(10) &amp; chr(10)
	SaveText(sFilePath, s, &quot;utf-8&quot;)
End Sub

&apos; /// Валидация ///

Sub Validate( sFB2File As String )
	If GetOS() &gt; 0 Then
		MsgBox( &quot;Извините, Валидатор fb2-файлов работает пока только для системы Windows&quot;, 64, &quot;Валидация fb2-файлов&quot; )
		Exit Sub
	End If
	Dim sFB2VBSFile As String, sFB2VBS As String
	sFB2VBSFile = getTempPath() &amp; &quot;/fb2-valid-win32.vbs&quot;
	sFB2VBS = &quot;Set doc = WScript.CreateObject(&quot;&quot;MSXML2.DOMDocument.4.0&quot;&quot;)&quot; &amp; chr(10) &amp; _
				&quot;Set cache = WScript.CreateObject(&quot;&quot;MSXML2.XMLSchemaCache.4.0&quot;&quot;)&quot; &amp; chr(10) &amp; _
				&quot;doc.async=false&quot; &amp; chr(10) &amp; _
				&quot;doc.validateOnParse=true&quot; &amp; chr(10) &amp; _
				&quot;cache.add &quot;&quot;&quot; &amp; &quot;http://www.gribuser.ru/xml/fictionbook/2.0&quot;&quot;,&quot; &amp; _
				&quot;&quot;&quot;&quot; &amp; getRootStorage( &quot;DikBSD.OOoFBTools&quot; ) &amp; &quot;\fb2-schema\FictionBook.xsd&quot;&quot;&quot; &amp; chr(10) &amp; _
				&quot;doc.schemas=cache&quot; &amp; chr(10) &amp; _
				&quot;if not doc.load(&quot;&quot;&quot; &amp; ConvertFromURL(sFB2File) &amp; &quot;&quot;&quot;) then&quot; &amp; chr(10) &amp; _
				&quot;WScript.Echo &quot;&quot;Error at&quot;&quot;, &quot;&quot;&quot; &amp; ConvertFromURL(sFB2File) &amp; &quot;&quot;&quot;+&quot;&quot;, line&quot;&quot;, cstr(doc.parseError.line)+&quot; &amp; &quot;&quot;&quot;, column&quot;&quot;, cstr(doc.parseError.linepos)+&quot;&quot;&quot; &amp; &quot;:&quot;&quot;&quot; &amp; &quot;, doc.parseError.reason&quot; &amp; chr(10) &amp; _
				&quot;else WScript.Echo &quot; &amp; &quot;&quot;&quot;&quot; &amp; &quot;File: &quot; &amp; ConvertFromURL(sFB2File) &amp; &quot; - No errors found&quot;&quot;&quot; &amp; chr(10) &amp; _
				&quot;end if&quot;
				
	SaveText( sFB2VBSFile, sFB2VBS, &quot;windows-1251&quot; )
	
	Dim oSSE As Object
	oSSE = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	oSSE.execute( sFB2VBSFile, &quot;&quot;, 0 )
End Sub

&apos; //////////////// Экспорт в HTML //////////////////////

&apos; экспорт текущий документ в HTML
Sub ExportToHTML( sFileToUrl As String )
	Dim oDoc As Object : oDoc = ThisComponent
	Dim args(1) As New com.sun.star.beans.PropertyValue
	args(0).Name = &quot;InteractionHandler&quot;
	args(0).Value = &quot;&quot;
	args(1).Name = &quot;FilterName&quot;
	args(1).Value = &quot;HTML (StarWriter)&quot;
	oDoc.storeToURL( sFileToUrl, args() )
End Sub

</script:module>