<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Functions" script:language="StarBasic">REM  *****  BASIC  *****
&apos; Разные функции, необходимые для работы разных содулей пакета OOoFBTools

&apos; /// Работа с файлами ///

Function SaveSettings(sSettingsFilename As String, oDlg As Object)
	&apos; записываем установки
	Dim oOS As Object, oFA As Object, oTOS As Object
	Dim oLB As Object &apos; Для работы с ListBox`ами

	oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	
	oOS = oFA.openFileWrite(sSettingsFilename)
	oOS.truncate()
	oTOS.setOutputStream(oOS)
	oTOS.setEncoding(&quot;utf-8&quot;)
	
	Dim ctrl As Object, i As Integer
	ctrl = oDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.State &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).Model.Text &amp; chr(10))
		ElseIf ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
			oTOS.writeString(ctrl(i).Model.Name &amp; &quot;=&quot; &amp; ctrl(i).SelectedItemPos &amp; chr(10))
		End If
	Next i
	oTOS.writeString(&quot;end of file&quot; &amp; chr(10))
	oTOS.closeOutput()
End Function

Function SetSettingsInControlls(sCurrentLine As String, oDlg)
	On Error Goto ErrorHandler
	Dim oLB As Object &apos; Для работы с ListBox`ами
	Dim sSetting() As String
	sSetting = Split(sCurrentLine, &quot;=&quot;)
	
	If oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoComboBoxControl&quot; Then
		oDlg.GetControl(sSetting(0)).Text = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoRadioButtonControl&quot; Then
		oDlg.GetControl(sSetting(0)).State = sSetting(1)
	ElseIf oDlg.GetControl(sSetting(0)).getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
		oLB = oDlg.getControl(sSetting(0))
		oLB.SelectItemPos(sSetting(1), True)
	End If
	Exit Function
	ErrorHandler: &apos; идем дальше
End Function

Function pmxCurDir() As String
	&apos; Возвращает путь к папке конфигурации пользователя
	&apos; Для Windows - C:\Documents and Settings\vadim\Application Data\OpenOffice.org2\user\config\
	Dim oPathSettings
	oPathSettings = CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	pmxCurDir = oPathSettings.UserConfig
End Function

&apos; /// Работа с экраном ///

Function ToScreenCenter(oDlg)
	&apos; центрирование на экране
	Dim CurPosSize As New com.sun.star.awt.Rectangle
	Dim oFrame, FramePosSize, xWindowPeer, WindowHeight, WindowWidth, DialogWidth, DialogHeight, iXPos, iYPos
	oFrame = ThisComponent.getCurrentController().Frame
	FramePosSize = oFrame.getComponentWindow.PosSize
	xWindowPeer = oDlg.getPeer()
	CurPosSize = oDlg.getPosSize()
	WindowHeight = FramePosSize.Height
	WindowWidth = FramePosSize.Width
	DialogWidth = CurPosSize.Width
	DialogHeight = CurPosSize.Height
	iXPos = ((WindowWidth/2) - (DialogWidth/2))
	iYPos = ((WindowHeight/2) - (DialogHeight/2))
	oDlg.setPosSize(iXPos, iYPos, DialogWidth, DialogHeight, com.sun.star.awt.PosSize.POS)
End Function

&apos; /// Работа с числами ///

Function IsEvenNumber(lNumber As Long) As Boolean
	&apos; Если число четное - возвращаем True, если нечетное - False
	Dim b
	b = lNumber Mod 2
	If b = 0 Then
		IsEvenNumber = True
	Else
		IsEvenNumber = False
	End If
End Function

&apos; /// Работа с массивами ///

Function AddNewItemToArray1(sArray() As String, sValue As String)
	Dim j As Long
	j = Ubound(sArray()) + 1
	ReDim Preserve sArray(j)
	sArray(j) = sValue
End Function

Function AddNewItemToArray2(sArray As String, sValue1 As String, sValue2 As String)
	Dim l As Long
	l = Ubound(sArray(), 1) + 1
	If l &gt; 0 Then
		ReDim Preserve sArray(l, 1)
	Else Redim sArray(l, 1)
	End If
	
	sArray(l,0) = sValue1
	sArray(l,1) = sValue2
	
End Function

Function AddLineInArray(sTextArray() As String, sText As String, oProgressBar)
	Dim l As Long
	l = Ubound(sTextArray()) + 1
	If l &gt; 0 Then
		ReDim Preserve sTextArray(l)
	Else Redim sTextArray(l)
	End If
	sTextArray(l) = sText
	oProgressBar.setValue(l)
End Function

&apos; /// Корректура строки ///

Function ReplaceFromString(sSource As String, sDel As String, sReplace As String) As Integer
	&apos; Строка sSource изменяется - в ней все части sDel заменяются на sReplace
	&apos; Если sReplace - &quot;&quot;, то все sDel удаляются, иначе - замена на sReplace
	Dim i As Integer, c As Integer
	c = 0 &apos; счетчик число изменений в строке
	i = InStr(sSource, sDel)
	If i=0 Then
		ReplaceFromString = 0
		Exit Function
	End If
	Do While i &gt; 0
		Mid(sSource, i, Len(sDel), sReplace)
		i = InStr(i, sSource, sDel)
		c = c+1
	Loop
	ReplaceFromString = c
End Function

Function CorrectPara(sPara As String) As String
	&apos; корректировка абзаца - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newPara As String, sChar As String
	iLen = Len(sPara)&apos; длина анализируемой строки
	For i = 1 To iLen
		sChar = Mid(sPara, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newPara = newPara + &quot;&amp;amp;&quot;
		ElseIf sChar = &quot;&lt;&quot; Then
			newPara = newPara + &quot;&amp;lt;&quot;
		ElseIf sChar = &quot;&gt;&quot; Then
			newPara = newPara + &quot;&amp;gt;&quot;
		Else
			newPara = newPara + sChar
		End If
	Next i
	CorrectPara = newPara
End Function

Function FB2CorrectWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord + &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		ElseIf sChar = &quot;&lt;&quot; Then
			newWord = newWord + &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord + &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord + sChar
		End If
	Next i
	sWord = newWord
End Function

Function FB2CorrectBracketsWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&lt;&quot; Then
			newWord = newWord + &quot;&amp;lt;&quot;
			iResult(0) = iResult(0) + 1
		ElseIf sChar = &quot;&gt;&quot; Then
			newWord = newWord + &quot;&amp;gt;&quot;
			iResult(1) = iResult(1) + 1
		Else
			newWord = newWord + sChar
		End If
	Next i
	sWord = newWord
End Function

Function FB2CorrectAmpWord(sWord As String, iResult As Integer)
	&apos; корректировка слова - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newWord As String, sChar As String
	iLen = Len(sWord)&apos; длина анализируемого слова-лексемы
	For i = 1 To iLen
		sChar = Mid(sWord, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newWord = newWord + &quot;&amp;amp;&quot;
			iResult(2) = iResult(2) + 1
		Else
			newWord = newWord + sChar
		End If
	Next i
	sWord = newWord
End Function

Function RemoveSuperfluous(sSource As String, iResult As Integer)
	&apos; Убираем пустышки типа &lt;/x&gt;&lt;x&gt;
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt;&lt;strong&gt;&quot;, &quot;&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt;&lt;emphasis&gt;&quot;, &quot;&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt;&lt;sub&gt;&quot;, &quot;&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt;&lt;sup&gt;&quot;, &quot;&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt;&lt;code&gt;&quot;, &quot;&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt;&lt;strikethrough&gt;&quot;, &quot;&quot;)
End Function

Function RemoveSuperfluous2(sSource As String, iResult1 As Integer, iResult2 As Integer)
	&apos; Убираем пустышки типа &lt;/x&gt;&lt;x&gt; и &lt;x&gt;&lt;/x&gt;
	iResult1(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt;&lt;strong&gt;&quot;, &quot;&quot;)
	iResult1(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt;&lt;emphasis&gt;&quot;, &quot;&quot;)
	iResult1(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt;&lt;sub&gt;&quot;, &quot;&quot;)
	iResult1(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt;&lt;sup&gt;&quot;, &quot;&quot;)
	iResult1(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt;&lt;code&gt;&quot;, &quot;&quot;)
	iResult1(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt;&lt;strikethrough&gt;&quot;, &quot;&quot;)
	
	iResult2(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;&lt;/strong&gt;&quot;, &quot;&quot;)
	iResult2(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;&lt;/emphasis&gt;&quot;, &quot;&quot;)
	iResult2(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;&lt;/sub&gt;&quot;, &quot;&quot;)
	iResult2(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;&lt;/sup&gt;&quot;, &quot;&quot;)
	iResult2(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;&lt;/code&gt;&quot;, &quot;&quot;)
	iResult2(5) = ReplaceFromString(sSource, &quot;&lt;strikethrough&gt;&lt;/strikethrough&gt;&quot;, &quot;&quot;)
End Function

Function ClearStyleSpace(sSource As String, iResult1 As Integer, iResult2 As Integer)
	&apos; Обработка пробелов, обрамленными стилями &lt;/x&gt; &lt;x&gt; и &lt;x&gt; &lt;/x&gt;
	iResult1(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt; &lt;/strong&gt;&quot;, &quot; &quot;)
	iResult1(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt; &lt;/emphasis&gt;&quot;, &quot; &quot;)
	iResult1(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt; &lt;/sub&gt;&quot;, &quot; &quot;)
	iResult1(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt; &lt;/sup&gt;&quot;, &quot; &quot;)
	iResult1(4) = ReplaceFromString(sSource, &quot;&lt;code&gt; &lt;/code&gt;&quot;, &quot; &quot;)
	iResult1(5) = ReplaceFromString(sSource, &quot;&lt;strikethrough&gt; &lt;/strikethrough&gt;&quot;, &quot; &quot;)
	
	iResult2(0) = ReplaceFromString(sSource, &quot;&lt;/strong&gt; &lt;strong&gt;&quot;, &quot; &quot;)
	iResult2(1) = ReplaceFromString(sSource, &quot;&lt;/emphasis&gt; &lt;emphasis&gt;&quot;, &quot; &quot;)
	iResult2(2) = ReplaceFromString(sSource, &quot;&lt;/sub&gt; &lt;sub&gt;&quot;, &quot; &quot;)
	iResult2(3) = ReplaceFromString(sSource, &quot;&lt;/sup&gt; &lt;sup&gt;&quot;, &quot; &quot;)
	iResult2(4) = ReplaceFromString(sSource, &quot;&lt;/code&gt; &lt;code&gt;&quot;, &quot; &quot;)
	iResult2(5) = ReplaceFromString(sSource, &quot;&lt;/strikethrough&gt; &lt;strikethrough&gt;&quot;, &quot; &quot;)
End Function

Function WorkingRoundBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;(&quot;, &quot;(&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;)&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;)&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;(&quot;, &quot;(&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;)&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;)&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;(&quot;, &quot;(&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;)&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;)&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;)&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;)&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;(&quot;, &quot;(&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;)&lt;/code&gt;&quot;, &quot;&lt;/code&gt;)&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;(&quot;, &quot;(&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;)&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;)&quot;)
End Function

Function WorkingSquarteBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;[&quot;, &quot;[&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;]&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;]&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;[&quot;, &quot;[&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;]&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;]&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;[&quot;, &quot;[&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;]&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;]&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;]&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;]&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;[&quot;, &quot;[&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;]&lt;/code&gt;&quot;, &quot;&lt;/code&gt;]&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;[&quot;, &quot;[&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;]&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;]&quot;)
End Function

Function WorkingFiguredBracket(sSource As String, iResult As Integer)
	&apos; Обработка круглых скобок
	iResult(0) = ReplaceFromString(sSource, &quot;&lt;strong&gt;{&quot;, &quot;{&lt;strong&gt;&quot;)
	iResult(0) = iResult(0) &amp; ReplaceFromString(sSource, &quot;}&lt;/strong&gt;&quot;, &quot;&lt;/strong&gt;}&quot;)
	iResult(1) = ReplaceFromString(sSource, &quot;&lt;emphasis&gt;{&quot;, &quot;{&lt;emphasis&gt;&quot;)
	iResult(1) = iResult(1) &amp; ReplaceFromString(sSource, &quot;}&lt;/emphasis&gt;&quot;, &quot;&lt;/emphasis&gt;}&quot;)
	iResult(2) = ReplaceFromString(sSource, &quot;&lt;sub&gt;{&quot;, &quot;{&lt;sub&gt;&quot;)
	iResult(2) = iResult(2) &amp; ReplaceFromString(sSource, &quot;}&lt;/sub&gt;&quot;, &quot;&lt;/sub&gt;}&quot;)
	iResult(3) = ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	iResult(3) = iResult(3) &amp; ReplaceFromString(sSource, &quot;}&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;}&quot;)
	iResult(4) = ReplaceFromString(sSource, &quot;&lt;code&gt;{&quot;, &quot;{&lt;code&gt;&quot;)
	iResult(4) = iResult(4) &amp; ReplaceFromString(sSource, &quot;}&lt;/code&gt;&quot;, &quot;&lt;/code&gt;}&quot;)
	iResult(5) = ReplaceFromString(sSource, &quot;&lt;sup&gt;{&quot;, &quot;{&lt;sup&gt;&quot;)
	iResult(5) = iResult(5) &amp; ReplaceFromString(sSource, &quot;}&lt;/strikethrough&gt;&quot;, &quot;&lt;/strikethrough&gt;}&quot;)
End Function

&apos; /// Для таблиц ///

Function IsMatrix(oTable As Object) As Boolean
	&apos; для простой прямоугольной матрицы возвращает True
	&apos; для сложной таблицы - False
	On Error Goto ErrorHandler
	IsMatrix = IsArray(oTable.DataArray)
	Exit Function
	ErrorHandler:
	IsMatrix = False
End Function

Function IsComplexRowsCollTable(oTable As Object) As Boolean
	&apos; True - если сложная таблица с разным числом столбцов и строк В ЯЧЕЙКЕ
	&apos; False - если сложная таблица с разным числом столбцов в строке
	Dim sNames() As String
	Dim oCell As Object
	Dim l As String, n As String
	sNames() = oTable.getCellNames()
	For i = LBound(sNames()) To UBound(sNames())
		oCell = oTable.getCellByName(sNames(i))
		n = &quot;&quot;
		GetCellLetterAndNumber(oCell.Cellname, n)
		If InStr(n, &quot;.&quot;) &gt; 0 Then
			IsComplexRowsCollTable = True
			Exit Function
		End If
	Next i
	IsComplexRowsCollTable = False
End Function

Function GetCellLetterAndNumber(sCell As String, sNumber As String) As String
	Dim i As Integer
	Dim s As String, sy As String
	s = &quot;&quot;
	sy = &quot;&quot;
	If InStr(sCell, &quot;.&quot;) = 0 Then
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; sy
			End If
		Next i
		GetCellLetterAndNumber = s
	Else
		For i = 1 To Len(sCell)
			sy = Mid(sCell, i, 1)
			If Not IsNumeric(sy) Then
				s = s &amp; sy
			Else
				sNumber = sNumber &amp; Mid(sCell, i, Len(sCell))
				Exit For
			End If
		Next i
		GetCellLetterAndNumber = s
	End If
End Function

Function GetMaxColInTable(oTable As Object) As Integer
	Dim i As Integer, j As Integer, nCollMax As Integer
	Dim sNames() As String
	sNames() = oTable.getCellNames()
	nCollMax = 0
	i = 0
	Do While i &lt;= UBound(sNames())
		Dim oCell As Object
		Dim c As String, sNumber As String
		oCell = oTable.getCellByName(sNames(i)) &apos; первая ячейка строки
		c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
		j = 1 &apos; счетчик числа ячеек в строке
		i = i+1
		Do While i &lt;= UBound(sNames())
			&apos; следующая ячейка строки
			oCell = oTable.getCellByName(sNames(i))
			c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
			If c &lt;&gt; &quot;A&quot; Then
				j = j+1
				i = i+1
			Else &apos; нашли новую строку таблицы
				Exit Do
			End If
		Loop
		If nCollMax &lt; j Then
			nCollMax = j
		End If
	Loop
	GetMaxColInTable = nCollMax
End Function

Function GetMaxLineInRow(oTable, CellNames, iCel As Integer) As Integer
	&apos;  возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы
	Dim nMaxLines As Integer, nLines As Integer, iCol As Integer
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To oTable.Columns.Count-1
		Cell = oTable.getCellByName(CellNames(iCel))
		nLines = UBound( Split( Cell.getString(), chr(10) ) )
		If nMaxLines &lt; nLines Then
			nMaxLines = nLines
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRow = nMaxLines
End Function

Function GetMaxLineInRowWithProtect(oTable, CellNames, iCel As Integer) As Integer
	&apos;  возвращает максимальное число строк (абзацев) в ячейке для определенной строки таблицы,
	&apos; учитывая то, что защищенная ячейка игнорируется и считается, что содержит 1 абзац. Т.е. все абзацы в ней сливаем вместе
	Dim nMaxLines As Integer, nLines As Integer, iCol As Integer
	Dim Cell
	nMaxLines = 0
	For iCol = 0 To oTable.Columns.Count-1
		Cell = oTable.getCellByName(CellNames(iCel))
		If Cell.IsProtected &lt;&gt; True Then &apos; пропускаем заблокированные ячейки
			nLines = UBound( Split( Cell.getString(), chr(10) ) )
			If nMaxLines &lt; nLines Then
				nMaxLines = nLines
			End If
		End If
		iCel = iCel+1
	Next iCol
	GetMaxLineInRowWithProtect = nMaxLines
End Function

Function GetFB2ParagraphAdjust(CellCursor) As String
	&apos; возвращает выравнивание ячейки талицы по ширине в формате fb2
	Select Case CellCursor.paraAdjust
		Case com.sun.star.style.ParagraphAdjust.LEFT
			GetFB2ParagraphAdjust = &quot;left&quot;
		Case com.sun.star.style.ParagraphAdjust.CENTER
			GetFB2ParagraphAdjust = &quot;center&quot;
		Case com.sun.star.style.ParagraphAdjust.RIGHT
			GetFB2ParagraphAdjust = &quot;right&quot;
		Case Else
			GetFB2ParagraphAdjust =  &quot;left&quot;
	End Select
End Function

Function GetTHD(bth As Boolean) As String
	&apos; определение тэга для заголовков и (или) строк таблицы
	If bth = True Then
		GetTHD = &quot;th&quot; &apos; для заголовков таблицы
	Else
		GetTHD = &quot;td&quot; &apos; для строк таблицы
	End If
End Function

Function MakeValignAttr(CellCursor, sTVA As String, sTHDTag As String) As String
	&apos; обработка атрибутов valign - если они &quot;пустые&quot; - то их не заносим в fb2 код
	&apos; sTHDTag - тэг th или td
	Dim sTagTDHAttr As String
	sTagTDHAttr = &quot;&lt;&quot; &amp; sTHDTag &amp; &quot; align=&quot;&quot;&quot; &amp; GetFB2ParagraphAdjust(CellCursor)
	If sTVA &lt;&gt; &quot;&quot; Then
		sTagTDHAttr = sTagTDHAttr &amp; &quot;&quot;&quot; valign=&quot;&quot;&quot; &amp; sTVA
	End If
	MakeValignAttr = sTagTDHAttr
End Function


&apos; /// Поиск ///

Function FindTextOfStyle(sStyle As String, bMerge As Boolean) As String
	Dim sResult As String
	Dim oStr As Object, oEnum As Object
	Dim oDesc As Object, iCount As Integer
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(sStyle)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		FindTextOfStyle = &quot;&quot;
		Exit Function
	End If
	For iCount = 0 To oEnum.getCount() - 1
		oStr = oEnum.getByIndex(iCount)
		If bMerge Then
			sResult = sResult &amp; oStr.getString() &amp; &quot; &quot;
		Else
			sResult = sResult &amp; chr(10) &amp; oStr.getString()
		End If
	Next iCount
	If bMerge Then
		sResult = Mid(sResult, 1, Len(sResult)-1)
	Else
		sResult = Mid(sResult, 2, Len(sResult)-1)
	End If
	FindTextOfStyle = sResult
End Function

&apos; /// Работа с контролами  ///

Function IsFillAllFields As Boolean
	Dim ctrl As Object, i As Integer, b As Boolean
	b = False
	ctrl = oStylesDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoEditControl&quot; Then
			If Trim(ctrl(i).Model.Text) &lt;&gt; &quot;&quot; Then
				b = True
			Else
				b = False
				Exit For
			End If
		End If
	Next i
	
	If b = False Then
		MsgBox &quot;Заполните, пожалуйста, все поля!&quot;, 64, &quot;OOoFBTools&quot;
		IsFillAllFields = False
		Exit Function
	End If
	IsFillAllFields = True
End Function

</script:module>