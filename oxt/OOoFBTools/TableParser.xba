<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TableParser" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

&apos; //////////////// Парсер таблиц /////////////////

&apos; Возвращает число заголовков таблицы
Function GetHeaderRowCount( oTable As Object) As Integer
	If OOoWriterVersion &lt; &quot;2.3&quot; Then
		&apos; не поддерживается свойство таблиц HeaderRowCount - не сможем отловить число заголовков
		If oTable.RepeatHeadline = True Then
			GetHeaderRowCount = 1
		Else 
			GetHeaderRowCount = 0
		End If
	Else
		GetHeaderRowCount = oTable.HeaderRowCount &apos; число строк заголовка таблицы
	End If
End Function

Function OOo23TextTableParser(iCurrentTable As Integer)
	Dim nHeaderRowCount As Integer
	Dim oTables As Object, oTable As Object
	Dim sTable As String &apos; текст таблицы в fb2.1 формате
	Dim iCel As Integer &apos; текушая ячейка
	Dim CellNames
	&apos; все таблицы документа
	oTables = ThisComponent.getTextTables() 
	&apos; получаем текущую таблицу
	oTable = oTables.getByIndex(iCurrentTable)
	iCel = 0 &apos; текушая ячейка
	CellNames = oTable.getCellNames()
	
	&apos; число строк заголовка таблицы
	nHeaderRowCount = GetHeaderRowCount( oTable )

	&apos; обработка сложных таблиц
	If IsComplexRowsCollTable(oTable) = True Then
		&apos;Сложная таблица: разное число столбцов и строк В ЯЧЕЙКЕ (очень сложная)
	Else
		&apos;Сложная таблица с разным числом столбцов в строке
		sTable = MakeComplexTable(nHeaderRowCount, oTable, CellNames)
	End If	
	iCurrentTable = iCurrentTable + 1 &apos; на следующую таблицу, если она есть
	sPrevStyle = &quot;Table&quot;
	AddBodyArray(sTable, &quot;Table&quot;, False)
End Function

&apos; форматирование стилями каждого абзаца ячейки oCell
Function FormatCellPara( oCell As Object, nHeaderRowCount As Integer, nRow As Integer ) As String
	Dim oCellParEnum, oCellPar, oWordEnum, oWord
	Dim sRes As String, sFormatPara As String
	oCellParEnum = oCell.createEnumeration()
	Do While oCellParEnum.hasMoreElements()
		oCellPar = oCellParEnum.nextElement()
		oWordEnum = oCellPar.createEnumeration()
		sFormatPara = &quot;&quot;
		Dim sString As String : sString = &quot;&quot; &apos; Для &quot;отлова&quot; нумерованных списков
		Do While oWordEnum.hasMoreElements()
			oWord = oWordEnum.nextElement()
			If oWord.TextPortionType = &quot;Frame&quot; Then
				Dim oCEnum : oCEnum = oWord.createContentEnumeration(&quot;com.sun.star.text.TextContent&quot;)
				Do While oCEnum.hasMoreElements()
					Dim oContent : oContent = oCEnum.nextElement()
					If oContent.supportsService(&quot;com.sun.star.text.TextGraphicObject&quot;) Or _
						oContent.supportsService(&quot;com.sun.star.drawing.GraphicObjectShape&quot;) Or _
						oContent.supportsService(&quot;com.sun.star.drawing.CustomShape&quot;) Then
						sFormatPara = sFormatPara &amp; &quot;&lt;image l:href=&quot;&quot;#img_&quot; &amp; iImgCurrent &amp; &quot;&quot;&quot;/&gt;&quot;
						iImgCurrent = iImgCurrent+1
					End If
				Loop
			Else &apos; oWord.TextPortionType = &quot;Text&quot;
				sString = sString &amp; oWord.getString()		
				If oWord.TextPortionType = &quot;Footnote&quot; Or oWord.TextPortionType = &quot;Endnote&quot; Then
					&apos; парсер сносок
					sFormatPara = sFormatPara + FootEndNoteParser( oWord )
				Else
					If bOnlyOneStyle = True Then
						sFormatPara = sFormatPara &amp; InLineParser( oWord )
					Else
						sFormatPara = sFormatPara &amp; InLineAllParser( oWord )
					End If
				End If
			End If
		Loop
		
		If oCellPar.NumberingIsNumber = True Then &apos; нумерованные списки
			MakeNumberingNumberPara( oCellPar, sString, sFormatPara )
		End If
		
		&apos; задаем аттрибуты
		Dim sTagTDH As String, sTagStart As String, sTagEnd As String
		sTagStart = &quot;&quot;
		sTagTDH = MakeValignAttrComplex(GetFB2ParagraphAdjust( oCellPar ), sLineTVA, &quot;td&quot;)
		&apos; обработка заголовков таблицы
		If nHeaderRowCount &gt; 0 Then
			If	nRow &lt; nHeaderRowCount Then &apos; для заголовков сложной таблицы
				sTagTDH = MakeValignAttrComplex(GetFB2ParagraphAdjust( oCellPar ), sHeaderTVA, &quot;th&quot;)
				sTagStart = sTagStart &amp; sTagTDH &amp; &quot;&gt;&quot;
				sTagEnd = &quot;&lt;/th&gt;&quot; &amp; chr(10)
			Else
				sTagStart = sTagStart &amp; sTagTDH &amp; &quot;&gt;&quot;
				sTagEnd = &quot;&lt;/td&gt;&quot; &amp; chr(10)
			End If
		Else
			sTagStart = sTagStart &amp; sTagTDH &amp; &quot;&gt;&quot;
			sTagEnd = &quot;&lt;/td&gt;&quot; &amp; chr(10)
		End If
		
		&apos; для пустого абзаца в ячейке
		If sFormatPara &lt;&gt; &quot;&quot; Then
			sRes = sRes &amp; sTagStart &amp; sFormatPara &amp; sTagEnd
		Else &apos; &quot;пустая строка&quot;
			If nHeaderRowCount &gt; 0 Then
				If	nRow &lt; nHeaderRowCount Then &apos; для заголовков сложной таблицы
					sRes = sRes &amp; &quot;&lt;th/&gt;&quot; &amp; chr(10)
				Else
					sRes = sRes &amp; &quot;&lt;td/&gt;&quot; &amp; chr(10)
				End If
			Else
				sRes = sRes &amp; &quot;&lt;td/&gt;&quot; &amp; chr(10)
			End If
		End If
		
	Loop
	sRes = Mid( sRes, 1, Len(sRes)-1 )
	FormatCellPara = sRes
End Function


&apos; ///////////////////////////////////////////////////////////////////////////////////////////////////
&apos; /////////////////////////////  Сложные таблицы ////////////////////////////////////////////////////
&apos; ///////////////////////////////////////////////////////////////////////////////////////////////////
Function MakeComplexTable(nHeaderRowCount As Integer, oTable As Object, CellNames) As String
	&apos; обработка только сложных таблиц с разным числом столбцов в строке
	Dim aRows() As String &apos; массив строк в fb2.1 формате
	Dim oCell As Object
	Dim sTable As String &apos; текст таблицы в fb2.1 формате
	Dim nCell As Integer &apos; счетчик ячеек (сквозной) - указатель на текущую ячейку
	Dim nRow As Integer &apos; счетчик строк - указатель на новую строку
	Dim nCollMaxInTable As Integer &apos; max число столбцов в строке по всей таблице
	nCollMaxInTable = GetMaxColInTable(oTable)
	nCell = 0
	nRow = 0	

	Do While nCell &lt;= UBound(CellNames())
		&apos; считываем все ячейки до ячейки “A”. При этом делаем проверку на выход за верхнюю границу таблицы – Ubound(CellNames()).
		Dim c As String, sNumber As String
		Dim nColumnCountInRow As Integer &apos; число столбцов в строке сложной таблицы
		
		&apos; 1. Параметры строк таблицы
		&apos; число столбцов в строке сложной таблицы
		nColumnCountInRow = GetColumnCountInRow(oTable, nCell, CellNames)
		&apos; находим max число абзацев в строке, учитывая то, что защищенная ячейка игнорируется и считается, что содержит 1 абзац. Т.е. все абзацы в ней сливаем вместе
		Dim n As Integer, nMaxLines As Integer &apos; максимальное число абзацев (по смежным ячейкам в пределах одной строки таблицы)
		n = nCell
		nMaxLines = GetMaxLineInRowWithProtect(oTable, CellNames, n, nColumnCountInRow)
	
		&apos; форматируем inline стилями абзацы ячейки
		Dim aCellAllFormatText() As String	&apos; массив ячейки со всеми ее отформатированными inline стилями абзацами
		aCellAllFormatText = MakeWorkCellPara( oTable, CellNames(nCell), nHeaderRowCount, nRow )
			
		&apos; формируем промежуточный массив массивов строк таблицы с &quot;виртуальными&quot; абзацами из &quot;виртуальных&quot; ячеек
		Dim aFB2ParasRow() As String	&apos; Сформированный fb2 код всей Строки со всеми абзацами
		oCell = oTable.getCellByName(CellNames(nCell)) &apos; первая ячейка строки
		aFB2ParasRow = MakeFB2ParasRow( aFB2ParasRow, aCellAllFormatText(), nMaxLines, _
										GetFB2ParagraphAdjust(oCell.createTextCursor()), _
										nHeaderRowCount, nRow )
		nCell = nCell + 1 &apos; к следующей ячейке
		
		Do While nCell &lt;= UBound(CellNames()) &apos; следующая ячейка строки
			&apos; форматируем inline стилями абзацы ячейки
			aCellAllFormatText = MakeWorkCellPara( oTable, CellNames(nCell), nHeaderRowCount, nRow )
			&apos; форматированная строка ячейки (с учетом коррекции проблемных символов)
			oCell = oTable.getCellByName(CellNames(nCell))
			c = GetCellLetterAndNumber(oCell.Cellname, sNumber)
			If c &lt;&gt; &quot;A&quot; Then
				&apos; формируем промежуточный массив массивов строк таблицы с &quot;виртуальными&quot; абзацами из &quot;виртуальных&quot; ячеек
				aFB2ParasRow = MakeFB2ParasRow( aFB2ParasRow, aCellAllFormatText(), nMaxLines, _
												GetFB2ParagraphAdjust(oCell.createTextCursor()), _
												nHeaderRowCount, nRow )
				nCell = nCell + 1
			Else &apos; нашли новую строку таблицы
				nRow = nRow + 1
				Exit Do
			End If
		Loop
				
		&apos; формируем виртуальные строки &lt;tr&gt; для каждой строки таблицы
		AddNewItemToArray1( aRows, MakeTRRow( aFB2ParasRow(), nCollMaxInTable, nMaxLines ) )
	Loop
	
	&apos; формируем полный текст в fb2.1 для таблицы
	sTable = &quot;&lt;table&gt;&quot; &amp; chr(10)
	Dim i As Integer
	For i=0 To UBound(aRows())
		sTable = sTable &amp; aRows(i)
	Next i
	sTable = sTable &amp; &quot;&lt;/table&gt;&quot;
	MakeComplexTable = sTable
End Function

Function MakeFB2ParasRow( aFB2ParasRow() As String, aCellAllFormatText() As Variant, _
							nMaxLines As Integer, sAlling As String, _
							nHeaderRowCount As Integer, nRow As String ) As Variant
	&apos; формируем промежуточный массив массивов строк таблицы с &quot;виртуальными&quot; абзацами из &quot;виртуальных&quot; ячеек
	Dim i As Integer &apos; размерность массива
	&apos; 1. формируем fb2 код Ячейки со всеми абзацами
	Dim aCellWithLines(nMaxLines) As String
	aCellWithLines = MakeFB2ParasCell( aCellAllFormatText(), nMaxLines )
	
	&apos; 2. формируем промежуточный массив массивов строк таблицы с &quot;виртуальными&quot; абзацами из &quot;виртуальных&quot; ячеек
	i = Ubound(aFB2ParasRow(), 1) + 1
	If i &gt; 0 Then
		ReDim Preserve aFB2ParasRow(i, nMaxLines)
	Else Redim aFB2ParasRow(i, nMaxLines)
	End If
	Dim j As Integer
	For j = 0 To nMaxLines
		If aCellWithLines(j) &lt;&gt; &quot;&quot; Then
			aFB2ParasRow(UBound(aFB2ParasRow), j) = aCellWithLines(j) &amp; chr(10)
		Else
			If nRow &lt; nHeaderRowCount Then &apos; для заголовков сложной таблицы
				aFB2ParasRow(UBound(aFB2ParasRow), j) = &quot;&lt;th/&gt;&quot; &amp; chr(10)
			Else
				aFB2ParasRow(UBound(aFB2ParasRow), j) = &quot;&lt;td/&gt;&quot; &amp; chr(10)
			End If
		End If
	Next j

	MakeFB2ParasRow = aFB2ParasRow &apos; Сформированный fb2 код всей Строки со всеми абзацами
End Function

Function MakeFB2ParasCell( aCellAllFormatText() As Variant, nMaxLines As Integer) As Variant
	&apos; формируем fb2 код Ячейки со всеми абзацами
	Dim i As Integer, j As Integer
	Dim aCellWithLines(nMaxLines) As String &apos; Сформированный fb2 код Ячейки со всеми абзацами
	For i = LBound(aCellAllFormatText) To nMaxLines
		&apos; Выравнивание строк: влево - 0, вправо - 1, по центру - 3, по ширине - 2	
		If UBound(aCellAllFormatText) = nMaxLines Then		
			aCellWithLines(i) = aCellAllFormatText(i)
		Else &apos; дополняем &quot;отсутствующие&quot; строки до числа nMaxLines
			For j = 0 To UBound(aCellAllFormatText)
				aCellWithLines(j) = aCellAllFormatText(j)
			Next j
			For j = UBound(aCellAllFormatText)+1 To nMaxLines
				aCellWithLines(j) = &quot;&quot;
			Next j
			Exit For
		End If
	Next i
	
	&apos; 2. убираем перевод строки в абзацах, если он есть (чтобы он не стоял между текстом строки и закрывающим тэгом) /Просто для &quot;красоты&quot; fb2 кода. Экспорт корректен и без этого/
	DelCR( aCellWithLines() )
	
	MakeFB2ParasCell = aCellWithLines
End Function

Function MakeValignAttrComplex(sTA As String, sTVA As String, sTHDTag As String) As String
	&apos; для сложных таблиц: обработка атрибутов valign - если они &quot;пустые&quot; - то их не заносим в fb2 код
	&apos; sTHDTag - тэг th или td
	Dim sTagTDHAttr As String
	sTagTDHAttr = &quot;&lt;&quot; &amp; sTHDTag &amp; &quot; align=&quot;&quot;&quot; &amp; sTA &amp; &quot;&quot;&quot;&quot;
	If sTVA &lt;&gt; &quot;&quot; Then
		sTagTDHAttr = sTagTDHAttr &amp; &quot; valign=&quot;&quot;&quot; &amp; sTVA &amp; &quot;&quot;&quot;&quot;
	End If
	MakeValignAttrComplex = sTagTDHAttr
End Function

Function InsertColspanFor1Row( aFB2ParasRow() As String, nCollMaxInTable As Integer, nMaxLines As Integer )
	&apos; вставляем colspan для строки из 1-й ячейки (colspan=nCollMaxInTable)
	Dim sStr As String, i As Integer
	For i=0 To nMaxLines
		sStr = aFB2ParasRow(0,i)
		If Instr( sStr, &quot;&lt;td/&gt;&quot; )&gt;0 Or Instr( sStr, &quot;&lt;th/&gt;&quot; )&gt;0 Then
			&apos; для &quot;пустых&quot; тэгов
			InsertInString( sStr, &quot;/&gt;&quot;, &quot; colspan=&quot;&quot;&quot; &amp; nCollMaxInTable &amp; &quot;&quot;&quot;/&quot; )
		Else
			InsertInString( sStr, &quot;&gt;&quot;, &quot; colspan=&quot;&quot;&quot; &amp; nCollMaxInTable &amp; &quot;&quot;&quot;&gt;&quot; )
		End If
		aFB2ParasRow(0,i) = sStr
	Next i
End Function

Function InsertColspanForCutRow( aFB2ParasRow() As String )
	&apos; вставляем colspan для “урезанной” строки
	&apos; Доделать!!! Надо знать width ячейки для расчета colspan
End Function

Function MakeTRRow( aFB2ParasRow() As String, nCollMaxInTable As Integer, nMaxLines As Integer ) As String
	&apos; создание &lt;tr&gt; строки для сложной таблицы
	Dim sRow As String
	&apos; 1. вставляем colspan в тэги
	&apos; определяем тип строки:
	If UBound(aFB2ParasRow()) = nCollMaxInTable-1 Then
		&apos; “полная” строка - ничего вставлять не надо
	Else &apos; число ячеек строки &lt; число столбцов самой “длинной” строки таблицы
		If UBound(aFB2ParasRow()) &gt; 0 Then &apos; “урезанная” строка.
			&apos; вставляем colspan для “урезанной” строки
			InsertColspanForCutRow( aFB2ParasRow() )
		Else &apos; строка из одной строки
			&apos; вставляем colspan для строки, состоящей из 1-й ячейки (colspan=nCollMaxInTable)
			InsertColspanFor1Row( aFB2ParasRow(), nCollMaxInTable, nMaxLines )
		End If
	End If
	
	&apos; 2. объединяем строки одной линии из смежных ячеек
	Dim aMergeVirtPara(nMaxLines) As String, i As Integer, j As Integer
	For i = 0 To UBound(aFB2ParasRow)
		If nMaxLines &gt; 0 Then
			For j = 0 To nMaxLines
				aMergeVirtPara(j) = aMergeVirtPara(j) &amp; aFB2ParasRow(i, j)
			Next j
		Else
			aMergeVirtPara(0) = aMergeVirtPara(0) &amp; aFB2ParasRow(i, 0)
		End If
	Next i
	
	&apos; 3. формирует строку таблицы
	sRow = &quot;&quot;
	For i = 0 To UBound(aMergeVirtPara())
		sRow = sRow &amp; &quot;&lt;tr&gt;&quot; &amp; chr(10) &amp; aMergeVirtPara(i) &amp; &quot;&lt;/tr&gt;&quot; &amp; chr(10)
	Next i
	
	MakeTRRow = sRow
End Function

&apos; обработка проблемных символов, форматирование ячеек и разбивка их на абзацы
Function MakeWorkCellPara( oTable As Object, sCellName As String, nHeaderRowCount As Integer, nRow As Integer ) As Variant
	Dim oCell As Object, sFormatCellText As String, i As Integer
	Dim aCellAllFormatText() As String	&apos; массив ячейки со всеми ее отформатированными inline стилями абзацами
	&apos; форматированная строка ячейки (с учетом коррекции проблемных символов)
	oCell = oTable.getCellByName(sCellName) &apos; первая ячейка строки
	&apos; форматирование строк inline стилями
	sFormatCellText = FormatCellPara( oCell, nHeaderRowCount, nRow )
		
	&apos; массив ячейки со всеми ее отформатированными inline стилями абзацами
	If oCell.IsProtected = True Then &apos; заблокированные ячейки
		Dim aTemp() As String
		aTemp = Split(sFormatCellText, chr(10))
		If UBound( aTemp() ) &gt;= 1 Then
			&apos; убираем у 1-й строки конечный тэг, у последней - стартовый, а у всех премежуточных - и стартовый и конечный тэг.
			aTemp(0) = Mid( aTemp(0), 1, Len( aTemp(0) )-5 )
			aTemp(UBound(aTemp())) = Mid( aTemp(UBound(aTemp())), _
										Instr(aTemp(UBound(aTemp())),&quot;&gt;&quot;)+1, _
										Len(aTemp(UBound(aTemp())))-Instr(aTemp(UBound(aTemp())),&quot;&gt;&quot;) )
			If UBound( aTemp() ) &gt; 1 Then
				For i=1 To UBound(aTemp())-1
					aTemp(i) = Mid( aTemp(i), 1, Len( aTemp(i) )-5 )
					aTemp(i) = Mid( aTemp(i), Instr(aTemp(i),&quot;&gt;&quot;)+1, Len(aTemp(i))-Instr(aTemp(i),&quot;&gt;&quot;) )
				Next i
			End If
		End If
		&apos; Соединяем строки через пробел
		sFormatCellText = Join( aTemp, &quot; &quot; )
		aCellAllFormatText = Split(sFormatCellText, &quot;&quot;) &apos; объединенные абзацы одной строкой
	Else
		aCellAllFormatText = Split(sFormatCellText, chr(10))
	End If

	MakeWorkCellPara = aCellAllFormatText
End Function

</script:module>