<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="BuildFootEndNote" script:language="StarBasic">REM  *****  BASIC  *****
Const sConstBookMarkSimple		As String	= &quot;_ooo_ocr_tc_foot_note_simple_dikbsd_&quot;		&apos; временная закладка
Const sConstBookMarkNZoneNote	As String	= &quot;_ooo_ocr_tc_foot_note_number_zone_dikbsd_&quot;	&apos; закладка - зона поиска номера сноски
Const sConstBookMarkListNote	As String	= &quot;_ooo_ocr_tc_foot_note_list_zone_dikbsd_&quot;		&apos; закладка - зона поиска списка текста сносок
Const sConstBookMarkFNNumber	As String	= &quot;_ooo_ocr_tc_foot_note_find_number_dikbsd_&quot;	&apos; закладка на найденный номер сноски
Const sConstBookMarkFNText		As String	= &quot;_ooo_ocr_tc_foot_note_find_text_dikbsd_&quot;		&apos; закладка на найденный текст сноски, указанного номера

Const sConstBuildFootEndNoteDlgSettings				As String = &quot;/OOoFBTools/BuildFootEndNoteDlgSettings.txt&quot;
Const sConstFootNoteLinkTransDlgSettingsSettings	As String = &quot;/OOoFBTools/FootNoteLinkTransDlgSettings.txt&quot;

Private oBuildFootEndNoteDlg	As Object
Private	oFootNoteLinkTransDlg	As Object
Private lInsNotesCount			As Long
&apos;//////////////////////////////////////////////////////////////////////////////
&apos;							UNO функции
&apos;//////////////////////////////////////////////////////////////////////////////
sub _UnoDelete()
	&apos; удаление выделенного текста
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Delete&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoCut()
	&apos; вырезать выделенный текст в буфер
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Cut&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoCopy()
	&apos; копировать выделенный текст в буфер
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Copy&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoPaste()
	&apos; вставить из буыера текст
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:Paste&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoInsertFootnote()
	&apos; вставить сноску
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:InsertFootnote&quot;, &quot;&quot;, 0, Array())
end sub

sub _UnoSwBackspace()
	&apos; Backspace
	dim document   as object : document   = ThisComponent.CurrentController.Frame
	dim dispatcher as object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	dispatcher.executeDispatch(document, &quot;.uno:SwBackspace&quot;, &quot;&quot;, 0, Array())
end sub

Sub _UnoInsertBookmark( sBookMark As String )
	Dim document   As Object : document   = ThisComponent.CurrentController.Frame
	Dim dispatcher As Object : dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Bookmark&quot;
	args1(0).Value = sBookMark
	dispatcher.executeDispatch(document, &quot;.uno:InsertBookmark&quot;, &quot;&quot;, 0, args1())
End Sub

Sub _UnoDeleteBookMark( sBookMark As String )
	Dim document   As Object
	Dim dispatcher As Object
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
	Dim args1(0) As New com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Bookmark&quot;
	args1(0).Value = sBookMark
	dispatcher.executeDispatch(document, &quot;.uno:DeleteBookmark&quot;, &quot;&quot;, 0, args1())
End Sub

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; 			Функции по работе с закладками
&apos;//////////////////////////////////////////////////////////////////////////////
&apos; Вставить текст в место закладки.
&apos; возвращает: True - если вставили текст в место закладки. False - если нет такой закладки
Function InsertTextToBookMark( sBookMarkName As String, sText As String ) As Boolean
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName( sBookMarkName )
		oBookMark.getAnchor.setString( sText )
		InsertTextToBookMark = True
	Else
		InsertTextToBookMark = False
	End If
End Function

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; переместить видимый курсор на закладку: bSel=True - выделить текст закладки, bSel=False - не выделять текст закладки
&apos; возвращает: True - если перешли на закладку. False - если нет такой закладки
Function GoToViewCursorToBookMark( oViewCursor As Object, sBookMarkName As String, bSel As Boolean ) As Boolean
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName(sBookMarkName).getAnchor()
		If Not bSel Then &apos; просто перейти на начало закладки
			oViewCursor.gotoRange(oBookMark.getStart(), False)
		Else &apos; выделить текст закладки
			oViewCursor.gotoRange(oBookMark, False) &apos; выделить закладку
&apos;			oViewCursor.gotoRange(oBookMark.getStart(), False)	&apos; то же самое,
&apos;			oViewCursor.gotoRange(oBookMark.getEnd(), True)		&apos; только используя 2 строки
		End If
		GoToViewCursorToBookMark = True
	Else
		GoToViewCursorToBookMark = False
	End If
End Function

&apos; расширить выделение до начала закладки (если курсор правее конца закладки), или начала закладки (если курсор левее начала закладки)
Function ExtendSelectTextToBookMark( oViewCursor As Object, sBookMarkName As String )
	ExtendSelectTextToBookMark = False
	Dim oBookMarks : oBookMarks = ThisComponent.getBookmarks()
	If oBookMarks.hasByName( sBookMarkName ) Then &apos; есть ли такая закладка?
		Dim oBookMark : oBookMark = oBookMarks.getByName(sBookMarkName).getAnchor()
		oViewCursor.gotoRange(oBookMark, True) &apos; расширить выделение до начала закладки (если курсор правее конца закладки), или начала закладки (если курсор левее начала закладки)
		ExtendSelectTextToBookMark = True
	End If
End Function

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; возвращает массив с названиями зон поиска - помеченных закладками списка текста сносок (не по порядку их добавления. а по индексу их массива закладок)
Function GetFindListNoteZones( oBookMarks As Object, sConstBookMarkListNote As String ) As Array
	Dim l As Long
	Dim aBookMarks() As String
	For l=0 To oBookMarks.getCount()-1
		Dim b : b = oBookMarks.getByIndex( l )
		Dim s As String : s = b.Name
		If InStr( s, sConstBookMarkListNote ) = 1 Then
			AddNewItemToArray1( aBookMarks(), s )
		End If
	Next l
	GetFindListNoteZones = aBookMarks()
End Function

&apos; //////////////////////////////////////////////////////////////////////////
&apos; удаление всех закладок, соответствующих шаблону sBookMarkTemplate
Function DeleteAllBookMarkWithTemplate( oBookMarks As Object, sBookMarkTemplate As String ) As Integer
	Dim aBookMarks() As String : aBookMarks = GetFindListNoteZones( oBookMarks, sBookMarkTemplate )
	Dim l As Long
	For l=0 To UBound( aBookMarks() )
		_UnoDeleteBookMark( aBookMarks(l) )
		DeleteAllBookMarkWithTemplate = DeleteAllBookMarkWithTemplate+1
	Next l
End Function

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; расширение курсора от закладки 1 до конца закладки 2
Sub ExtendSelectTextToEndBookMark( oDoc As Object, oViewCursor As Object, sBookMarkStartName As String, oBookMarkEnd As Object )
	&apos; возвращаемся к закладке - началу текста сноски
	Dim b : b = oDoc.getBookmarks().getByName( sBookMarkStartName ).getAnchor()
	&apos; курсор - на начала закладки (текста сноски)
	oViewCursor.gotoRange(b.getStart(), False)
	&apos; расширяем выделение курсора до конца зоны поиска - блока текста сносок
	oViewCursor.gotoRange(oBookMarkEnd.getEnd(), True)
	&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
	_UnoDeleteBookMark( sBookMarkStartName )
	_UnoInsertBookmark( sBookMarkStartName )
End Sub

&apos;//////////////////////////////////////////////////////////////////////////////
&apos; 			Функции по работе с выделенным текстом
&apos;//////////////////////////////////////////////////////////////////////////////
&apos; есть ли выделение курсором. True - есть
Function IsSelection( oSel As Object ) As Boolean
	Dim oCursor : oCursor = ThisComponent.Text.CreateTextCursorByRange( oSel )
	If oCursor.IsCollapsed() Then &apos; ничего не выделено
		IsSelection = False
	Else
		IsSelection = True
	End If
End Function

&apos; //////////////////////////////////////////////////////////////////////////
&apos; сколько выделено областей текста
Function GetSelectionCount() As Long
	Dim lCount As Long : lCount = 0
	Dim oSels As Object : oSels = ThisComponent.getCurrentSelection()
	If Not IsNull(oSels) Then
		Dim lSelCount As Long : lSelCount = oSels.getCount()
		Dim l As Long
		For l = 0 To lSelCount - 1
			Dim oSel As Object : oSel = oSels.getByIndex(l)
			If IsSelection( oSel ) Then lCount = lCount+1
		Next l
	End If
	GetSelectionCount = lCount
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; возвращает &quot;реальную&quot; левую границу курсора (и для случая, если конец курсора находится раньше начала)
&apos; основано на коде Andrew Pitonyak
Function GetLeftMostCursor( oSel As Object ) As Object
	Dim oRange, oCursor
	If oSel.getText().compareRegionStarts( oSel.getEnd(), oSel ) &gt;= 0 Then
		oRange = oSel.getEnd()
	Else
		oRange = oSel.getStart()
	End If
	oCursor = oSel.getText().CreateTextCursorByRange( oRange )
	oCursor.goRight( 0, False )
	GetLeftMostCursor = oCursor
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; возвращает &quot;реальную&quot; правую границу курсора (и для случая, если конец курсора находится раньше начала)
&apos; основано на коде Andrew Pitonyak
Function GetRightMostCursor( oSel As Object ) As Object
	Dim oRange, oCursor
	If oSel.getText().compareRegionStarts( oSel.getEnd(), oSel ) &gt;= 0 Then
		oRange = oSel.getStart()
	Else
		oRange = oSel.getEnd()
	End If
	oCursor = oSel.getText().CreateTextCursorByRange( oRange )
	oCursor.goLeft( 0, False )
	GetRightMostCursor = oCursor
End Function

&apos; ///////////////////////////////////////////////////////////////////
&apos; Находится ли курсор внутри выделенной области?
&apos; основано на коде Andrew Pitonyak
Function IsAnythingSelected( oDoc As Object ) As Boolean
	IsAnythingSelected = False
	
	If IsNull( oDoc )		Then Exit Function
	Dim oSels : oSels = oDoc.getCurrentSelection() &apos;все выделения в тексте
	If IsNull( oSels )		Then Exit Function
	If oSels.getCount() = 0 Then Exit Function
	If oSels.getCount() &gt; 1 Then
		IsAnythingSelected = True
	Else
		Dim oSel	As Object : oSel	= oSels.getByIndex( 0 ) &apos;текущее выделение в тексте
		Dim oCursor As Object : oCursor = oSel.getText().CreateTextCursorByRange( oSel ) &apos;временный курсор
		If Not oCursor.IsCollapsed() Then IsAnythingSelected = True
	End If
End Function

&apos; ////////////////////////////////////////////////////////////////////////
&apos; Создать курсоры, охватывающие выбранные текстовые области.
&apos; основано на коде Andrew Pitonyak
Function CreateSelectedTextIterator( oDoc As Object, sPrompt As String, sMessTitle As String, oCurs() ) As Boolean
	CreateSelectedTextIterator = True
	
	Dim oLCurs &apos;Курсор левой границы текущего выделения
	Dim oRCurs &apos;Курсор правой границы текущего выделения
		
	If Not IsAnythingSelected(ThisComponent) Then
		If MsgBox( sBTEND.sNoSelectText &amp; chr(10) &amp; sPrompt, 1 + 32 + 256, sMessTitle ) = 1 Then
			oLCurs = oDoc.getText().createTextCursor()
			oLCurs.gotoStart( False )
			oRCurs = oDoc.getText().createTextCursor()
			oRCurs.gotoEnd( False )
			oCurs = DimArray( 0, 1 )
			oCurs( 0, 0 ) = oLCurs
			oCurs( 0, 1 ) = oRCurs
		Else
			oCurs = DimArray()
			CreateSelectedTextIterator = False
		End If
	Else
		Dim oSels		As Object	: oSels		= ThisComponent.getCurrentSelection() &apos; все выделения текста
		Dim lSelCount	As Long		: lSelCount = oSels.getCount() &apos;число выделенной области текста
		oCurs = DimArray( lSelCount - 1, 1 )
		Dim l As Long
		For l = 0 To lSelCount - 1
			Dim oSel As Object : oSel = oSels.getByIndex( l ) &apos; текущее выделение
			oLCurs = GetLeftMostCursor( oSel )
			oRCurs = GetRightMostCursor( oSel )
			oCurs( l, 0 ) = oLCurs
			oCurs( l, 1 ) = oRCurs
		Next l
	End If
End Function

&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;				Функции алгоритма простой генерации сносок
&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; для режима простой генерации сносок - левая часть регулярного выражения
Function GetRegStringForLeft( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringForLeft = &quot;\(&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringForLeft = &quot;\[&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringForLeft = &quot;\{&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringForLeft = &quot;&lt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringForLeft = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringForLeft = &quot;\\&quot;
		Case Else
			GetRegStringForLeft = &quot;\(&quot;
	End Select
End Function

&apos; для режима простой генерации сносок - правая часть регулярного выражения
Function GetRegStringForRight( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringForRight = &quot;\)&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringForRight = &quot;\]&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringForRight = &quot;\}&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringForRight = &quot;&gt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringForRight = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringForRight = &quot;\\&quot;
		Case Else
			GetRegStringForRight = &quot;\)&quot;
	End Select
End Function

&apos; простая генерация сносок
Sub BuildFootNoteSimple()
	Dim oCurs() As Object, l As Long
	If Not CreateSelectedTextIterator( ThisComponent, sBTEND.sProcessAllDoc, _
										sBTEND.sFindInSelected, oCurs() ) Then Exit Sub
	Dim lSel As Long : lSel = GetSelectionCount() &apos; число выделеннох фрагментов текста
	
	&apos; левая и правая часть регулярного выражения для поиска текста сноски
	Dim oLB		As Object : oLB		= oBuildFootEndNoteDlg.getControl( &quot;lblNSimpleFNInTextTemplate&quot; )
	Dim sLeft	As String : sLeft	= GetRegStringForLeft( oLB )
	Dim sRight	As String : sRight	= GetRegStringForRight( oLB )
	Dim lFound As Long : lFound = 0
	For l = LBound( oCurs() ) To UBound( oCurs() )
		lFound = lFound + BuildFootNoteSimpleWorker( ThisComponent, oCurs(l, 0), oCurs(l, 1), sLeft, sRight )
	Next l

	Dim sMess As String
	If lSel = 0 Then
		sMess = sBTEND.sProcessAllDocEnd &amp; chr(10)
	Else
		sMess = sBTEND.sProcessSelectedFragments &amp; &quot; &quot; &amp; lSel &amp; &quot;.&quot; &amp; chr(10)
	End If
	
	If lFound &gt; 0 Then
		MsgBox sMess &amp; sBTEND.sFootnotesGenerationCount &amp; &quot; &quot; &amp; lFound &amp; &quot;.&quot;, 64, sBTEND.sFootnotesGeneration
	Else
		MsgBox sMess &amp; sBTEND.sFootnotesNotGeneration &amp; chr(10) &amp; sBTEND.sNotFoundSelectedTextForTemplate, 64, sBTEND.sFootnotesGeneration
	End If
End Sub

Function BuildFootNoteSimpleWorker( oDoc As Object, oLCurs As Object, oRCurs As Object, sLeft As String, sRight As String ) As Long
	BuildFootNoteSimpleWorker = 0
	
	If IsNull(oLCurs) Or IsNull( oRCurs ) Or IsNull( oDoc ) Then Exit Function
	If oDoc.Text.compareRegionEnds( oLCurs, oRCurs ) &lt;= 0 Then Exit Function
	
	oLCurs.goRight( 0, False )
	Dim oViewCursor As Object : oViewCursor = oDoc.getCurrentController().getViewCursor()
	
	Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
	With vSearch
		.SearchString				= sLeft
		.SearchCaseSensitive		= False
		.SearchRegularExpression	= True
	End With

	Dim oBookMarks As Object : oBookMarks = oDoc.getBookmarks()
	
	&apos; удаляем служебные закладки, если они есть
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkSimple )
	
	Dim vFound As Variant : vFound = oDoc.findNext( oLCurs, vSearch )
	Do While Not IsNull( vFound )
		&apos; If Not vFound.hasElements() Then Exit Do
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFound.TextTable ) Then &apos; текст очередной сноски находится в таблице
				&apos; обрабатываем ячейки  таблицы
				Dim oTable			As Object	: oTable		= vFound.TextTable
				Dim aCellNames()	As String	: aCellNames	= oTable.getCellNames()
				Dim lCellCount		As Long		: lCellCount	= 0
				Do While lCellCount &lt;= UBound( aCellNames() )
					Dim oCell As Object	: oCell	= oTable.getCellByName( aCellNames( lCellCount ) )
					lCellCount = lCellCount+1
					If Not IsNull( vFound ) Then &apos; нашли
						&apos; обработка найденного текста сноски для простого режима генерации сноски
						&apos; переводим курсор на найденный текст сноски
						oViewCursor.gotoRange( vFound, False )
						&apos; ставим закладку - по ней потом найдем этот текст сноски
						_UnoInsertBookmark( sConstBookMarkSimple )
						If FindRightTemplate( oDoc, oRCurs, oViewCursor, oBookMarks, sRight ) Then
							BuildFootNoteSimpleWorker = BuildFootNoteSimpleWorker+1
						Else Exit Function
						End If
					End If
					vFound = oDoc.findNext( oCell.getStart(), vSearch )
				Loop
			ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; текст очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Просто игнорируем номер для сноски.
			Else &apos; просто текст
				If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &gt;= 0	Then &apos; если не вышли за правую границу или прямо на ней
					&apos; обработка найденного текста сноски для простого режима генерации сноски
					&apos; переводим курсор на найденный текст сноски
					oViewCursor.gotoRange( vFound, False )
					&apos; ставим закладку - по ней потом найдем этот текст сноски
					_UnoInsertBookmark( sConstBookMarkSimple )
					If FindRightTemplate( oDoc, oRCurs, oViewCursor, oBookMarks, sRight ) Then
						BuildFootNoteSimpleWorker = BuildFootNoteSimpleWorker+1
					End If
				End if
				vFound = oDoc.findNext( vFound.End, vSearch )
			End If
		End If
	Loop
End Function

&apos; поиск правой закрывающей скобки по шаблону
Function FindRightTemplate( oDoc As Object, oRCurs As Object, oViewCursor As Object, oBookMarks As Object, sRight As String )
	FindRightTemplate = False
	
	Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
	With vSearch
		.SearchString				= sRight
		.SearchCaseSensitive		= False
		.SearchRegularExpression	= True
	End With
	
	Dim vFound As Variant : vFound = oDoc.findNext( oViewCursor, vSearch )
	If Not IsNull( vFound ) Then
		&apos; If Not vFound.hasElements() Then Exit Do
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFound.TextTable ) Then &apos; текст очередной сноски находится в таблице
				&apos; обрабатываем ячейки  таблицы
				Dim oTable			As Object	: oTable		= vFound.TextTable
				Dim aCellNames()	As String	: aCellNames	= oTable.getCellNames()
				Dim lCellCount		As Long		: lCellCount	= 0
				Do While lCellCount &lt;= UBound( aCellNames() )
					Dim oCell As Object	: oCell	= oTable.getCellByName( aCellNames( lCellCount ) )
					lCellCount = lCellCount+1
					If Not IsNull( vFound ) Then &apos; нашли
						&apos; обработка найденного текста сноски для простого режима генерации сноски
						MakeFN( oDoc, vFound, oViewCursor, oBookMarks )
						FindRightTemplate = True
						Exit Function
					End If
				Loop
			ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; текст очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Просто игнорируем номер для сноски.
			Else &apos; просто текст
				If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &gt;= 0	Then &apos; если не вышли за правую границу или прямо на ней
					&apos; обработка найденного текста сноски для простого режима генерации сноски
					MakeFN( oDoc, vFound, oViewCursor, oBookMarks )
					FindRightTemplate = True
				End if
			End If
		End If
	End If
End Function

&apos; генерация сноски
Sub MakeFN( oDoc As Object, vFound As Variant, oViewCursor As Object, oBookMarks As Object )
	&apos; расширяем выделение курсора до конца найденного
	oViewCursor.gotoRange(vFound.getEnd(), True)
	&apos; удаляем и вставляем закладку на место найденного текста сноски
	&apos; по ней потом найдем этот текст для формирования соответствующего текста сноски
	_UnoDeleteBookMark( sConstBookMarkSimple )
	_UnoInsertBookmark( sConstBookMarkSimple )
	&apos; возвращаемся к закладке - началу текста сноски
	Dim b : b = oDoc.getBookmarks().getByName( sConstBookMarkSimple ).getAnchor()
	&apos; курсор - на начала закладки (текста сноски)
	oViewCursor.gotoRange(b.getStart(), False)
	oViewCursor.goRight( 1, False )
	oViewCursor.gotoRange( vFound.getEnd(), True )
	oViewCursor.goLeft( 1, True )
	&apos; вырезать выделенный текст сноски в буфер
	_UnoCut()
	&apos; переход курсора на временную закладку
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkSimple, True )
	&apos; очистить стиль - на случай верхнего регистра и т.д.
	ClearParaStyle()
	&apos; удалить выделенные остатки текста сноски, вставить очередную сноску, вставить текст сноски
	_UnoDelete() : _UnoInsertFootnote() : _UnoPaste()
	If oBookMarks.hasByName( sConstBookMarkSimple ) Then _UnoDeleteBookMark( sConstBookMarkSimple )
End Sub

&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;				Функции алгоритма сложной генерации сносок
&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; выделяем номер из строки 
Function GetNumberFromString( sString As String ) As String
	Dim i As Integer : Dim sNumber As String : sNumber = &quot;&quot;
	For i=1 To Len( sString )
		Dim sChar As String : sChar = Mid( sString, i, 1 )
		If IsNumeric( sChar ) Then sNumber = sNumber &amp; sChar
	Next i
	GetNumberFromString = sNumber
End Function

&apos; вставка закладки на место номера очередной сноски
&apos; возвращает:
&apos; -1 - номер примечания в тексте не найден - конец документа
&apos; 0 - вставка закладки для номера прмечания в ТЕКСТЕ
&apos; 1 - вставка закладки для номера прмечания в ТАБЛИЦЕ
&apos; 2 - номер прмечания в Текстовой ВРЕЗКЕ
Function InsertBookmarkToNumberFootNote( oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, _
										sRegFind As String, sConstBookMarkFNNumber As String, _
										sForLeft As String, sForRight As String ) As Integer
	&apos; sRegFind - строка поиска (с регулярными выражениями)
	&apos; oLCurs - начало зоны поиска номера очередной сноски
	&apos; oRCurs - конец зоны поиска номера очередной сноски
	InsertBookmarkToNumberFootNote = -1
	
	If IsNull(oViewCursor) Or IsNull(oDoc) Or IsNull(oLCurs) Or IsNull(oRCurs) Then Exit Function
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
	
	&apos; поиск с регулярными выражениями
	Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
	With vSearch
		.SearchRegularExpression = True
		.SearchString = sRegFind
	End With
	
	&apos; ищем заданный номер сноски в блоке текста сносок
	Dim vFound As Variant : vFound = oDoc.findNext( oLCurs.getStart(), vSearch )
	If Not IsNull( vFound ) Then &apos; нашли
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFound.TextTable ) Then &apos; номер очередной сноски находится в таблице
				&apos; обрабатываем ячейки  таблицы
				Dim oTable			As Object	: oTable		= vFound.TextTable
				Dim sTableName 		As String 	: sTableName	= oTable.getName() &apos; название таблицы
				Dim oBookMarks		As Object	: oBookMarks	= oDoc.getBookmarks()
				
				vFound = oDoc.findNext( oLCurs.getStart(), vSearch )
				Do While ( ( Not IsEmpty( vFound.TextTable ) ) )&apos;And vFound.TextTable.getName() = sTableName )
					&apos; пока не вышли за пределы таблицы или не перешли на другую таблицы
					If Not IsNull(vFound) Then &apos; нашли
						&apos; переводим курсор на конец найденного номера сноски в списке текста сносок
						oViewCursor.gotoRange( vFound, False )
						&apos; выделяем номер из строки
						Dim sNumber As String : sNumber = GetNumberFromString( vFound.getString() ) &apos; текст с номером очередной сноски

						Dim oBlockNoteZoneBookMark : oBlockNoteZoneBookMark = oBookMarks.getByName( sConstBookMarkListNote ).getAnchor()
						If IsNumberExistsInList( oDoc, oViewCursor, oBlockNoteZoneBookMark, sForLeft &amp; sNumber &amp; sForRight ) Then
							&apos; ставим закладку - по ней потом найдем этот номер сноски
							_UnoInsertBookmark( sConstBookMarkFNNumber )
							&apos; перевод курсора на начала закладки зоны поиска текста сносок
							oViewCursor.gotoRange( oBlockNoteZoneBookMark.getStart(), False )
							If InsertBookmarkToTextForFootNote( oDoc, oViewCursor, oBlockNoteZoneBookMark, sForLeft &amp; sNumber &amp; sForRight, sConstBookMarkFNText ) Then
								&apos; вставка найденного текста примечания вместо найденного по шаблону номера примечания
								InsertCurrentFootNote( oViewCursor, sConstBookMarkFNNumber )
								&apos; удаляем служебные сноски, если они есть
								If oBookMarks.hasByName( sConstBookMarkFNNumber )	Then _UnoDeleteBookMark( sConstBookMarkFNNumber )
								If oBookMarks.hasByName( sConstBookMarkFNText )		Then _UnoDeleteBookMark( sConstBookMarkFNText )
								lInsNotesCount = lInsNotesCount+1
							End If
						Else
							&apos; Сдвигаем верхнюю границу поиска в тексте на конец &amp;quot;пустого&amp;quot; номера примечания
							oViewCursor.collapseToEnd()
							oLCurs.collapseToEnd()
						End If
					End If
					vFound = oDoc.findNext( vFound.getEnd(), vSearch )
				Loop
				&apos; переводим курсор на конец найденного номера сноски в списке текста сносок
				oViewCursor.gotoRange( vFound, False )
				&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров сносок
				oLCurs.gotoRange( vFound, False )
				InsertBookmarkToNumberFootNote = 1
			ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; номер очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Просто игнорируем номер для сноски.
				InsertBookmarkToNumberFootNote = 2
				Exit Function
			Else &apos; просто текст
				If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &gt;= 0	Then &apos; если не вышли за правую границу или прямо на ней
					&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров сносок
					oLCurs.gotoRange( vFound, False )
					&apos; переводим курсор на конец найденного номера сноски в списке текста сносок
					oViewCursor.gotoRange( vFound, False )
					&apos; ставим закладку - по ней потом найдем этот номер сноски
					_UnoInsertBookmark( sConstBookMarkFNNumber )
					InsertBookmarkToNumberFootNote = 0
				End if
			End If
		End If
	End If
End Function

&apos; &quot;прыжок&quot; через таблицу
Function RoundTable( oDoc As Object, vSearch As Varian, vFound As Variant ) As Varinnt
	Do While Not IsEmpty( vFound.TextTable )
		vFound = oDoc.findNext( vFound.getEnd(), vSearch )
		&apos; на начало абзаца, иначе будет пропущенодин этот результат поиска, а он нужен
		vFound.gotoStartOfParagraph(False)
	Loop
	RoundTable = vFound
End Function

&apos; Есть ли заданный номер примечания в списке примечаний
&apos; sRegFind - строка поиска (с регулярными выражениями)
&apos; oBlockNoteZoneBookMark - закладка - зона поиска
Function IsNumberExistsInList( oDoc As Object, oViewCursor As Object, oBlockNoteZoneBookMark As Object, sRegFind As String ) As Boolean
	IsNumberExistsInList = False
	If IsNull(oViewCursor) Or IsNull(oDoc) Then Exit Function
	
	&apos; поиск с регулярными выражениями
	Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
	With vSearch
		.SearchRegularExpression = True
		.SearchString = sRegFind
	End With
	
	&apos; ищем заданный номер сноски в блоке текста сносок
	Dim vFound As Variant : vFound = oDoc.findNext( oBlockNoteZoneBookMark.getStart(), vSearch )
	&apos; ищем следующий текст сноски по следующему номеру сноски
	If Not IsNull(vFound) Then &apos; нашли
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; And IsEmpty( vFound.TextFrame ) Then &apos; сноски не обрабатываем
			If Not IsEmpty( vFound.TextTable ) Then &apos; пропускаем таблицу
				vFound = RoundTable( oDoc, vSearch, vFound )
				vFound = oDoc.findNext( vFound.getEnd(), vSearch )
			Else &apos; текст сноски - в тексте
				If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
				&apos; выделяем найденный номер сноски в блоке текста сносок
&apos;				oViewCursor.gotoRange( vFound, False )
				Do While  oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &gt;= 0
					&apos; мы все еще внутри зоны поиска... ищем следующий номер сноски в списке
					vSearch.SearchString = GetRegStringNFNInListForNextFind() &apos; для дальнейшего поиска согласно выбранного шаблона поиска номера сноски в списке сносок
					vFound = oDoc.findNext( vFound.getEnd(), vSearch )
					If Not IsNull(vFound) Then
						If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; Then &apos; сноски не обрабатываем
							If Not IsEmpty( vFound.TextTable ) Then &apos; текст сноски - в таблице
								&apos; пропускаем таблицу
								vFound = RoundTable( oDoc, vSearch, vFound )
							ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; текст сноски - в текстовой врезке
								&apos; не обрабатываем сноски
								Exit Function
							Else &apos; текст сноски - в тексте
								If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then &apos; вышли за правую границу или прямо на ней
									IsNumberExistsInList = True
									Exit Function
								Else &apos; мы еще на закладке
									IsNumberExistsInList = True
									Exit Function
								End If
							End If
						Else &apos; это скорее всего последняя сноска в блоке текста сносок (т.к. нашли очередную в тексте уже существующих сносок в OOo)
							IsNumberExistsInList = True
							Exit Function
						End If
					Else &apos; это скорее всего последняя сноска в блоке текста сносок (следующей не нашли)
						IsNumberExistsInList = True
						Exit Function
					End If
				Loop
			End If
		End If		
	Else
		&apos; два варианта - либо в искомой зоне нет абзацев с нумерацией, либо есть нумерованные списки.
	End If
End Function

&apos; вставка закладки на место текста для указанного номера сноски
&apos; sRegFind - строка поиска (с регулярными выражениями)
&apos; oBlockNoteZoneBookMark - закладка - зона поиска
Function InsertBookmarkToTextForFootNote( oDoc As Object, oViewCursor As Object, oBlockNoteZoneBookMark As Object, _
											sRegFind As String, sConstBookMarkFNText As String ) As Boolean
	InsertBookmarkToTextForFootNote = False
	If IsNull(oViewCursor) Or IsNull(oDoc) Then Exit Function
	
	&apos; поиск с регулярными выражениями
	Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
	With vSearch
		.SearchRegularExpression = True
		.SearchString = sRegFind
	End With
	
	&apos; ищем заданный номер сноски в блоке текста сносок
	Dim vFound As Variant : vFound = oDoc.findNext( oBlockNoteZoneBookMark.getStart(), vSearch )
	&apos; ищем следующий текст сноски по следующему номеру сноски
	If Not IsNull(vFound) Then &apos; нашли
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; And IsEmpty( vFound.TextFrame ) Then &apos; сноски не обрабатываем
			If Not IsEmpty( vFound.TextTable ) Then &apos; пропускаем таблицу
				vFound = RoundTable( oDoc, vSearch, vFound )
				vFound = oDoc.findNext( vFound.getEnd(), vSearch )
			Else &apos; текст сноски - в тексте
				If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
				&apos; выделяем найденный номер сноски в блоке текста сносок
				oViewCursor.gotoRange( vFound, False )
				&apos; удаляем найденный номер сноски
				_UnoDelete()
				&apos; ставим закладку - по ней потом найдем этот текст для формирования соответствующего текста сноски
				_UnoInsertBookmark( sConstBookMarkFNText )
				Do While  oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &gt;= 0
					&apos; мы все еще внутри зоны поиска... ищем следующий номер сноски в списке
					vSearch.SearchString = GetRegStringNFNInListForNextFind() &apos; для дальнейшего поиска согласно выбранного шаблона поиска номера сноски в списке сносок
					vFound = oDoc.findNext( vFound.getEnd(), vSearch )
					If Not IsNull(vFound) Then
						If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; Then &apos; сноски не обрабатываем
							If Not IsEmpty( vFound.TextTable ) Then &apos; текст сноски - в таблице
								&apos; пропускаем таблицу
								vFound = RoundTable( oDoc, vSearch, vFound )
							ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; текст сноски - в текстовой врезке
								&apos; не обрабатываем сноски
								Exit Function
							Else &apos; текст сноски - в тексте
								If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then &apos; вышли за правую границу или прямо на ней
									&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
									ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
									InsertBookmarkToTextForFootNote = True
									Exit Function
								Else &apos; мы еще на закладке
									&apos; идем на начало параграфа
									vFound.gotoStartOfParagraph(False)
									&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
									ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, vFound )
									InsertBookmarkToTextForFootNote = True
									Exit Function
								End If
							End If
						Else &apos; это скорее всего последняя сноска в блоке текста сносок (т.к. нашли очередную в тексте уже существующих сносок в OOo)
							&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
							ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
							InsertBookmarkToTextForFootNote = True
							Exit Function
						End If
					Else &apos; это скорее всего последняя сноска в блоке текста сносок (следующей не нашли)
						&apos; удаляем и вставляем закладку на место найденного текста сноски - по ней потом найдем этот текст для формирования соответствующего текста сноски
						ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
						InsertBookmarkToTextForFootNote = True
						Exit Function
					End If
				Loop
			End If
		End If		
	Else
		&apos; два варианта - либо в искомой зоне нет абзацев с нумерацией, либо есть нумерованные списки.
	End If
End Function

&apos; обработка списка текста сносок
Function ProcessingComplexFootNoteList( oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, oBookMarks As Object, _
									sConstBookMarkListNote As String, sConstBookMarkFNNumber As String, sConstBookMarkFNText As String, _
									sRegStringNFNInText As String, sForLeft As String, sForRight As String ) As Long
	ProcessingComplexFootNoteList = 0
	Do While ( oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &gt;= 0 ) &apos; пока левая граница зоны поиска номеров сносок не сравнялась или не перешла за правую
		Dim nValue As Integer
		nValue = InsertBookmarkToNumberFootNote( oDoc, oViewCursor, oLCurs, oRCurs, sRegStringNFNInText, sConstBookMarkFNNumber, sForLeft, sForRight )
		&apos; -1 - номер примечания в тексте не найден - конец документа
		&apos; 0 - вставка закладки для номера прмечания в ТЕКСТЕ
		&apos; 1 - вставка закладки для номера прмечания в ТАБЛИЦЕ
		&apos; 2 - номер прмечания в Текстовой ВРЕЗКЕ
		If nValue = -1 Then
			&apos; не нашди новый номер сноски ДО блока текста сносок (все ссылки на сноски обработали или их просто нет)
			ProcessingComplexFootNoteList = lInsNotesCount
			Exit Function
		ElseIf nValue = 0 Then &apos; номер очередного примечания - в тексте
			Dim oBookMark As Object	: oBookMark	= oBookMarks.getByName( sConstBookMarkFNNumber ).getAnchor()
			&apos; выделяем номер из строки
			Dim sNumber As String : sNumber = GetNumberFromString( oBookMark.getString() ) &apos; текст с номером очередной сноски

			&apos; ищем текст для сноски этого номера в блоке текста сносок
			Dim oBlockNoteZoneBookMark : oBlockNoteZoneBookMark = oBookMarks.getByName(sConstBookMarkListNote).getAnchor()
			&apos; перевод курсора на начала закладки зоны поиска текста сносок
			oViewCursor.gotoRange( oBlockNoteZoneBookMark.getStart(), False )
			If InsertBookmarkToTextForFootNote( oDoc, oViewCursor, oBlockNoteZoneBookMark, sForLeft &amp; sNumber &amp; sForRight, sConstBookMarkFNText ) Then
				&apos; вставка найденного текста примечания вместо найденного по шаблону номера примечания
				InsertCurrentFootNote( oViewCursor, sConstBookMarkFNNumber )
				lInsNotesCount = lInsNotesCount+1 &apos; только для текста (для таблиц - счетчик собирает данные отдельно)
			Else &apos; для найденного номера сноски не нашли текст.
				&apos; переход курсора на закладку - номер сноски
				GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
				&apos; Сдвигаем верхнюю границу поиска в тексте на конец &quot;пустого&quot; номера примечания
				oViewCursor.collapseToEnd()
				oLCurs.collapseToEnd()
			End If
			&apos; удаляем служебные сноски, если они есть
			If oBookMarks.hasByName( sConstBookMarkFNNumber )	Then _UnoDeleteBookMark( sConstBookMarkFNNumber )
			If oBookMarks.hasByName( sConstBookMarkFNText )		Then _UnoDeleteBookMark( sConstBookMarkFNText )
		Else &apos; номер очередного примечания - в Таблице или во Врезке - ничего не делаем - для Таблицы все уже обработано, а для Врезки - игнорируем
		End If
	Loop
	ProcessingComplexFootNoteList = lInsNotesCount
End Function

&apos; вставка найденного текста примечания вместо найденного по шаблону номера примечания
Sub InsertCurrentFootNote( oViewCursor As Object, sConstBookMarkFNNumber As String )
	&apos; вырезать выделенный текст сноски в буфер
	_UnoCut()
	&apos; переход курсора на закладку - номер сноски
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
	&apos; очистить стиль - на случай верхнего регистра и т.д.
	ClearParaStyle()
	&apos; удалить выделенный номер сноски, вставить очередную сноску, вставить текст сноски и удаляем последний пустой абзац
	_UnoDelete() : _UnoInsertFootnote() : _UnoPaste() : _UnoSwBackspace()
	&apos; переводим курсор в зону поиска очередного номера сноски
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; сложная генерация сносок - поиск для соответствующего номера сноски &quot;его&quot; текста в области текста, заданного закладками
Sub BuildFootNoteComplex()
	&apos; зона поиска номеров сносок: oLCurs - левая верхняя граница; oRCurs - правая нижняя граница
	&apos; зона поика текста для заданного номера сноски: закладки с именами производными от sConstBookMarkListNote
	Dim oDoc		As Object	: oDoc			= ThisComponent
	Dim oViewCursor As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
	Dim oBookMarks	As Object	: oBookMarks	= oDoc.getBookmarks()
	Dim oLCurs		As Object	: oLCurs		= oDoc.Text.createTextCursor()
	oLCurs.gotoStart( False ) &apos; на начало документа
	
	&apos; удаляем служебные закладки, если они есть
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkFNNumber )
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkFNText )
	
	&apos; получаем зоны для обработки сносок
	Dim aBookMarks() As String : aBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkListNote )
	If UBound( aBookMarks() ) = -1 Then
		MsgBox sBTEND.sNotFoundBookmarkZoneForNoteList, 64, sBTEND.sFootnotesGeneration
		Exit Sub	
	End If
	
	Dim sRegStringNFNInText As String : sRegStringNFNInText = GetRegStringNFNInText()
	&apos; левая и правая часть регулярного выражения для 1-го поиска номера сноски в списке сносок
	Dim sLeft	As String : sLeft	= GetRegStringNFNInListForLeft()
	Dim sRight	As String : sRight	= GetRegStringNFNInListForRight()

	Dim lFindCount As Long : lFindCount = 0
	If oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextAfterEachChapter&quot; ).State Then
		&apos; режим: Блок текста сносок - после каждой главы
		Dim l As Long
		For l=0 To UBound( aBookMarks() )
			Dim oRCurs As Object : oRCurs = oBookMarks.getByName( aBookMarks(l) ).getAnchor()
			lFindCount = lFindCount + ProcessingComplexFootNoteList( oDoc, oViewCursor, oLCurs, oRCurs, oBookMarks, aBookMarks(l), _
																	sConstBookMarkFNNumber, sConstBookMarkFNText, sRegStringNFNInText, sLeft, sRight ) 
			&apos; перемещаем курсор в новую зону поиска - после обработанного блока текста сносок ( после закладки sConstBookMarkListNote )
			GoToViewCursorToBookMark( oViewCursor, aBookMarks(l), False )
			&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров сносок
			oLCurs.gotoRange( oRCurs.getEnd(), False )
			oLCurs.goRight( 1, False )
		Next l
	Else
		&apos; режим: Все блоки текста сносок - в конце книги
		Dim sMT As String : sMT = &quot;: &quot; &amp; sBTEND.sAllListsTextFootNotesInBookEnd
		&apos;проверка - есть ли хоть одна закладка L-зоны
		Dim aLBookMarks() As String : aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
		If UBound( aLBookMarks() ) = -1 Then
			MsgBox sBTEND.sNotFoundBookmarkZoneForNoteNumber, 64, sBTEND.sFootnotesGeneration &amp; sMT
			Exit Sub	
		End If
		
		&apos;проверка - соответствует ли число закладок L-зоны числу закладок списков текста сносок
		If UBound( aLBookMarks() ) &lt;&gt; UBound( aBookMarks() ) Then
			MsgBox sBTEND.sBuildFootNoteComplexVerify, 64, sBTEND.sFootnotesGeneration &amp; sMT
			Exit Sub	
		End If
		
		&apos; получаем L-зоны для поиска номеров сносок
		For l=0 To UBound( aBookMarks() )
			&apos; левая граница поиска номеров сносок - текстовый курсор на очередной закладке (начало главы и т.д.)
			Dim oLBMs As Object : oLBMs = oBookMarks.getByName( aLBookMarks(l) ).getAnchor()
			oLCurs.gotoRange( oLBMs, False )
			&apos; правая граница - следующая левая грпница или начало 1-й закладки списка сносок
			If l &lt; UBound( aBookMarks() ) Then
				oRCurs = oBookMarks.getByName( aLBookMarks(l+1) ).getAnchor()
			Else
				oRCurs = oBookMarks.getByName( aBookMarks(0) ).getAnchor()
			End If
			&apos; перемещаем курсор в новую зону поиска
			GoToViewCursorToBookMark( oViewCursor, aLBookMarks(l), False )
			lFindCount = lFindCount + ProcessingComplexFootNoteList( oDoc, oViewCursor, oLCurs, oRCurs, oBookMarks, aBookMarks(l), _
																	sConstBookMarkFNNumber, sConstBookMarkFNText, sRegStringNFNInText, sLeft, sRight )
		Next l
		oViewCursor.goRight( 1, False )
	End If

	If oBuildFootEndNoteDlg.GetControl( &quot;cboxDelBookMarks&quot; ).State Then
		&apos; удаляем служебные закладки, если они есть
		DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkNZoneNote )
		DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkListNote )
	End If
	
	MsgBox sBTEND.sDocumentIsProcessing &amp; chr(10) &amp;_
			sBTEND.sFootnotesGenerationCount &amp; &quot; &quot; &amp; lFindCount &amp; &quot;.&quot;, 64, sBTEND.sFootnotesGeneration
End Sub

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от выбора шаблона номера сноски в тексте
Function GetRegStringNFNInText() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInTextTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringNFNInText = &quot;\([:digit:]+\)&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringNFNInText = &quot;\[[:digit:]+\]&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringNFNInText = &quot;\{[:digit:]+\}&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringNFNInText = &quot;&lt;[:digit:]+&gt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringNFNInText = &quot;/[:digit:]+/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringNFNInText = &quot;\\[:digit:]+\\&quot;
		Case Else
			GetRegStringNFNInText = &quot;\([:digit:]+\)&quot;
	End Select
End Function

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от выбора шаблона номера сноски в списке сносок
Function GetRegStringNFNInListForNextFind() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^[:digit:]+\.&quot;
		Case 1 &apos; (x). Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\([:digit:]+\)\.&quot;
		Case 2 &apos; [x]. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\[[:digit:]+\]\.&quot;
		Case 3 &apos; {x}. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\{[:digit:]+\}\.&quot;
		Case 4 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^&lt;[:digit:]+&gt;\.&quot;
		Case 5 &apos; /x/. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^/[:digit:]+/\.&quot;
		Case 6 &apos; \x\. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\\[:digit:]+\\\.&quot;
		Case Else
			GetRegStringNFNInListForNextFind = &quot;^[:digit:]+\.&quot;
	End Select
End Function

Function GetRegStringNFNInListForLeft() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x. Текст ...
			GetRegStringNFNInListForLeft = &quot;^&quot;
		Case 1 &apos; (x). Текст ...
			GetRegStringNFNInListForLeft = &quot;^\(&quot;
		Case 2 &apos; [x]. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\[&quot;
		Case 3 &apos; {x}. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\{&quot;
		Case 4 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForLeft = &quot;^&lt;&quot;
		Case 5 &apos; /x/. Текст ...
			GetRegStringNFNInListForLeft = &quot;^/&quot;
		Case 6 &apos; \x\. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\\&quot;
		Case Else
			GetRegStringNFNInListForLeft = &quot;^&quot;
	End Select
End Function

Function GetRegStringNFNInListForRight() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x. Текст ...
			GetRegStringNFNInListForRight = &quot;\.&quot;
		Case 1 &apos; (x). Текст ...
			GetRegStringNFNInListForRight = &quot;\)\.&quot;
		Case 2 &apos; [x]. Текст ...
			GetRegStringNFNInListForRight = &quot;\]\.&quot;
		Case 3 &apos; {x}. Текст ...
			GetRegStringNFNInListForRight = &quot;\}\.&quot;
		Case 4 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForRight = &quot;&gt;\.&quot;
		Case 5 &apos; /x/. Текст ...
			GetRegStringNFNInListForRight = &quot;/\.&quot;
		Case 6 &apos; \x\. Текст ...
			GetRegStringNFNInListForRight = &quot;\\\.&quot;
		Case Else
			GetRegStringNFNInListForRight = &quot;\.&quot;
	End Select
End Function

&apos; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;			Инструменты для работы со служебными закладками
&apos; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; вставка очередной закладки для зоны поиска номера сносок в тексте
Sub InsertFindFootNoteNumberZoneBookMark()
	&apos; инициализация сообщений работы со сноскамиа в зависимости от локали
	InitBuildTootEndNoteMessage()
	
	Dim sMessTitle As String : sMessTitle = sBTEND.sInsertBookmarkForNumberNoteZone
	Dim l As Long : l = GetSelectionCount()
	If l = 0 Then
		&apos; Нет ни одной выделенной области текста
		_UnoInsertBookmark( sConstBookMarkNZoneNote )&apos; шаблон закладки для зоны поиска номера сноски
		MsgBox sBTEND.sInsertedBookmarkForNumberNoteZone, 64, sMessTitle
		Exit Sub
	ElseIf l &gt;= 1 Then
		MsgBox sBTEND.sNotInsertedBookmarkForNumberNoteZone, 64, sMessTitle
		Exit Sub
	End If
End Sub

&apos; вставка очередной закладки для зоны поиска текста сносок (списол текста сносок)
Sub InsertFindFootNoteTextListBookMark()
	&apos; инициализация сообщений работы со сноскамиа в зависимости от локали
	InitBuildTootEndNoteMessage()
	
	Dim l As Long : l = GetSelectionCount()
	If l = 0 Then
		&apos; Нет ни одной выделенной области текста
		_UnoInsertBookmark( sConstBookMarkListNote )
		MsgBox sBTEND.sNotFoundSymbol, 64, sBTEND.sInsertBookmarkForListNoteZone
		Exit Sub
	ElseIf l &gt; 1 Then
		MsgBox sBTEND.sSelected &amp; &quot; &quot; &amp; l &amp; &quot; &quot; &amp; sBTEND.sSelecteOnlyOneTextZone, _
				64, sBTEND.sInsertBookmarkForListNoteZone
		Exit Sub
	Else &apos; теперь можно вставить закладку
		&apos; проверка, есть ли эта же закладка на этом же месте...
		Dim oDoc			As Object	: oDoc			= ThisComponent
		Dim oSels			As Object	: oSels			= ThisComponent.getCurrentSelection()
		Dim oSel 			As Object	: oSel			= oSels.getByIndex(0)
		Dim oLCurs			As Object	: oLCurs		= GetLeftMostCursor(oSel)
		Dim oRCurs			As Object	: oRCurs		= GetRightMostCursor(oSel)
		Dim oBookMarks		As Object	: oBookMarks	= oDoc.getBookmarks()
		Dim aBookMarks()	As String	: aBookMarks	= GetFindListNoteZones( oBookMarks, sConstBookMarkListNote ) &apos; список закладок, удовлетворяющих шаблону sConstBookMarkListNote

		Dim bBookMarkInSel As Boolean : bBookMarkInSel = False &apos; флаг - есть ли на выделенном месте закладка, соответствующая шаблону

		If UBound( aBookMarks() ) = -1 Then
			&apos; Нет ни одной выделенной закладкой области, содержащей список текста сносок. Можно вставлять!
			bBookMarkInSel = False
		ElseIf UBound( aBookMarks() ) &gt;= 0 Then &apos; есть одна закладка такая же, но возможно с номером
			&apos; сравниваем ее границы с границей выделения
			For l=0 To UBound( aBookMarks() )
				Dim oBookMark	As Object : oBookMark	= oBookMarks.getByName( aBookMarks(l) )
				Dim oAnchor		As Object : oAnchor		= oBookMark.getAnchor()
				Dim s			As String : s			= oBookMark.Name
				If InStr( s, sConstBookMarkListNote ) = 1 Then
					If oDoc.Text.compareRegionEnds( oLCurs, oAnchor.getStart() ) = 0 And _
						oDoc.Text.compareRegionEnds( oRCurs, oAnchor.getEnd() ) = 0 Then
						bBookMarkInSel = True
						MsgBox sBTEND.sNotInsertedBookmarkForListNoteZone &amp; chr(10) &amp; _
								sBTEND.sSelectedZoneCoincideExsistBookmark &amp; &quot; &quot; &amp; aBookMarks(l), 64, sBTEND.sInsertBookmarkForListNoteZone
					ElseIf oDoc.Text.compareRegionEnds( oLCurs, oAnchor.getStart() ) &gt;= 0 And _
						oDoc.Text.compareRegionEnds( oRCurs, oAnchor.getEnd() ) &lt;= 0 Then
						bBookMarkInSel = True
						MsgBox sBTEND.sNotInsertedBookmarkForListNoteZone &amp; chr(10) &amp; _
								sBTEND.sSelectedZoneTopBottomOverlapExsistBookmark &amp; &quot; &quot; &amp; aBookMarks(l), 64, sBTEND.sInsertBookmarkForListNoteZone
					ElseIf oDoc.Text.compareRegionEnds( oLCurs, oAnchor.getStart() ) &lt;= 0 And _
						oDoc.Text.compareRegionEnds( oRCurs, oAnchor.getEnd() ) &gt;= 0 Then
						bBookMarkInSel = True
						MsgBox sBTEND.sNotInsertedBookmarkForListNoteZone &amp; chr(10) &amp; _
								sBTEND.sSelectedZoneInsideExsistBookmark &amp; &quot; &quot; &amp; aBookMarks(l), 64, sBTEND.sInsertBookmarkForListNoteZone
					ElseIf ( oDoc.Text.compareRegionEnds( oLCurs, oAnchor.getStart() ) &gt; 0 And _
						oDoc.Text.compareRegionEnds( oRCurs, oAnchor.getStart() ) &lt; 0 ) Or _
						( oDoc.Text.compareRegionEnds( oLCurs, oAnchor.getEnd() ) &gt; 0 And _
						oDoc.Text.compareRegionEnds( oRCurs, oAnchor.getEnd() ) &lt; 0 ) Then
						bBookMarkInSel = True
						MsgBox sBTEND.sNotInsertedBookmarkForListNoteZone &amp; chr(10) &amp; _
								sBTEND.sSelectedZonePartlyCoincideExsistBookmark &amp; &quot; &quot; &amp; aBookMarks(l), 64, sBTEND.sInsertBookmarkForListNoteZone
					&apos;Else &apos;выделение никак ни касается своими границами закладки-шаблона (&quot;пустое&quot; место).
						&apos;bBookMarkInSel = False не ставим, т.к. оно уже стоит выше, в определении флага,
						&apos;а здесь это False приведет на очередной иетерации цикла, если закладка не касается выделения,
						&apos;что предыдущее соответсвие закладки шаблону станет недействительным!!!!!
					End If
				Else &apos;выделение не соответствует закладке-шаблону
					bBookMarkInSel = False
				End If
			Next l
		End If
		If Not bBookMarkInSel Then
			&apos; На этом месте документа нет закладки-шаблона для списка текста сносок. Можно вставлять!
			_UnoInsertBookmark( sConstBookMarkListNote )
			MsgBox sBTEND.sInsertedBookmarkForListNoteZone, 64, sBTEND.sInsertBookmarkForListNoteZone
		End If
	End If
End Sub

&apos; удаляем служебные закладки, если они есть
Sub DeleteAllWorkFootNoteBookMark()
	&apos; инициализация сообщений работы со сноскамиа в зависимости от локали
	InitBuildTootEndNoteMessage()

	If MsgBox( sBTEND.sDeleteBookmarksQuestion &amp; chr(10), _
				1 + 32 + 256, sBTEND.sDeleteBookmarks ) = 1 Then
		Dim oBookMarks As Object : oBookMarks = ThisComponent.getBookmarks()
		Dim nN As Integer : nN = DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkNZoneNote )	&apos; закладка - зона поиска номера сноски
		Dim nL As Integer : nL = DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkListNote )	&apos; закладка - зона поиска списка текста сносок
		If nN=0 And nL=0 Then
			MsgBox sBTEND.sNotFoundNoteBookmark, 64, sBTEND.sDeleteBookmarks
		Else
			MsgBox sBTEND.sDeletedSearchingZoneBookmark &amp; chr(10) &amp; sBTEND.sNoteNumbers &amp; &quot; &quot; &amp; nN &amp; chr(10) &amp; sBTEND.sNoteText &amp; &quot; &quot; &amp; nL, 64, sBTEND.sDeleteBookmarks
		End If
	End If
End Sub

&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; 		работа контролов диалога генерации сносок
&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; запуск диалога генерации сносок
Sub StartBuildFootEndNoteDlg()
	DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	oBuildFootEndNoteDlg = CreateUnoDialog( DialogLibraries.OOoFBTools.BuildFootEndNoteDlg )

	&apos; инициализация диалога генерации сносок в зависимости от локали
	InitBuildFootEndNoteDlg()
	
	Dim aNFNInTextList() As String
	aNFNInTextList() = Array(&quot;... &quot; &amp; sBTEND.sText &amp; &quot; (x) ...&quot;, _
							&quot;... &quot; &amp; sBTEND.sText &amp; &quot; [x] ...&quot;, _
							&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {x} ...&quot;, _
							&quot;... &quot; &amp; sBTEND.sText &amp; &quot; &lt;x&gt; ...&quot;, _
							&quot;... &quot; &amp; sBTEND.sText &amp; &quot; /x/ ...&quot;, _
							&quot;... &quot; &amp; sBTEND.sText &amp; &quot; \x\ ...&quot;)
	Dim aNFNInListList() As String
	aNFNInListList() = Array(&quot;x. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;(x). &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;[x]. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;{x}. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;&lt;x&gt;. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;/x/. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
							&quot;\x\. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;)
	
	&apos; файл настроек BuildFootEndNoteDlg
	
	With oBuildFootEndNoteDlg.Model
		.lblNSimpleFNInTextTemplate.StringItemList	= aNFNInTextList()
		.lblNFNInTextTemplate.StringItemList 		= aNFNInTextList()
		.lblNFNInListTemplate.StringItemList		= aNFNInListList()
		.Height	= 100
		.Width	= 270
	End With
	
	&apos; Настройки По умолчанию - в контролы
	SetBuildFootEndNoteDlgSettingDefault()
	
	&apos; ситаем положение диалога из файла настроек
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getUserPath() &amp; sConstBuildFootEndNoteDlgSettings, oBuildFootEndNoteDlg, nX, nY )
	oBuildFootEndNoteDlg.setPosSize( nX, nY, 100, 270, com.sun.star.awt.PosSize.POS )
	
	ControlModeEnabled()
	
	oBuildFootEndNoteDlg.execute()
End Sub

Sub SetBuildFootEndNoteDlgSettingDefault
	&apos; Установка настроек по умолчанию в контролы
	oBuildFootEndNoteDlg.GetControl( &quot;optbtnSimpleFootNote&quot; ).State = 0
	oBuildFootEndNoteDlg.GetControl( &quot;optbtnComplexFootNote&quot; ).State = 1
	oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextAfterEachChapter&quot; ).State = 1
	oBuildFootEndNoteDlg.GetControl( &quot;optbtnAllChaptersFNTextAtEndOf&quot; ).State = 0
	Dim oLB As Object
	oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNSimpleFNInTextTemplate&quot; )
	oLB.SelectItemPos( 0, True )
	oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInTextTemplate&quot; )
	oLB.SelectItemPos( 0, True )
	oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	oLB.SelectItemPos( 0, True )
End Sub

Sub ControlModeEnabled()
	If oBuildFootEndNoteDlg.Model.optbtnComplexFootNote.State Then
		oBuildFootEndNoteDlg.GetControl(&quot;lblComplexFNInText&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;lblComplexFNInList&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;lblNFNInTextTemplate&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;lblNFNInListTemplate&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;optbtnFNTextAfterEachChapter&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;optbtnAllChaptersFNTextAtEndOf&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;cboxDelBookMarks&quot;).Enable = True
		
		oBuildFootEndNoteDlg.GetControl(&quot;lblSimpleFN&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;lblNSimpleFNInTextTemplate&quot;).Enable = False
	Else
		oBuildFootEndNoteDlg.GetControl(&quot;lblComplexFNInText&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;lblComplexFNInList&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;lblNFNInTextTemplate&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;lblNFNInListTemplate&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;optbtnFNTextAfterEachChapter&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;optbtnAllChaptersFNTextAtEndOf&quot;).Enable = False
		oBuildFootEndNoteDlg.GetControl(&quot;cboxDelBookMarks&quot;).Enable = False
		
		oBuildFootEndNoteDlg.GetControl(&quot;lblSimpleFN&quot;).Enable = True
		oBuildFootEndNoteDlg.GetControl(&quot;lblNSimpleFNInTextTemplate&quot;).Enable = True
	End If
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; генерация сносок в зависимости от режима (простой или сложный)
Sub BuildFootNote()
	oBuildFootEndNoteDlg.endExecute()
	&apos; сохранение настроек
	SaveSettings( getUserPath() &amp; sConstBuildFootEndNoteDlgSettings, oBuildFootEndNoteDlg )
	
	If oBuildFootEndNoteDlg.GetControl( &quot;optbtnSimpleFootNote&quot; ).State Then
		&apos; Простой режим генерации сносок
		BuildFootNoteSimple()
	ElseIf oBuildFootEndNoteDlg.GetControl( &quot;optbtnComplexFootNote&quot; ).State Then
		&apos; Сложный режим генерации сносок
		BuildFootNoteComplex()
	End If
	
End Sub

&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; 		работа контролов диалога преобразования номера сносок
&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; запуск диалога преобразования номеров примечаний в верхнем индексе по шаблону
Sub StartFootNoteLinkTransDlg()
	DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	oFootNoteLinkTransDlg = CreateUnoDialog( DialogLibraries.OOoFBTools.FootNoteLinkTransDlg )

	&apos; инициализация диалога преобразования номеров примечаний в верхнем индексе по шаблону в зависимости от локали
	InitFootNoteLinkTransDlg()
	
	Dim aList() As String
	aList() = Array(&quot;... &quot; &amp; sBTEND.sText &amp; &quot; (x) ...&quot;, _
					&quot;... &quot; &amp; sBTEND.sText &amp; &quot; [x] ...&quot;, _
					&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {x} ...&quot;, _
					&quot;... &quot; &amp; sBTEND.sText &amp; &quot; &lt;x&gt; ...&quot;, _
					&quot;... &quot; &amp; sBTEND.sText &amp; &quot; /x/ ...&quot;, _
					&quot;... &quot; &amp; sBTEND.sText &amp; &quot; \x\ ...&quot;)

	With oFootNoteLinkTransDlg.Model
		.lboxFNLTrans.StringItemList = aList()
		.Height	= 50
		.Width	= 238
	End With
	
	&apos; Настройки По умолчанию - в контролы
	SetFootNoteLinkTransDlgSettingDefault
	
	&apos; ситаем положение диалога из файла настроек
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getUserPath() &amp; sConstFootNoteLinkTransDlgSettingsSettings, oFootNoteLinkTransDlg, nX, nY )
	oFootNoteLinkTransDlg.setPosSize( nX, nY, 50, 238, com.sun.star.awt.PosSize.POS )
	
	oFootNoteLinkTransDlg.execute()
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Установка настроек по умолчанию в контролы
Sub SetFootNoteLinkTransDlgSettingDefault
	Dim oLB As Object
	oLB = oFootNoteLinkTransDlg.getControl( &quot;lboxFNLTrans&quot; )
	oLB.SelectItemPos( 0, True )
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; генерация сносок в зависимости от режима (простой или сложный)
Sub TransformationFootNote()
	oFootNoteLinkTransDlg.endExecute()
	&apos; сохранение настроек
	SaveSettings( getUserPath() &amp; sConstFootNoteLinkTransDlgSettingsSettings, oFootNoteLinkTransDlg )

	Dim oProgressBar : oProgressBar = ThisComponent.CurrentController.StatusIndicator
	oProgressBar.start( sBTEND.sNoteTransforming, ThisComponent.ParagraphCount )
	
	&apos; обход всего документа
	Dim lCount As Long : lCount = TextParser( oProgressBar )
	If lCount() &gt; 0 Then
		MsgBox sBTEND.sFoundNUpNote &amp; &quot; &quot; &amp; lCount, 64, sBTEND.sNUpNoteTransforming
	Else
		MsgBox sBTEND.sNotFoundNUpNote, 64, sBTEND.sNUpNoteTransforming
	End If
	oProgressBar.end
End Sub

&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;				Функции алгоритма преобразования номеров сносок в верхнем индексе в вид по шаблону
&apos;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; преобразование номеров сносок в верхнем индексе в вид по шаблону
Function TextParser( oProgressBar ) As Long
	Dim nCharEscapementHeight As Integer : nCharEscapementHeight = 0
	Dim oLB		As Object : oLB		= oFootNoteLinkTransDlg.getControl( &quot;lboxFNLTrans&quot; )
	Dim sLeft	As String : sLeft	= GetStringLeft( oLB )
	Dim sRight	As String : sRight	= GetStringRight( oLB )
	
	Dim lCur		As Long : lCur = 0 &apos; текущее положение прогрессбара
	Dim lFindCount	As Long : lFindCount = 0
	Dim oParEnum As Object : oParEnum = ThisComponent.getText().createEnumeration() &apos;Счетчик, используемый для перебора параграфов
	Do While oParEnum.hasMoreElements()
		Dim oPar As Object : oPar = oParEnum.nextElement() &apos;Перебираемый параграф
		&apos; сначала ищем таблицы
		If oPar.supportsService(&quot;com.sun.star.text.TextTable&quot;) Then
			&apos; парсер таблицы
			&apos; обрабатываем ячейки  таблицы
			Dim aCellNames()	As String	: aCellNames = oPar.getCellNames()
			Dim lCellCount		As Long		: lCellCount = 0
			Do While lCellCount &lt;= UBound( aCellNames() )
				Dim oCell As Object	: oCell	= oPar.getCellByName( aCellNames( lCellCount ) )
				lFindCount = lFindCount + CellParaParser( oCell, sLeft, sRight )
				lCellCount = lCellCount + 1
			Loop
		ElseIf oPar.supportsService(&quot;com.sun.star.text.Paragraph&quot;) Then
			Dim oSectEnum As Object : oSectEnum = oPar.createEnumeration() &apos;Счетчик, используемый для перебора текстовых разделов
			Dim sPara As String : sPara = &quot;&quot;
			Do While oSectEnum.hasMoreElements()
				Dim oSect As Object : oSect = oSectEnum.nextElement() &apos;Перебиремый текстовый раздел (section)			
				If oSect.TextPortionType = &quot;Text&quot; Then
					&apos; парсер текстового абзаца
					If ParaParser( oSect, nCharEscapementHeight ) Then &apos; это - число в верхнем индексе
						lFindCount = lFindCount + 1
						&apos; преобразуем в шаблонный вид
						oSect.CharEscapementHeight = nCharEscapementHeight
						oSect.CharEscapement = 0
						oSect.setString( sLeft &amp; oSect.getString() &amp; sRight )
					End If
				End If
			Loop
		End If
		oProgressBar.setValue( lCur )
		lCur = lCur+1
	Loop
	TextParser = lFindCount
End Function

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; поиск символов в верхнем регистре в абзацах ячейки таблицы
Function CellParaParser( oCell As Object, sLeft as String, sRight as String ) As Long
	On Error Resume Next
	Dim nCharEscapementHeight As Integer : nCharEscapementHeight = 0
	Dim lFindCount As Long : lFindCount = 0
	Dim oCellParEnum : oCellParEnum = oCell.createEnumeration()
	Do While oCellParEnum.hasMoreElements()
		Dim oCellPar : oCellPar = oCellParEnum.nextElement()
		Dim oWordEnum : oWordEnum = oCellPar.createEnumeration()
		Do While oWordEnum.hasMoreElements()
			Dim oWord : oWord = oWordEnum.nextElement()
			If oWord.TextPortionType = &quot;Text&quot; Then
				&apos; парсер текстового абзаца
				If ParaParser( oWord, nCharEscapementHeight ) Then &apos; это - число в верхнем индексе
					lFindCount = lFindCount + 1
					&apos; преобразуем в шаблонный вид
					oWord.CharEscapementHeight = nCharEscapementHeight
					oWord.CharEscapement = 0
					oWord.setString( sLeft &amp; oWord.getString() &amp; sRight )
				End If
			End If
		Loop
	Loop
	CellParaParser = lFindCount
End Function

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; поиск символов в верхнем регистре в абзаце
Function ParaParser( oSect As Object, nCharEscapementHeight As Integer ) As Boolean
	ParaParser = False
	If oSect.CharEscapement &gt; 0 Then
		If IsNumeric( oSect.getString() ) Then
			ParaParser = True
		End If
	Else
		nCharEscapementHeight = oSect.CharEscapementHeight &apos; для предыдущего слова
	End If
End Function

&apos; для режима преобразования - левая часть
Function GetStringLeft( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetStringLeft = &quot;(&quot;
		Case 1 &apos; ... текст [x]
			GetStringLeft = &quot;[&quot;
		Case 2 &apos; ... текст {x}
			GetStringLeft = &quot;{&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetStringLeft = &quot;&lt;&quot;
		Case 4 &apos; ... текст /x/
			GetStringLeft = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetStringLeft = &quot;\&quot;
		Case Else
			GetStringLeft = &quot;(&quot;
	End Select
End Function

&apos; для режима преобразования - правая часть
Function GetStringRight( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetStringRight = &quot;)&quot;
		Case 1 &apos; ... текст [x]
			GetStringRight = &quot;]&quot;
		Case 2 &apos; ... текст {x}
			GetStringRight = &quot;}&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetStringRight = &quot;&gt;&quot;
		Case 4 &apos; ... текст /x/
			GetStringRight = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetStringRight = &quot;\&quot;
		Case Else
			GetStringRight = &quot;)&quot;
	End Select
End Function

</script:module>