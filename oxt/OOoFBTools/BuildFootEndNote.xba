<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="BuildFootEndNote" script:language="StarBasic">REM  *****  BASIC  *****

Option Explicit

Public Const sConstBookMarkSimpleLeft	As String	= &quot;_ooo_ocr_tc_foot_note_simple_left_&quot;	&apos; временная закладка левого символа
Public Const sConstBookMarkSimpleRight	As String	= &quot;_ooo_ocr_tc_foot_note_simple_right_&quot;	&apos; временная закладка правого символа
Public Const sConstBookMarkSimple		As String	= &quot;_ooo_ocr_tc_foot_note_simple_&quot;		&apos; временная закладка на текст сноски

Public Const sConstBookMarkNZoneNote	As String	= &quot;_ooo_ocr_tc_foot_note_number_zone_&quot;	&apos; закладка - зона поиска номера сноски
Public Const sConstBookMarkListNote		As String	= &quot;_ooo_ocr_tc_foot_note_list_zone_&quot;	&apos; закладка - зона поиска списка текста сносок
Public Const sConstBookMarkFNNumber		As String	= &quot;_ooo_ocr_tc_foot_note_find_number_&quot;	&apos; закладка на найденный номер сноски
Public Const sConstBookMarkFNText		As String	= &quot;_ooo_ocr_tc_foot_note_find_text_&quot;	&apos; закладка на найденный текст сноски, указанного номера

Const sConstBuildFootEndNoteDlgSettings				As String = &quot;BuildFootEndNoteDlgSettings.txt&quot;
Const sConstFootNoteLinkTransDlgSettingsSettings	As String = &quot;FootNoteLinkTransDlgSettings.txt&quot;

Private oBuildFootEndNoteDlg	As Object
Private	oFootNoteLinkTransDlg	As Object
Private lInsNotesCount			As Long

Private bIsFootNoteMode			As Boolean &apos; режим работы Генератора: True - как Генератор Сносок, False - как Генератор внутренних ссылок

Type tTestDataRepeat
	sFind As String &apos; повторяющийся номер примечания
	lCount As Long 	&apos; сколько раз повторяется
End Type

Type tTestDataFlags
	nZoneNumber							As Integer	&apos; Номер Зоны поиска (Глава + ее Список примечаний)
	nCountFindNumbersInText				As Integer	&apos; Число найденных номеров Примечаний в Тексте, удовлетворяющий шаблону поиска
	nCountFindNumbersInList				As Integer	&apos; Число найденных номеров Примечаний в Списке, удовлетворяющий шаблону поиска
	nTestRepeatingNumbersInText			As Integer	&apos; Повторяющиеся номера в Тексте
	nTestRepeatingNumbersInList			As Integer	&apos; Повторяющиеся номера в Списке
	nTestAbsentNumbersInText			As Integer	&apos; Отсутствующие номера в Тексте
	nTestAbsentNumbersInList			As Integer	&apos; Отсутствующие номера в Списке
	nTestAbsentNumbersFromTextInList	As Integer	&apos; Отсутствующие номера из Текста в Списке
	nTestAbsentNumbersFromListInText	As Integer	&apos; Отсутствующие номера из Списка в Тексте
	sLBookmark							As String	&apos; название закладки для Главы книги
	sRBookMark							As String	&apos; название закладки для Списка примечаний этой главы
End Type

&apos;============================================================================================================================
&apos;								Функции алгоритма ПРОСТОЙ генерации сносок
&apos;============================================================================================================================
&apos; для режима простой генерации сносок - левая часть регулярного выражения
Function GetRegStringForLeft( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringForLeft = &quot;\(&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringForLeft = &quot;\[&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringForLeft = &quot;\{&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringForLeft = &quot;&lt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringForLeft = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringForLeft = &quot;\\&quot;
		Case 6 &apos; ... текст ((x))
			GetRegStringForLeft = &quot;\(\(&quot;
		Case 7 &apos; ... текст (((x)))
			GetRegStringForLeft = &quot;\(\(\(&quot;
		Case 8 &apos; ... текст {{x}}
			GetRegStringForLeft = &quot;\{\{&quot;
		Case 9 &apos; ... текст {{{x}}}
			GetRegStringForLeft = &quot;\{\{\{&quot;
		Case 10 &apos; ... текст [[x]]
			GetRegStringForLeft = &quot;\[\[&quot;
		Case 11 &apos; ... текст [[[x]]]
			GetRegStringForLeft = &quot;\[\[\[&quot;
		Case 12 &apos; ... текст {(x)}
			GetRegStringForLeft = &quot;\{\(&quot;
		Case Else
			GetRegStringForLeft = &quot;\(&quot;
	End Select
End Function

&apos; для режима простой генерации сносок - правая часть регулярного выражения
Function GetRegStringForRight( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringForRight = &quot;\)&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringForRight = &quot;\]&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringForRight = &quot;\}&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringForRight = &quot;&gt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringForRight = &quot;/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringForRight = &quot;\\&quot;
		Case 6 &apos; ... текст ((x))
			GetRegStringForRight = &quot;\)\)&quot;
		Case 7 &apos; ... текст (((x)))
			GetRegStringForRight = &quot;\)\)\)&quot;
		Case 8 &apos; ... текст {{x}}
			GetRegStringForRight = &quot;\}\}&quot;
		Case 9 &apos; ... текст {{{x}}}
			GetRegStringForRight = &quot;\}\}\}&quot;
		Case 10 &apos; ... текст [[x]]
			GetRegStringForRight = &quot;\]\]&quot;
		Case 11 &apos; ... текст [[[x]]]
			GetRegStringForRight = &quot;\]\]\]&quot;
		Case 12 &apos; ... текст {(x)}
			GetRegStringForRight = &quot;\)\}&quot;
		Case Else
			GetRegStringForRight = &quot;\)&quot;
	End Select
End Function

&apos; простая генерация сносок
Sub BuildFootNoteSimple()
	Dim lSel As Long : lSel = GetSelectionCount() &apos; число выделеннох фрагментов текста
	If lSel = -1 Then
		MsgBox sBTEND.sNotSelectedText, 64, sBTEND.sFootnotesGeneration
		Exit Sub
	End If
	
	Dim oCurs() As Object, l As Integer
	If Not CreateSelectedTextIterator( ThisComponent, sBTEND.sNoSelectText &amp; chr(10) &amp; sBTEND.sProcessAllDoc, _
										sBTEND.sFindInSelected, oCurs() ) Then Exit Sub
	&apos; левая и правая часть регулярного выражения для поиска текста сноски
	Dim oLB		As Object : oLB		= oBuildFootEndNoteDlg.getControl( &quot;lblNSimpleFNInTextTemplate&quot; )
	Dim sLeft	As String : sLeft	= GetRegStringForLeft( oLB )
	Dim sRight	As String : sRight	= GetRegStringForRight( oLB )
	Dim lFound As Long : lFound = 0
	For l = LBound( oCurs() ) To UBound( oCurs() )
		lFound = lFound + BuildFootNoteSimpleWorker( ThisComponent, oCurs(l, 0), oCurs(l, 1), sLeft, sRight )
	Next l

	Dim sMess As String
	If lSel = 0 Then
		sMess = sBTEND.sProcessAllDocEnd &amp; chr(10)
	Else
		sMess = sBTEND.sProcessSelectedFragments &amp; &quot; &quot; &amp; lSel &amp; &quot;.&quot; &amp; chr(10)
	End If
	
	If lFound &gt; 0 Then
		MsgBox sMess &amp; sBTEND.sFootnotesGenerationCount &amp; &quot; &quot; &amp; lFound &amp; &quot;.&quot;, 64, sBTEND.sFootnotesGeneration
	Else
		MsgBox sMess &amp; sBTEND.sFootnotesNotGeneration &amp; chr(10) &amp; sBTEND.sNotFoundSelectedTextForTemplate, 64, sBTEND.sFootnotesGeneration
	End If
End Sub

Function BuildFootNoteSimpleWorker( ByRef oDoc As Object, ByRef oLCurs As Object, ByRef oRCurs As Object, sLeft As String, sRight As String ) As Long
	BuildFootNoteSimpleWorker = 0
	
	If IsNull( oLCurs ) Or IsNull( oRCurs ) Or IsNull( oDoc ) Then Exit Function
	If oDoc.Text.compareRegionEnds( oLCurs, oRCurs ) &lt;= 0 Then Exit Function
	
	Dim oViewCursor	As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
	Dim vSearchLeft	As Variant	: vSearchLeft	= oDoc.createSearchDescriptor()
	With vSearchLeft
		.SearchString				= sLeft
		.SearchCaseSensitive		= False
		.SearchRegularExpression	= True
	End With

	Dim oBookMarks As Object : oBookMarks = oDoc.getBookmarks()
	
	&apos; удаляем служебные закладки, если они есть
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkSimple )
	
	Dim vFoundLeft As Variant : vFoundLeft = oDoc.findNext( oLCurs, vSearchLeft )
	Do While Not IsNull( vFoundLeft )
		&apos; If Not vFound.hasElements() Then Exit Do
		If vFoundLeft.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFoundLeft.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFoundLeft.TextTable ) Then &apos; текст очередной сноски находится в таблице
				&apos; перепрыгиваем таблицу - не обрабатываем ее (пока не знаю как сделать проверку на выход за oRCurs из таблицы - вылетает ошибка )
				oViewCursor.gotoRange( vFoundLeft, False )
				CursorAfterCurrentTextTable( oViewCursor )
				vFoundLeft = oDoc.findNext( oViewCursor.getStart(), vSearchLeft )
			ElseIf Not IsEmpty( vFoundLeft.TextFrame ) Then &apos; текст очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Перепрыгиваем врезку - не обрабатываем ее
				With oViewCursor
					.gotoRange( vFoundLeft, False )
					.gotoRange( vFoundLeft.TextFrame.getEnd(), False )
				End With
				vFoundLeft = oDoc.findNext( oViewCursor.getStart(), vSearchLeft )
			Else &apos; просто текст
				&apos; переводим курсор на найденный текст сноски
				If vFoundLeft.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFoundLeft.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
					If oDoc.Text.compareRegionEnds( vFoundLeft, oRCurs ) &gt;= 0 Then &apos; если не вышли за правую границу или прямо на ней
						&apos; переводим курсор на найденный текст сноски
						oViewCursor.gotoRange( vFoundLeft, False )
						&apos; ставим закладку для найденного левого идентификатора текста сноски
						_UnoInsertBookmark( sConstBookMarkSimpleLeft )
						Dim vFoundRight As Variant
						&apos; поиск правого идентификатора текста сноски
						vFoundRight = BuildFootNoteSimpleFindRight( oDoc, vFoundLeft, oRCurs, sRight )
						If Not IsNull( vFoundRight ) Then
							ExtendViewCursorFromStartCursor1ToEndCursor2( oViewCursor, vFoundLeft, vFoundRight )
							&apos; ставим закладку - по ней потом найдем этот текст сноски
							_UnoInsertBookmark( sConstBookMarkSimple )
							&apos; генерация сноски
							MakeFN( oDoc, oViewCursor, oBookMarks, Len( sLeft ) )
							BuildFootNoteSimpleWorker = BuildFootNoteSimpleWorker+1 &apos; число обработанных сносок
						End If
						&apos; удаляем временные закладки для левого и правого идектификаторов текста сноски
						If oBookMarks.hasByName( sConstBookMarkSimpleLeft ) Then _UnoDeleteBookMark( sConstBookMarkSimpleLeft )
						If oBookMarks.hasByName( sConstBookMarkSimpleRight ) Then _UnoDeleteBookMark( sConstBookMarkSimpleRight )
					Else Exit Function
					End if
				End If
				&apos; переводим курсор на найденный текст сноски
				oViewCursor.gotoRange( vFoundLeft, False )
				vFoundLeft = oDoc.findNext( vFoundLeft.getEnd(), vSearchLeft )
			End If
		Else Exit Function &apos; в сноске - не обрабатываем
		End If
	Loop
End Function

&apos; поиск правого идентификатора теста сноски
Function BuildFootNoteSimpleFindRight( ByRef oDoc As Object, ByRef vFoundLeft As Object, ByRef oRCurs As Object, sRight As String ) As Object
	If IsNull( vFoundLeft ) Or IsNull( oRCurs ) Or IsNull( oDoc ) Then Exit Function
	If oDoc.Text.compareRegionEnds( vFoundLeft, oRCurs ) &lt;= 0 Then Exit Function
	
	Dim oViewCursor		As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
	Dim vSearchRight	As Variant	: vSearchRight	= oDoc.createSearchDescriptor()
	With vSearchRight
		.SearchString				= sRight
		.SearchCaseSensitive		= False
		.SearchRegularExpression	= True
	End With

	Dim oBookMarks	As Object	: oBookMarks	= oDoc.getBookmarks()
	Dim vFoundRight	As Variant	: vFoundRight	= oDoc.findNext( vFoundLeft.getEnd(), vSearchRight )
	Do While Not IsNull( vFoundRight )
		&apos; If Not vFound.hasElements() Then Exit Do
		If vFoundRight.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFoundRight.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFoundRight.TextTable ) Then &apos; текст очередной сноски находится в таблице
				&apos; перепрыгиваем таблицу - не обрабатываем ее (пока не знаю как сделать проверку на выход за oRCurs из таблицы - вылетает ошибка )
				oViewCursor.gotoRange( vFoundRight, False )
				CursorAfterCurrentTextTable( oViewCursor )
				vFoundRight = oDoc.findNext( oViewCursor.getStart(), vSearchRight )
			ElseIf Not IsEmpty( vFoundRight.TextFrame ) Then &apos; текст очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Перепрыгиваем врезку - не обрабатываем ее
				With oViewCursor
					.gotoRange( vFoundRight, False )
					.gotoRange( vFoundRight.TextFrame.getEnd(), False )
				End With
				vFoundRight = oDoc.findNext( oViewCursor.getStart(), vSearchRight )
			Else &apos; просто текст
				&apos; переводим курсор на найденный текст сноски
				If vFoundRight.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFoundRight.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
					If oDoc.Text.compareRegionEnds( vFoundRight, oRCurs ) &gt;= 0 Then &apos; если не вышли за правую границу или прямо на ней
						&apos; переводим курсор на найденный текст сноски
						oViewCursor.gotoRange( vFoundRight, False )
						&apos; ставим закладку для найденного правого идентификатора текста сноски
						_UnoInsertBookmark( sConstBookMarkSimpleRight )
						&apos; возвращаем найденное место правого идентификатора
						BuildFootNoteSimpleFindRight = vFoundRight
						Exit Function
					Else Exit Function
					End if
				End If
				&apos; переводим курсор на найденный текст сноски
				oViewCursor.gotoRange( vFoundRight, False )
				vFoundRight = oDoc.findNext( vFoundRight.getEnd(), vSearchRight )
			End If
		Else Exit Function &apos; в сноске - не обрабатываем
		End If
	Loop
End Function

&apos; генерация сноски
Sub MakeFN( ByRef oDoc As Object, ByRef oViewCursor As Object, ByRef oBookMarks As Object, LeftLen As Integer )
	Dim symNumber As Integer
	If LeftLen = 2 Then
		symNumber = 1
	ElseIf LeftLen = 4 Then
		symNumber = 2
	ElseIf LeftLen = 6 Then
		symNumber = 3
	Else
		symNumber = 1
	End If
	
	Dim b : b = oDoc.getBookmarks().getByName( sConstBookMarkSimple ).getAnchor()
	&apos; курсор - на начала закладки (текста сноски)
	With oViewCursor
		.gotoRange(b.getStart(), False)
		.goRight( symNumber, False )
		.gotoRange( b.getEnd(), True )
		.goLeft( symNumber, True )
	End With
	&apos; вырезать выделенный текст сноски в буфер
	_UnoCut()
	&apos; переход курсора на временную закладку
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkSimple, True )
	&apos; очистить стиль символа - на случай верхнего регистра и т.д.
	ClearSymbolFormat()
	&apos; удалить выделенные остатки текста сноски, вставить очередную сноску, вставить текст сноски
	_UnoDelete() : _UnoInsertFootnote() : _UnoPaste()
	If oBookMarks.hasByName( sConstBookMarkSimple ) Then _UnoDeleteBookMark( sConstBookMarkSimple )
End Sub

&apos;============================================================================================================================
&apos;									Функции алгоритма СЛОЖНОЙ генерации сносок
&apos;============================================================================================================================
&apos; выделяем номер из строки 
Function GetNumberFromString( sString As String ) As String
	Dim i As Integer : Dim sNumber As String : sNumber = &quot;&quot;
	For i=1 To Len( sString )
		Dim sChar As String : sChar = Mid( sString, i, 1 )
		If IsNumeric( sChar ) Then sNumber = sNumber &amp; sChar
	Next i
	GetNumberFromString = Trim( sNumber )
End Function

&apos; часто после OCR многозначные цифры (100, 235...) получаются не одним числов, а составным (1 и 00; 23 и 5). Это нарушает работу Генератора
&apos; поэтому &quot;собираем&quot; такие число в &quot;одно&quot; : делаем выбор справа всех цифр в верхнем индексе до символа, или до числа не в верхнем индексе
Function ExtendFoundToAllUpIndexNumbersInCurrentFootNoteNumber( ByRef vFound )
	Dim txtTempCursor As Object : txtTempCursor = vFound.Text.createTextCursorByRange( vFound.End )
	Dim s As String
	txtTempCursor.collapseToEnd()
	Do While txtTempCursor.goRight( 1, True )
		s = Right( txtTempCursor.getString(), 1 )
		If ( s &lt;&gt; &quot; &quot; And s &lt;&gt; &quot;	&quot; ) And txtTempCursor.CharEscapement &gt; 0 Then &apos; пропускаем пробел и табуляция
			If  IsNumeric( s ) Then
				vFound.goRight( 1, True )
			Else
				Exit Do
			End If
		Else
			Exit Do
		End If
		txtTempCursor.collapseToEnd()
	Loop
	ExtendFoundToAllUpIndexNumbersInCurrentFootNoteNumber = vFound
End Function

&apos; поиск следующей цифры в верхнем индексе в документе
Function FindNumbersUpIndexText( oLCurs ) As Variant
	&apos; задаем поиск верхнего индекса
	Dim SrchAttributes(0) As New com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name	= &quot;CharEscapement&quot;
  
	Dim oDesc : oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchRegularExpression = True
		.SetSearchAttributes(SrchAttributes())
		.SearchStyles = True
		.ValueSearch = False
		.SearchString = &quot;[:digit:]+&quot;
	End With
	
	Dim vFound : vFound = ThisComponent.findNext( oLCurs, oDesc )
	If Not IsNull(vFound) Then
		If vFound.CharEscapement &lt; 0 Then
			Do
				vFound = ThisComponent.findNext( vFound.getEnd(), oDesc )
				If IsNull( vFound ) Then Exit Do
			Loop While ( vFound.CharEscapement &lt; 0 )
		End If
		&apos; часто после OCR многозначные цифры (100, 235...) получаются не одним числов, а составным (1 и 00; 23 и 5). Это нарушает работу Генератора
		&apos; поэтому &quot;собираем&quot; такие число в &quot;одно&quot; : делаем выбор справа всех цифр в верхнем индексе до символа, или до числа не в верхнем индексе
		vFound = ExtendFoundToAllUpIndexNumbersInCurrentFootNoteNumber( vFound )
	End If
	FindNumbersUpIndexText = vFound
End Function

&apos; поиск следующей цифры в верхнем индексе в Списке примечаний
Function FindNumbersUpIndexList( oLCurs ) As Variant
	&apos; задаем поиск верхнего индекса
	Dim SrchAttributes(0) As New com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name	= &quot;CharEscapement&quot;
  
	Dim oDesc : oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchRegularExpression = True
		.SetSearchAttributes(SrchAttributes())
		.SearchStyles = True
		.ValueSearch = False
		.SearchString = &quot;^[:space:]*[:digit:]+&quot; &apos; &quot;^[:digit:]+&quot;
	End With
	
	Dim vFound : vFound = ThisComponent.findNext( oLCurs, oDesc )
	If Not IsNull(vFound) Then
		If vFound.CharEscapement &lt; 0 Then
			Do
				vFound = ThisComponent.findNext( vFound.getEnd(), oDesc )
				If IsNull( vFound ) Then Exit Do
			Loop While ( vFound.CharEscapement &lt; 0 )
		End If
		&apos; часто после OCR многозначные цифры (100, 235...) получаются не одним числов, а составным (1 и 00; 23 и 5). Это нарушает работу Генератора
		&apos; поэтому &quot;собираем&quot; такие число в &quot;одно&quot; : делаем выбор справа всех цифр в верхнем индексе до символа, или до числа не в верхнем индексе	
		vFound = ExtendFoundToAllUpIndexNumbersInCurrentFootNoteNumber( vFound )
	End If
	FindNumbersUpIndexList = vFound
End Function

&apos; вставка закладки на место номера очередного примечания в Тексте
&apos; возвращает:
&apos; -1 - номер примечания в тексте не найден - конец документа
&apos; 0 - вставка закладки для номера прмечания в ТЕКСТЕ
&apos; 1 - вставка закладки для номера прмечания в ТАБЛИЦЕ
Function InsertBookmarkToNumberFootNote( bIsFootNoteMode As Boolean, oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, _
										sRegFind As String, sConstBookMarkListNote As String, sConstBookMarkFNNumber As String ) As Integer
	&apos; sRegFind - строка поиска (с регулярными выражениями)
	&apos; если sRegFind=&quot;NumbersUpIndex&quot;, то это - &quot;... цифры в верхнем индексе ...&quot;
	&apos; oLCurs - начало зоны поиска номера очередной сноски
	&apos; oRCurs - конец зоны поиска номера очередной сноски
	InsertBookmarkToNumberFootNote = -1
	
	If IsNull(oViewCursor) Or IsNull(oDoc) Or IsNull(oLCurs) Or IsNull(oRCurs) Then Exit Function
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
	
	&apos; поиск с регулярными выражениями
	Dim vSearch As Variant
	Dim bModeNumbersUpIndex As Boolean : bModeNumbersUpIndex = False
	If sRegFind = &quot;NumbersUpIndex&quot; Then bModeNumbersUpIndex = True
	
	&apos; ищем заданный номер примечания в блоке текста примечаний
	Dim vFound As Variant 
	
	If bModeNumbersUpIndex = True Then
		If bIsFootNoteMode = True Then &apos; режим генерации сносок
			vFound = FindNumbersUpIndexText( oLCurs.getStart() )
		Else &apos; режим генерации внутренних ссылок
			vFound = FindNumbersUpIndexText( oLCurs.getEnd() )
			If oDoc.Text.compareRegionEnds( vFound, oRCurs.getStart() ) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
		End If
	Else
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchRegularExpression = True
			.SearchString = sRegFind
		End With
		If bIsFootNoteMode = True Then &apos; режим генерации сносок
			vFound = oDoc.findNext( oLCurs.getStart(), vSearch )
		Else &apos; режим генерации внутренних ссылок
			vFound = oDoc.findNext( oLCurs.getEnd(), vSearch )
		End If
	End If
	
	If Not IsNull( vFound ) Then &apos; нашли
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
			If Not IsEmpty( vFound.TextTable ) Then &apos; номер очередного примечания находится в таблице
				&apos; перепрыгиваем таблицу - не обрабатываем ее (пока не знаю как сделать проверку на выход за oRCurs из таблицы - вылетает ошибка )
				oViewCursor.gotoRange( vFound, False )
				CursorAfterCurrentTextTable( oViewCursor )
				&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
				oLCurs.gotoRange( oViewCursor, False )
				If bModeNumbersUpIndex = True Then
					vFound = FindNumbersUpIndexText( oViewCursor.getStart() )
				Else
					vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
				End If
				InsertBookmarkToNumberFootNote = 1
			ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; номер очередной сноски находится в текстовой врезке
				&apos; OOo не позволяет вставлять сноску в текстовую врезку. Ничего ни делаем - Просто игнорируем номер для сноски.
				oViewCursor.gotoRange( vFound.TextFrame.getEnd(), False )
&apos;				oLCurs.gotoRange( oViewCursor, False )
				If bModeNumbersUpIndex = True Then
					vFound = FindNumbersUpIndexText( oViewCursor.getStart() )
				Else
					vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
				End If
			Else &apos; просто текст
				On Error GoTo ErrorHandler &apos; в случай выхода на текст сноски
				If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &gt;= 0	Then &apos; если не вышли за правую границу или прямо на ней
					&apos; переводим курсор на конец найденного номера примечания в списке текста примечаний
					oViewCursor.gotoRange( vFound, False )
					&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
					oLCurs.gotoRange( vFound, False )
					&apos; ставим закладку - по ней потом найдем этот номер примечания
					_UnoInsertBookmark( sConstBookMarkFNNumber )
					InsertBookmarkToNumberFootNote = 0
				End if
			End If
		End If
	End If
ErrorHandler:
End Function

&apos; вставка закладки на место текста для указанного номера примечания в Списке
&apos; sRegFind - строка поиска (с регулярными выражениями)
&apos; oBlockNoteZoneBookMark - закладка - зона поиска
Function InsertBookmarkToTextForFootNote( bIsFootNoteMode As Boolean, nZoneNumber As Integer, _
											oDoc As Object, oViewCursor As Object, oBlockNoteZoneBookMark As Object, _
											sForLeft As String, sNumber As String, sForRight As String, sConstBookMarkFNText As String, _
											sBMHyperlink As String ) As Boolean
	InsertBookmarkToTextForFootNote = False
	If IsNull(oViewCursor) Or IsNull(oDoc) Then Exit Function
	
	&apos; поиск с регулярными выражениями
	Dim sRegFind As String : sRegFind = sForLeft &amp; sNumber &amp; sForRight
	Dim vSearch As Variant
	Dim bModeNumbersUpIndex As Boolean : bModeNumbersUpIndex = False
	If InStr( sRegFind, &quot;NumbersUpIndex&quot; ) &gt; 0 Then
		bModeNumbersUpIndex = True
	Else
		bModeNumbersUpIndex = False
	End If
	
	&apos; ищем заданный номер примечания в блоке текста примечаний
	Dim vFound As Variant 
	
	If bModeNumbersUpIndex = True Then
		If bIsFootNoteMode = True Then &apos; Режим генерации сносок
			vFound = FindNumbersUpIndexList( oBlockNoteZoneBookMark.getStart() )
		Else &apos; генерация гиперссылок
			&apos; поиск СЛЕДУЮЩЕГО номера в Списке, а не первого встречного
			vFound = FindNumbersUpIndexList( oBlockNoteZoneBookMark.getStart() )
			If Not IsNull(vFound) And vFound.getString() &lt;&gt; sNumber Then
				Do
					vFound = FindNumbersUpIndexList( vFound.getEnd() )
					If IsNull( vFound ) Then Exit Do
				Loop While ( vFound.getString() &lt;&gt; sNumber )
			End If
		End If
	Else
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchRegularExpression = True
			.SearchString = sRegFind
		End With
		vFound = oDoc.findNext( oBlockNoteZoneBookMark.getStart(), vSearch )
	End If
	
	&apos; ищем следующий текст примечания по следующему номеру примечания
	If Not IsNull(vFound) Then &apos; нашли
		&apos;Если режим - цыфра в верхнем индексе, то проверяем совпадение найденного номера в Тексте и в Списке примечаний.
		If bModeNumbersUpIndex = True Then
			If sNumber &lt;&gt; vFound.getString Then
				Exit Function
			End If
		End If
	
		If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; And IsEmpty( vFound.TextFrame ) Then &apos; сноски не обрабатываем
			If Not IsEmpty( vFound.TextTable ) Then &apos; пропускаем таблицу
				&apos; перепрыгиваем таблицу - не обрабатываем ее (пока не знаю как сделать проверку на выход за oRCurs из таблицы - вылетает ошибка )
				oViewCursor.gotoRange( vFound, False )
				CursorAfterCurrentTextTable( oViewCursor )
				If bModeNumbersUpIndex = True Then
					vFound = FindNumbersUpIndexList( oViewCursor.getStart() )
				Else
					vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
				End If
			Else &apos; текст примечания - в тексте документа
				If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
				&apos; выделяем найденный номер примечания в блоке текста примечаний
				oViewCursor.gotoRange( vFound, False )
				If bIsFootNoteMode = True Then &apos; Режим генерации сносок
					&apos; удаляем найденный номер примечания
					_UnoDelete()
					&apos; ставим закладку - по ней потом найдем этот текст для формирования соответствующего текста примечания
					_UnoInsertBookmark( sConstBookMarkFNText )
				Else &apos; Режим генерации внутренних ссылок
					&apos; проверка в позиции oViewCursor - есть ли закладка с таким же именем, если есть - то не ставим, 
					&apos; если нет - то ставим закладку - для ссылки на нее
					Dim oBookMarks As Object : oBookMarks = oDoc.getBookmarks()
					Dim nIter As Integer, bExsist As Boolean : bExsist = False
					For nIter=0 To oBookMarks.getCount()-1
						If oBookMarks.getByIndex( nIter ).Name = sBMHyperlink Then
							bExsist = True : Exit For
						End If
					Next nIter
					If bExsist = False Then _UnoInsertBookmark( sBMHyperlink )
				End If
				Do While  oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &gt;= 0
					&apos; мы все еще внутри зоны поиска... ищем следующий номер примечания в списке
					If bModeNumbersUpIndex = True Then
						vFound = FindNumbersUpIndexList( vFound.getEnd() )
					Else
						vSearch.SearchString = GetRegStringNFNInListForNextFind() &apos; для дальнейшего поиска согласно выбранного шаблона поиска номера сноски в списке сносок
						vFound = oDoc.findNext( vFound.getEnd(), vSearch )
					End If
				
					If Not IsNull(vFound) Then
						If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot; Then &apos; сноски не обрабатываем
							If Not IsEmpty( vFound.TextTable ) Then &apos; текст примечания - в таблице
								&apos; перепрыгиваем таблицу - не обрабатываем ее (пока не знаю как сделать проверку на выход за oRCurs из таблицы - вылетает ошибка )
								oViewCursor.gotoRange( vFound, False )
								CursorAfterCurrentTextTable( oViewCursor )
								If bModeNumbersUpIndex = True Then
									vFound = FindNumbersUpIndexList( oViewCursor.getStart() )
								Else
									vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
								End If
								vFound.gotoStartOfParagraph( False )
							ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; текст примечания - в текстовой врезке
								&apos; не обрабатываем сноски
								Exit Function
							Else &apos; текст сноски - в тексте
								If oDoc.Text.compareRegionEnds( vFound.getStart(), oBlockNoteZoneBookMark.getEnd() ) &lt;= 0 Then &apos; вышли за правую границу или прямо на ней
									If bIsFootNoteMode = True Then &apos; Режим генерации сносок
										&apos; удаляем и вставляем закладку на место найденного текста примечания - по ней потом найдем этот текст для формирования соответствующего текста примечания
										ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
									End If
									InsertBookmarkToTextForFootNote = True
									Exit Function
								Else &apos; мы еще на закладке
									&apos; идем на начало параграфа
									vFound.gotoStartOfParagraph( False )
									If bIsFootNoteMode = True Then &apos; Режим генерации сносок
										&apos; удаляем и вставляем закладку на место найденного текста примечания - по ней потом найдем этот текст для формирования соответствующего текста примечания
										ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, vFound )
									End If
									InsertBookmarkToTextForFootNote = True
									Exit Function
								End If
							End If
						Else &apos; это скорее всего последнее примечание в блоке текста примечаний (т.к. нашли очередную в тексте уже существующих примечаний в OOo)
							If bIsFootNoteMode = True Then &apos; Режим генерации сносок
								&apos; удаляем и вставляем закладку на место найденного текста примечания - по ней потом найдем этот текст для формирования соответствующего текста примечания
								ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
							End If
							InsertBookmarkToTextForFootNote = True
							Exit Function
						End If
					Else &apos; это скорее всего последнее примечание в блоке текста примечаний (следующей не нашли)
						If bIsFootNoteMode = True Then &apos; Режим генерации сносок
							&apos; удаляем и вставляем закладку на место найденного текста примечания - по ней потом найдем этот текст для формирования соответствующего текста примечания
							ExtendSelectTextToEndBookMark( oDoc, oViewCursor, sConstBookMarkFNText, oBlockNoteZoneBookMark )
						End If
						InsertBookmarkToTextForFootNote = True
						Exit Function
					End If
				Loop
			End If
		End If		
	Else
		&apos; два варианта - либо в искомой зоне нет абзацев с нумерацией, либо есть нумерованные примечания.
	End If
End Function

&apos; обработка списка текста примечаний
Function ProcessingComplexFootNoteList( bIsFootNoteMode As Boolean, nZoneNumber As Integer, _
									oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, oBookMarks As Object, _
									sConstBookMarkListNote As String, sConstBookMarkFNNumber As String, sConstBookMarkFNText As String, _
									sRegStringNFNInText As String, sForLeft As String, sForRight As String ) As Long
	ProcessingComplexFootNoteList = 0
	lInsNotesCount = 0 &apos; инициализация счетчика сгенерированных сносок/внутренних ссылок
	
	Dim oBookMark	As Object, oBlockNoteZoneBookMark As Object
	Dim sNumber		As String
	Dim nValue		As Integer

	Do While ( oDoc.Text.compareRegionEnds( oLCurs, oRCurs.getStart() ) &gt;= 0 ) &apos; пока левая граница зоны поиска номеров примечаний не сравнялась или не перешла за правую
		nValue = InsertBookmarkToNumberFootNote( bIsFootNoteMode, oDoc, oViewCursor, oLCurs, oRCurs, sRegStringNFNInText, sConstBookMarkListNote, sConstBookMarkFNNumber )
		&apos; nValue:
		&apos; -1 - номер примечания в тексте не найден - конец документа
		&apos; 0 - вставка закладки для номера прмечания в ТЕКСТЕ
		&apos; 1 - вставка закладки для номера прмечания в ТАБЛИЦЕ
		If nValue = -1 Then
			&apos; не нашди новый номер примечания ДО блока текста примечаний (все ссылки на примечания обработали или их просто нет)
			ProcessingComplexFootNoteList = lInsNotesCount
			Exit Function
		ElseIf nValue = 0 Then &apos; номер очередного примечания - в тексте
			 oBookMark	= oBookMarks.getByName( sConstBookMarkFNNumber ).getAnchor()
			&apos; выделяем номер из примечания
			sNumber = GetNumberFromString( oBookMark.getString() ) &apos; текст с номером очередного примечания

			&apos; ищем текст для примечания этого номера в блоке текста примечаний
			oBlockNoteZoneBookMark = oBookMarks.getByName(sConstBookMarkListNote).getAnchor()
			&apos; перевод курсора на начала закладки зоны поиска текста примечаний
			oViewCursor.gotoRange( oBlockNoteZoneBookMark.getStart(), False )
			Dim sBMHyperlink As String : sBMHyperlink = &quot;_bmk_Link_&quot; &amp; Trim( Str( nZoneNumber ) ) &amp; &quot;_&quot; &amp; sNumber &amp; &quot;_&quot;
			If InsertBookmarkToTextForFootNote( bIsFootNoteMode, nZoneNumber, oDoc, oViewCursor, oBlockNoteZoneBookMark, _
												sForLeft, sNumber, sForRight, sConstBookMarkFNText, sBMHyperlink ) Then
				If bIsFootNoteMode = True Then &apos; режим генерации сносок
					&apos; вставка найденного текста примечания вместо найденного по шаблону номера примечания (режим - генерация сносок)
					InsertCurrentFootNote( oViewCursor, sConstBookMarkFNNumber )
				Else  &apos; режим генерации внутренних ссылок
					&apos; формирование гиперссылки для найденного по шаблону номера примечания (режим - генерация внутренних ссылок)
					MakeHiperLink( oViewCursor, sConstBookMarkFNNumber, sBMHyperlink )
					&apos; перемещаем курсор на конец закладки - к концу текста сгенерированной гиперссылки
					oViewCursor.gotoRange(oBookMark.getEnd(), False)
				End If
				lInsNotesCount = lInsNotesCount+1 &apos; только для текста (для таблиц - счетчик собирает данные отдельно)
			Else &apos; для найденного номера сноски не нашли текст.
				&apos; переход курсора на закладку - номер примечания
				GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
				&apos; Сдвигаем верхнюю границу поиска в тексте на конец &quot;пустого&quot; номера примечания
				oViewCursor.collapseToEnd()
				oLCurs.collapseToEnd()
			End If
			&apos; удаляем служебные закладки, если они есть
			If oBookMarks.hasByName( sConstBookMarkFNNumber )	Then _UnoDeleteBookMark( sConstBookMarkFNNumber )
			If oBookMarks.hasByName( sConstBookMarkFNText )		Then _UnoDeleteBookMark( sConstBookMarkFNText )
		Else &apos; номер очередного примечания - в Таблице или во Врезке - ничего не делаем - игнорируем
		End If
	Loop
	ProcessingComplexFootNoteList = lInsNotesCount
End Function

&apos; вставка найденного текста примечания вместо найденного по шаблону номера примечания (режим - генерация сносок)
Sub InsertCurrentFootNote( oViewCursor As Object, sConstBookMarkFNNumber As String )
	&apos; вырезать выделенный текст примечания в буфер
	_UnoCut()
	&apos; переход курсора на закладку - номер примечания
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
	&apos; очистить стиль символа - на случай верхнего регистра и т.д.
	ClearSymbolFormat()
	&apos; удалить выделенный номер примечания, вставить очередную сноску, вставить текст сноски и удаляем последний пустой абзац
	_UnoDelete() : _UnoInsertFootnote() : _UnoPaste() : 
	If oViewCursor.isAtStartOfLine() Then _UnoSwBackspace()
	&apos; переводим курсор в зону поиска очередного номера сноски
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
End Sub

&apos; формирование гиперссылки для найденного по шаблону номера примечания (режим - генерация внутренних ссылок)
Sub MakeHiperLink( oViewCursor As Object, sConstBookMarkFNNumber As String, sBookMarkNameForLink As String )
	&apos; переход курсора на закладку - номер примечания
	GoToViewCursorToBookMark( oViewCursor, sConstBookMarkFNNumber, True )
	&apos; формируем гиперссылку
	_UnoMakeHyperlink( oViewCursor.getString(), sBookMarkNameForLink )
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; сложная генерация сносок - поиск для соответствующего номера сноски &quot;его&quot; текста в области текста, заданного закладками
Sub BuildFootNoteComplex( bIsFootNoteMode As Boolean )
	&apos; зона поиска номеров сносок: oLCurs - левая верхняя граница; oRCurs - правая нижняя граница
	&apos; зона поика текста для заданного номера сноски: закладки с именами производными от sConstBookMarkListNote
	Dim oDoc		As Object	: oDoc			= ThisComponent
	Dim oViewCursor As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
	Dim oBookMarks	As Object	: oBookMarks	= oDoc.getBookmarks()
	Dim oLCurs		As Object	: oLCurs		= oDoc.Text.createTextCursor()
	oLCurs.gotoStart( False ) &apos; на начало документа
	Dim oStartCurs	As Object
	
	&apos; удаляем служебные закладки, если они есть
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkFNNumber )
	DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkFNText )
	
	&apos; получаем зоны для обработки сносок
	Dim aBookMarks() As String : aBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkListNote )
	If UBound( aBookMarks() ) = -1 Then
		MsgBox sBTEND.sNotFoundBookmarkZoneForNoteList, 64, sBTEND.sFootnotesGeneration
		Exit Sub	
	End If
	
	Dim sRegStringNFNInText As String : sRegStringNFNInText = GetRegStringNFNInText()
	&apos; левая и правая часть регулярного выражения для 1-го поиска номера примечания в списке примечаний
	Dim oLB		As Object : oLB		= oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	Dim sLeft	As String : sLeft	= GetRegStringNFNInListForLeft( oLB )
	Dim sRight	As String : sRight	= GetRegStringNFNInListForRight( oLB )
	Dim aLBookMarks() As String &apos; закладки для Глав книги
	Dim lFindCount As Long : lFindCount = 0
	Dim oRCurs As Object, oLBMs As Object
	Dim nNoteListNumber As Integer &apos; номер очередного списка примечаний
	
	If oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextInBookEnd&quot; ).State  Then
		&apos; режим: 1. Нумерация сквозная; Общий список примечаний - в конце книги.
		aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
		oStartCurs = oBookMarks.getByName( aLBookMarks(0) ).getAnchor()
		oLCurs.gotoRange( oStartCurs.getEnd(), False )
		
		oRCurs = oBookMarks.getByName( aBookMarks(0) ).getAnchor()
		lFindCount = lFindCount + ProcessingComplexFootNoteList( bIsFootNoteMode, 0, oDoc, oViewCursor, oLCurs, oRCurs, oBookMarks, aBookMarks(0), _
																sConstBookMarkFNNumber, sConstBookMarkFNText, sRegStringNFNInText, sLeft, sRight ) 
		&apos; перемещаем курсор в новую зону поиска - после обработанного блока текста примечаний ( после закладки sConstBookMarkListNote )
		GoToViewCursorToBookMark( oViewCursor, aBookMarks(0), False )
		&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
		With oLCurs
			.gotoRange( oRCurs.getEnd(), False )
			.goRight( 1, False )
		End With
	ElseIf oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextAfterEachChapter&quot; ).State Then
		&apos; режим: 2. Список текста примечаний - после каждой главы
		&apos;проверка - есть ли хоть одна закладка L-зоны
		aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
		If UBound( aLBookMarks() ) = -1 Then
			MsgBox sBTEND.sNotFoundBookmarkZoneForNoteNumber, 64, sBTEND.sTestMode2
			Exit Sub	
		End If
		
		&apos;проверка - соответствует ли число закладок L-зоны числу закладок списков текста примечаний
		If UBound( aLBookMarks() ) &lt;&gt; UBound( aBookMarks() ) Then
			MsgBox sBTEND.sBuildFootNoteComplexVerify, 64, sBTEND.sTestMode2
			Exit Sub	
		End If

		oStartCurs = oBookMarks.getByName( aLBookMarks(0) ).getAnchor()
		oLCurs.gotoRange( oStartCurs.getEnd(), False )
		
		For nNoteListNumber=0 To UBound( aBookMarks() )
			oRCurs = oBookMarks.getByName( aBookMarks(nNoteListNumber) ).getAnchor()
			lFindCount = lFindCount + ProcessingComplexFootNoteList( bIsFootNoteMode, nNoteListNumber, oDoc, oViewCursor, oLCurs, oRCurs, oBookMarks, aBookMarks(nNoteListNumber), _
																	sConstBookMarkFNNumber, sConstBookMarkFNText, sRegStringNFNInText, sLeft, sRight ) 
			&apos; перемещаем курсор в новую зону поиска - после обработанного блока текста примечаний ( после закладки sConstBookMarkListNote )
			GoToViewCursorToBookMark( oViewCursor, aBookMarks(nNoteListNumber), False )
			&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
			With oLCurs
				.gotoRange( oRCurs.getEnd(), False )
				.goRight( 1, False )
			End With
		Next nNoteListNumber
	Else
		&apos; режим 3: Все блоки текста примечаний - в конце книги
		&apos;проверка - есть ли хоть одна закладка L-зоны
		aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
		If UBound( aLBookMarks() ) = -1 Then
			MsgBox sBTEND.sNotFoundBookmarkZoneForNoteNumber, 64, sBTEND.sTestMode3
			Exit Sub	
		End If
		
		&apos;проверка - соответствует ли число закладок L-зоны числу закладок списков текста примечаний
		If UBound( aLBookMarks() ) &lt;&gt; UBound( aBookMarks() ) Then
			MsgBox sBTEND.sBuildFootNoteComplexVerify, 64, sBTEND.sTestMode3
			Exit Sub	
		End If
		
		&apos; получаем L-зоны для поиска номеров примечаний
		For nNoteListNumber=0 To UBound( aBookMarks() )
			&apos; левая граница поиска номеров сносок - текстовый курсор на очередной закладке (начало главы и т.д.)
			oLBMs = oBookMarks.getByName( aLBookMarks(nNoteListNumber) ).getAnchor()
			oLCurs.gotoRange( oLBMs, False )
			&apos; правая граница - следующая левая граница или начало 1-й закладки списка примечаний
			If nNoteListNumber &lt; UBound( aBookMarks() ) Then
				oRCurs = oBookMarks.getByName( aLBookMarks(nNoteListNumber+1) ).getAnchor()
			Else
				oRCurs = oBookMarks.getByName( aBookMarks(0) ).getAnchor()
			End If
			&apos; перемещаем курсор в новую зону поиска
			GoToViewCursorToBookMark( oViewCursor, aLBookMarks(nNoteListNumber), False )
			lFindCount = lFindCount + ProcessingComplexFootNoteList( bIsFootNoteMode, nNoteListNumber, oDoc, oViewCursor, oLCurs, oRCurs, oBookMarks, aBookMarks(nNoteListNumber), _
																	sConstBookMarkFNNumber, sConstBookMarkFNText, sRegStringNFNInText, sLeft, sRight )
		Next nNoteListNumber
		oViewCursor.goRight( 1, False )
	End If

	If oBuildFootEndNoteDlg.GetControl( &quot;cboxDelBookMarks&quot; ).State Then
		&apos; удаляем служебные закладки, если они есть
		DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkNZoneNote )
		DeleteAllBookMarkWithTemplate( oBookMarks, sConstBookMarkListNote )
	End If
	
	Dim sStrMess As String
	If bIsFootNoteMode = True Then &apos; Режим генерации сносок
		sStrMess = sBTEND.sFootnotesGenerationCount
	Else
		sStrMess = sBTEND.sHyperlinksGenerationCount
	End If
	MsgBox sBTEND.sDocumentIsProcessing &amp; chr(10) &amp; sStrMess &amp; &quot; &quot; &amp; lFindCount &amp; &quot;.&quot;, 64, sBTEND.sFootnotesGeneration
End Sub

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от выбора шаблона номера сноски в тексте
Function GetRegStringNFNInText() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInTextTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; ... текст (x)
			GetRegStringNFNInText = &quot;\([:digit:]+\)|\( +[:digit:]+\)|\([:digit:]+ +\)|\( +[:digit:]+ +\)&quot; &apos;&quot;\([:digit:]+\)&quot;
		Case 1 &apos; ... текст [x]
			GetRegStringNFNInText = &quot;\[[:digit:]+\]|\[ +[:digit:]+\]|\[[:digit:]+ +\]|\[ +[:digit:]+ +\]&quot; &apos;&quot;\[[:digit:]+\]&quot;
		Case 2 &apos; ... текст {x}
			GetRegStringNFNInText = &quot;\{[:digit:]+\}|\{ +[:digit:]+\}|\{[:digit:]+ +\}|\{ +[:digit:]+ +\}&quot; &apos;&quot;\{[:digit:]+\}&quot;
		Case 3 &apos; ... текст &lt;x&gt;
			GetRegStringNFNInText = &quot;&lt;[:digit:]+&gt;|&lt; +[:digit:]+&gt;|&lt;[:digit:]+ +&gt;|&lt; +[:digit:]+ +&gt;&quot; &apos;&quot;&lt;[:digit:]+&gt;&quot;
		Case 4 &apos; ... текст /x/
			GetRegStringNFNInText = &quot;/[:digit:]+/|/ +[:digit:]+/|/[:digit:]+ +/|/ +[:digit:]+ +/&quot; &apos;&quot;/[:digit:]+/&quot;
		Case 5 &apos; ... текст \x\
			GetRegStringNFNInText = &quot;\\[:digit:]+\\|\\ +[:digit:]+\\|\\[:digit:]+ +\\|\\ +[:digit:]+ +\\&quot; &apos;&quot;\\[:digit:]+\\&quot;
		Case 6 &apos; ... текст ((x))
			GetRegStringNFNInText = &quot;\(\([:digit:]+\)\)|\(\( +[:digit:]+\)\)|\(\([:digit:]+ +\)\)|\(\( +[:digit:]+ +\)\)&quot; &apos;&quot;\(\([:digit:]+\)\)&quot;
		Case 7 &apos; ... текст (((x)))
			GetRegStringNFNInText = &quot;\(\(\([:digit:]+\)\)\)|\(\(\( +[:digit:]+\)\)\)|\(\(\([:digit:]+ +\)\)\)|\(\(\( +[:digit:]+ +\)\)\)&quot; &apos;&quot;\(\(\([:digit:]+\)\)\)&quot;
		Case 8 &apos; ... текст {{x}}
			GetRegStringNFNInText = &quot;\{\{[:digit:]+\}\}|\{\{ +[:digit:]+\}\}|\{\{[:digit:]+ +\}\}|\{\{ +[:digit:]+ +\}\}&quot; &apos;&quot;\{\{[:digit:]+\}\}&quot;
		Case 9 &apos; ... текст {{{x}}}
			GetRegStringNFNInText = &quot;\{\{\{[:digit:]+\}\}\}|\{\{\{ +[:digit:]+\}\}\}|\{\{\{[:digit:]+ +\}\}\}|\{\{\{ +[:digit:]+ +\}\}\}&quot; &apos;&quot;\{\{\{[:digit:]+\}\}\}&quot;
		Case 10 &apos; ... текст [[x]]
			GetRegStringNFNInText = &quot;\[\[[:digit:]+\]\]|\[\[ +[:digit:]+\]\]|\[\[[:digit:]+ +\]\]|\[\[ +[:digit:]+ +\]\]&quot; &apos;&quot;\[\[[:digit:]+\]\]&quot;
		Case 11 &apos; ... текст [[[x]]]
			GetRegStringNFNInText = &quot;\[\[\[[:digit:]+\]\]\]|\[\[\[ +[:digit:]+\]\]\]|\[\[\[[:digit:]+ +\]\]\]|\[\[\[ +[:digit:]+ +\]\]\]&quot; &apos;&quot;\[\[\[[:digit:]+\]\]\]&quot;
		Case 12 &apos; ... текст {(x)}
			GetRegStringNFNInText = &quot;\{\([:digit:]+\)\}|\{\( +[:digit:]+\)\}|\{\([:digit:]+ +\)\}|\{\( +[:digit:]+ +\)\}&quot; &apos;&quot;\{\([:digit:]+\)\}&quot;
		Case 13 &apos; &quot;... цифры в верхнем индексе ...&quot;
			GetRegStringNFNInText = &quot;NumbersUpIndex&quot;
		Case Else
			GetRegStringNFNInText = &quot;\([:digit:]+\)|\( +[:digit:]+\)|\([:digit:]+ +\)|\( +[:digit:]+ +\)&quot;&apos;&quot;\([:digit:]+\)&quot;
	End Select
End Function

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от выбора шаблона номера сноски в списке сносок
Function GetRegStringNFNInListForNextFind() As String
	Dim oLB As Object : oLB = oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x Текст ...
			GetRegStringNFNInListForNextFind = &quot;^[:digit:]+&quot;
		Case 1 &apos; x. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^[:digit:]+\.&quot;
		Case 2 &apos; (x) Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\([:digit:]+\)&quot;
		Case 3 &apos; (x). Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\([:digit:]+\)\.&quot;
		Case 4 &apos; [x] Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\[[:digit:]+\]&quot;
		Case 5 &apos; [x]. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\[[:digit:]+\]\.&quot;
		Case 6 &apos; {x} Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\{[:digit:]+\}&quot;
		Case 7 &apos; {x}. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\{[:digit:]+\}\.&quot;
		Case 8 &apos; &lt;x&gt; Текст ...
			GetRegStringNFNInListForNextFind = &quot;^&lt;[:digit:]+&gt;&quot;
		Case 9 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^&lt;[:digit:]+&gt;\.&quot;
		Case 10 &apos; /x/ Текст ...
			GetRegStringNFNInListForNextFind = &quot;^/[:digit:]+&quot;
		Case 11 &apos; /x/. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^/[:digit:]+/\.&quot;
		Case 12 &apos; \x\ Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\\[:digit:]+\\&quot;
		Case 13 &apos; \x\. Текст ...
			GetRegStringNFNInListForNextFind = &quot;^\\[:digit:]+\\\.&quot;
		Case 14 &apos; &quot;цифры в верхнем индексе ...&quot;
			GetRegStringNFNInListForNextFind = &quot;NumbersUpIndex&quot;
		Case Else
			GetRegStringNFNInListForNextFind = &quot;^[:digit:]+\.&quot;
	End Select
End Function

Function GetRegStringNFNInListForLeft( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x Текст ...
			GetRegStringNFNInListForLeft = &quot;^&quot;
		Case 1 &apos; x. Текст ...
			GetRegStringNFNInListForLeft = &quot;^&quot;
		Case 2 &apos; (x) Текст ...
			GetRegStringNFNInListForLeft = &quot;^\(&quot;
		Case 3 &apos; (x). Текст ...
			GetRegStringNFNInListForLeft = &quot;^\(&quot;
		Case 4 &apos; [x] Текст ...
			GetRegStringNFNInListForLeft = &quot;^\[&quot;
		Case 5 &apos; [x]. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\[&quot;
		Case 6 &apos; {x} Текст ...
			GetRegStringNFNInListForLeft = &quot;^\{&quot;
		Case 7 &apos; {x}. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\{&quot;
		Case 8 &apos; &lt;x&gt; Текст ...
			GetRegStringNFNInListForLeft = &quot;^&lt;&quot;
		Case 9 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForLeft = &quot;^&lt;&quot;
		Case 10 &apos; /x/ Текст ...
			GetRegStringNFNInListForLeft = &quot;^/&quot;
		Case 11 &apos; /x/. Текст ...
			GetRegStringNFNInListForLeft = &quot;^/&quot;
		Case 12 &apos; \x\ Текст ...
			GetRegStringNFNInListForLeft = &quot;^\\&quot;
		Case 13 &apos; \x\. Текст ...
			GetRegStringNFNInListForLeft = &quot;^\\&quot;
		Case 14 &apos; &quot;цифры в верхнем индексе ...&quot;
			GetRegStringNFNInListForLeft = &quot;NumbersUpIndex&quot;
		Case Else
			GetRegStringNFNInListForLeft = &quot;^&quot;
	End Select
End Function

Function GetRegStringNFNInListForRight( oLB As Object ) As String
	Select Case oLB.SelectedItemPos
		Case 0 &apos; x Текст ...
			GetRegStringNFNInListForRight = &quot;&quot;
		Case 1 &apos; x. Текст ...
			GetRegStringNFNInListForRight = &quot;\.&quot;
		Case 2 &apos; (x) Текст ...
			GetRegStringNFNInListForRight = &quot;\)&quot;
		Case 3 &apos; (x). Текст ...
			GetRegStringNFNInListForRight = &quot;\)\.&quot;
		Case 4 &apos; [x] Текст ...
			GetRegStringNFNInListForRight = &quot;\]&quot;
		Case 5 &apos; [x]. Текст ...
			GetRegStringNFNInListForRight = &quot;\]\.&quot;
		Case 6 &apos; {x} Текст ...
			GetRegStringNFNInListForRight = &quot;\}&quot;
		Case 7 &apos; {x}. Текст ...
			GetRegStringNFNInListForRight = &quot;\}\.&quot;
		Case 8 &apos; &lt;x&gt; Текст ...
			GetRegStringNFNInListForRight = &quot;&gt;&quot;
		Case 9 &apos; &lt;x&gt;. Текст ...
			GetRegStringNFNInListForRight = &quot;&gt;\.&quot;
		Case 10 &apos; /x/ Текст ...
			GetRegStringNFNInListForRight = &quot;/&quot;
		Case 11 &apos; /x/. Текст ...
			GetRegStringNFNInListForRight = &quot;/\.&quot;
		Case 12 &apos; \x\ Текст ...
			GetRegStringNFNInListForRight = &quot;\\&quot;
		Case 13 &apos; \x\. Текст ...
			GetRegStringNFNInListForRight = &quot;\\\.&quot;
		Case 14 &apos; &quot;... цифры в верхнем индексе ...&quot;
			GetRegStringNFNInListForRight = &quot;NumbersUpIndex&quot;
		Case Else
			GetRegStringNFNInListForRight = &quot;\.&quot;
	End Select
End Function


&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; 		работа контролов диалога генерации сносок
&apos;///////////////////////////////////////////////////////////////////////////////////////
&apos; запуск диалога генерации сносок
Sub StartBuildFootEndNoteDlg()
	bIsFootNoteMode = True &apos; режим Генератора Сносок по-умолчанию
	
&apos;	DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	If Not GlobalScope.DialogLibraries.isLibraryLoaded( &quot;OOoFBTools&quot; ) Then
    	GlobalScope.DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	End If
	oBuildFootEndNoteDlg = CreateUnoDialog( GlobalScope.DialogLibraries.OOoFBTools.BuildFootEndNoteDlg )

	&apos; инициализация диалога генерации сносок в зависимости от локали
	InitBuildFootEndNoteDlg()
		
	&apos; для простой генерации сносок
	Dim aNFNInTextList() As String
	aNFNInTextList() = Array(	&quot;... &quot; &amp; sBTEND.sText &amp; &quot; (x) ...&quot;, _
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; [x] ...&quot;, _
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {x} ...&quot;, _
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; &lt;x&gt; ...&quot;, _
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; /x/ ...&quot;, _
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; \x\ ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; ((x)) ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; (((x))) ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {{x}} ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {{{x}}} ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; [[x]] ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; [[[x]]] ...&quot;,	_
								&quot;... &quot; &amp; sBTEND.sText &amp; &quot; {(x)} ...&quot;	)
	
	&apos; для сложной генерации сносок
	Dim aNFNInTextListComplex( UBound( aNFNInTextList() )+1 ) As String
	Dim i As Integer : i = 0
	For i=0 To UBound( aNFNInTextList() )
		aNFNInTextListComplex(i) = aNFNInTextList(i)
	Next
	aNFNInTextListComplex( UBound( aNFNInTextList() )+1 ) = &quot;... &quot; &amp; sBTEND.sNumberInUpIndex &amp; &quot; ...&quot;
	
	&apos; для сложной генерации сносок
	Dim aNFNInListList() As String
	aNFNInListList() = Array(	&quot;x &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;x. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;(x) &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;(x). &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;[x] &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;[x]. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;{x} &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;{x}. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;&lt;x&gt; &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;&lt;x&gt;. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;/x/ &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;/x/. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;\x\ &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								&quot;\x\. &quot; &amp; sBTEND.sSText &amp; &quot; ...&quot;, _
								sBTEND.sNumberInUpIndex &amp; &quot; ...&quot;	)
	
	&apos; файл настроек BuildFootEndNoteDlg
	
	With oBuildFootEndNoteDlg.Model
		.lblNSimpleFNInTextTemplate.StringItemList	= aNFNInTextList()
		.lblNFNInTextTemplate.StringItemList 		= aNFNInTextListComplex()
		.lblNFNInListTemplate.StringItemList		= aNFNInListList()
		.Height	= 235
		.Width	= 300
		If .cmnbtnFootNote.State = 1 Then
			.Title = sBTEND.sFootnotesGeneration
		Else
			.Title = sBTEND.sHyperLinksGeneration
		End If
	End With
	
	&apos; Настройки По умолчанию - в контролы
	SetBuildFootEndNoteDlgSettingDefault()
	
	&apos; читаем положение диалога из файла настроек
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getOOoFBToolsSettingsDir() &amp; sConstBuildFootEndNoteDlgSettings, oBuildFootEndNoteDlg, nX, nY )
	oBuildFootEndNoteDlg.setPosSize( nX, nY, 235, 300, com.sun.star.awt.PosSize.POS )
	
	ControlModeEnabled()
	
	With oBuildFootEndNoteDlg.getModel
		If .optbtnComplexFootNote.State Then
			&apos; инициализация Подсказки в зависимости от условия - есть ли в Документе Врезки и/или Таблицы или нет.
			IsTableAndOrTextFrameExistInDocument()
			.tfTestHelp.Enabled	= True
		Else
			.tfTestHelp.Text	= &quot;&quot;
			.tfTestHelp.Enabled	= False
		End If
	End With
	
	oBuildFootEndNoteDlg.execute()
End Sub

&apos; проверка, есть ли в Документе Врезки и/или Таблицы
Function IsTableAndOrTextFrameExistInDocument() As Boolean
	IsTableAndOrTextFrameExistInDocument = False
	If ThisComponent.TextTables.Count &gt; 0 Or ThisComponent.TextFrames.Count &gt; 0 Then
		oBuildFootEndNoteDlg.getModel.tfTestHelp.Text = sBTEND.stfTestHelpTableTextFrame
		IsTableAndOrTextFrameExistInDocument = True
	Else
		oBuildFootEndNoteDlg.getModel.tfTestHelp.Text = sBTEND.stfTestHelpNotTableTextFrame
		IsTableAndOrTextFrameExistInDocument = False
	End If
End Function

Sub cmnbtnFootNoteClick()
	With oBuildFootEndNoteDlg.Model
		If .cmnbtnFootNote.State = 1 Then
			.cmnbtnFootNote.State			= 0
			.cmnbtnHyperLinks.State			= 1
			.optbtnComplexFootNote.State	= 1
			.optbtnSimpleFootNote.State		= 0
			.Step 							= 1
		Else
			.cmnbtnFootNote.State	= 1
			.cmnbtnHyperLinks.State	= 0
			.Step 					= 0
		End If
		If .cmnbtnFootNote.State = 1 Then
			.Title = sBTEND.sFootnotesGeneration
			bIsFootNoteMode = True
		Else
			.Title = sBTEND.sHyperLinksGeneration
			bIsFootNoteMode = False
		End If
	End With
	ControlModeEnabled()
End Sub

Sub cmnbtnHyperLinksClick()
	With oBuildFootEndNoteDlg.Model
		If .cmnbtnHyperLinks.State = 1 Then
			.cmnbtnHyperLinks.State	= 0
			.cmnbtnFootNote.State	= 1
			.Step 					= 0
		Else
			.cmnbtnHyperLinks.State			= 1
			.cmnbtnFootNote.State			= 0
			.optbtnComplexFootNote.State	= 1
			.optbtnSimpleFootNote.State		= 0
			.Step							= 1
		End If
		If .cmnbtnFootNote.State = 1 Then
			.Title = sBTEND.sFootnotesGeneration
			bIsFootNoteMode = True
		Else
			.Title = sBTEND.sHyperLinksGeneration
			bIsFootNoteMode = False
		End If
	End With
	ControlModeEnabled()
End Sub

Sub SetBuildFootEndNoteDlgSettingDefault
	&apos; Установка настроек по умолчанию в контролы
	With oBuildFootEndNoteDlg
		.GetControl( &quot;optbtnSimpleFootNote&quot; ).State = 0
		.GetControl( &quot;optbtnComplexFootNote&quot; ).State = 1
		.GetControl( &quot;optbtnFNTextInBookEnd&quot; ).State = 1
		.GetControl( &quot;optbtnFNTextAfterEachChapter&quot; ).State = 0
		.GetControl( &quot;optbtnAllChaptersFNTextAtEndOf&quot; ).State = 0
		Dim oLB As Object
		oLB = 	.getControl( &quot;lblNSimpleFNInTextTemplate&quot; )
		oLB.SelectItemPos( 0, True )
		oLB = 	.getControl( &quot;lblNFNInTextTemplate&quot; )
		oLB.SelectItemPos( 2, True )
		oLB = 	.getControl( &quot;lblNFNInListTemplate&quot; )
		oLB.SelectItemPos( 0, True )
	End With
End Sub

Sub ControlModeEnabled()
	With oBuildFootEndNoteDlg
	If .Model.optbtnComplexFootNote.State Then
		.GetControl(&quot;lblComplexFNInText&quot;).Enable = True
		.GetControl(&quot;lblComplexFNInList&quot;).Enable = True
		.GetControl(&quot;lblNFNInTextTemplate&quot;).Enable = True
		.GetControl(&quot;lblNFNInListTemplate&quot;).Enable = True
		.GetControl(&quot;optbtnFNTextInBookEnd&quot;).Enable = True
		.GetControl(&quot;optbtnFNTextAfterEachChapter&quot;).Enable = True
		.GetControl(&quot;optbtnAllChaptersFNTextAtEndOf&quot;).Enable = True
		.GetControl(&quot;cboxDelBookMarks&quot;).Enable = True
		.GetControl(&quot;cmnbtnTest&quot;).Enable = True
		
		.GetControl(&quot;lblSimpleFN&quot;).Enable = False
		.GetControl(&quot;lblNSimpleFNInTextTemplate&quot;).Enable = False
	Else
		.GetControl(&quot;lblComplexFNInText&quot;).Enable = False
		.GetControl(&quot;lblComplexFNInList&quot;).Enable = False
		.GetControl(&quot;lblNFNInTextTemplate&quot;).Enable = False
		.GetControl(&quot;lblNFNInListTemplate&quot;).Enable = False
		.GetControl(&quot;optbtnFNTextInBookEnd&quot;).Enable = False
		.GetControl(&quot;optbtnFNTextAfterEachChapter&quot;).Enable = False
		.GetControl(&quot;optbtnAllChaptersFNTextAtEndOf&quot;).Enable = False
		.GetControl(&quot;cboxDelBookMarks&quot;).Enable = False
		.GetControl(&quot;cmnbtnTest&quot;).Enable = False
		
		.GetControl(&quot;lblSimpleFN&quot;).Enable = True
		.GetControl(&quot;lblNSimpleFNInTextTemplate&quot;).Enable = True
	End If
	End With
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; генерация сносок в зависимости от режима (простой или сложный)
Sub BuildFootNote()
	&apos; проверка, есть ли в Документе Врезки и/или Таблицы
	If IsTableAndOrTextFrameExistInDocument() Then
		If MsgBox ( oBuildFootEndNoteDlg.getModel.tfTestHelp.Text &amp; chr(10) &amp; chr(10) &amp; sBTEND.sTestContinueQuery, 32 + 16 + 1, sBTEND.sFootnotesGeneration ) &lt;&gt; 1 Then
			Exit Sub
		End If
	End If
	
	oBuildFootEndNoteDlg.endExecute()
	&apos; сохранение настроек
	SaveSettings( getOOoFBToolsSettingsDir() &amp; sConstBuildFootEndNoteDlgSettings, oBuildFootEndNoteDlg )
	
	If oBuildFootEndNoteDlg.GetControl( &quot;optbtnSimpleFootNote&quot; ).State Then
		&apos; Простой режим генерации сносок
		BuildFootNoteSimple()
	ElseIf oBuildFootEndNoteDlg.GetControl( &quot;optbtnComplexFootNote&quot; ).State Then
		&apos; Сложный режим генерации сносок или внутренних ссылок
		BuildFootNoteComplex( bIsFootNoteMode )
	End If
End Sub

&apos;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos;/////////////////////////////////////// Тест для сложной генерации сносок ///////////////////////////////////////////////////////////////
&apos;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; генерация сносок в зависимости от режима (простой или сложный)
Sub FootNoteTest()
	&apos;oBuildFootEndNoteDlg.Enable = False
	oBuildFootEndNoteDlg.endExecute()
	&apos; сохранение настроек
	SaveSettings( getOOoFBToolsSettingsDir() &amp; sConstBuildFootEndNoteDlgSettings, oBuildFootEndNoteDlg )
	&apos; проверка, есть ли в Документе Врезки и/или Таблицы
	If IsTableAndOrTextFrameExistInDocument() Then
		If MsgBox ( oBuildFootEndNoteDlg.getModel.tfTestHelp.Text &amp; chr(10) &amp; chr(10) &amp; sBTEND.sTestContinueQuery, 32 + 16 + 1, sBTEND.sFootnotesGeneration ) &lt;&gt; 1 Then
			&apos;oBuildFootEndNoteDlg.Enable = True
			Exit Sub
		End If
	End If
	If oBuildFootEndNoteDlg.GetControl( &quot;optbtnComplexFootNote&quot; ).State Then &apos; для сложного режима генерации сносок
		&apos; зона поиска номеров сносок: oLCurs - левая верхняя граница; oRCurs - правая нижняя граница
		&apos; зона поика текста для заданного номера сноски: закладки с именами производными от sConstBookMarkListNote
		Dim oDoc		As Object	: oDoc			= ThisComponent
		Dim oViewCursor As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
		Dim oBookMarks	As Object	: oBookMarks	= oDoc.getBookmarks()
		Dim oLCurs		As Object	: oLCurs		= oDoc.Text.createTextCursor()
		Dim oRCurs		As Object
		Dim l As Long
		oLCurs.gotoStart( False ) &apos; на начало документа
		Dim oStartCurs	As Object

		&apos; получаем зоны для обработки сносок
		Dim aRBookMarks() As String : aRBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkListNote )
		If UBound( aRBookMarks() ) = -1 Then
			MsgBox sBTEND.sNotFoundBookmarkZoneForNoteList, 64, &quot;Test&quot;
			&apos;oBuildFootEndNoteDlg.Enable = True
			Exit Sub	
		End If
		
		Dim sRegFind As String : sRegFind = GetRegStringNFNInText()
		&apos; левая и правая часть регулярного выражения для 1-го поиска номера примечания в списке примечаний
		Dim oLB		As Object : oLB		= oBuildFootEndNoteDlg.getControl( &quot;lblNFNInListTemplate&quot; )
		Dim sLeft	As String : sLeft	= GetRegStringNFNInListForLeft( oLB )
		Dim sRight	As String : sRight	= GetRegStringNFNInListForRight( oLB )
		
		Dim vaZoneFlagsArray()			As Variant	&apos; хранить данные-флаги по всем зонам поиска
		
		Dim vaRepeatNumbersInText()		As Variant	&apos; для хранения рез-тов найденного в Тексте
		Dim saNumbersInText()			As String	&apos; хранит все номеры примечаний из текста в пределах зоны поиска
		Dim lCountAllTextNotes			As Long		&apos; число обработанных номеров примечаний в тексте
		Dim nAbsentNumbersInText()		As Integer	&apos; номера отсутствующих номеров примечаний в Тексте
		Dim naAbsentTextNumbersInList()	As Integer	&apos; список номеровпримечаний из Текста, отсутствующих в Списке примечаний
		
		Dim vaRepeatNumbersInList()		As Variant	&apos; для хранения рез-тов найденного в Списке примечаний
		Dim saNumbersInList()			As String	&apos; хранит все номеры примечаний из списка в пределах зоны поиска списка примечаний
		Dim lCountAllListNotes			As Long		&apos; число обработанных примечаний в списке примечаний
		Dim nAbsentNumbersInList()		As Integer	&apos; номера отсутствующих номеров примечаний в Списке
		Dim naAbsentListNumbersInText()	As Integer	&apos; список номеровпримечаний из Списка примечаний, отсутствующих в Тексте
		
		Dim oProgressBar As Object
		oProgressBar = ThisComponent.CurrentController.StatusIndicator

		Dim oOS As Object, oFA As Object, oTOS As Object
		Dim sReport As String : sReport = getTempPath() &amp; &quot;/TestComplexFootNote.htm&quot;
		oFA = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oTOS = CreateUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
		oOS = oFA.openFileWrite( sReport )
		oOS.truncate()
		With oTOS
			.setOutputStream( oOS )
			.setEncoding( &quot;utf-8&quot; )
		End With
		
		Dim aLBookMarks() As String &apos; список закладок на главы книги
		Dim oListBookMark As Object &apos; закладка списка примечаний
		
		If oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextInBookEnd&quot; ).State Then
			&apos; Тест для Режима 1: Нумерация - сквозная; Общий список примечаний - в конце книги
			aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
			oStartCurs = oBookMarks.getByName( aLBookMarks(0) ).getAnchor()
			oLCurs.gotoRange( oStartCurs.getEnd(), False )
			
			oRCurs = oBookMarks.getByName( aRBookMarks(0) ).getAnchor()
			oListBookMark = oBookMarks.getByName( aRBookMarks(0) ).getAnchor()
			GetFootNoteDataTest( oDoc, oViewCursor, oLCurs, oRCurs, oListBookMark, sRegFind, oTOS, oProgressBar, _
								lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
								lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
								nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
			&apos; сгенерировать отчет и запустить его на просмотр
			&apos; записываем в файл отчета &quot;шапку&quot; - название режима
			SaveStartReportText( oTOS, sBTEND.sTestMode1 )
			&apos; печатаем номер тестируемой зоны (глава и ее Список примечаний) - вся книга
			oTOS.writeString( &quot;&lt;font color=red&gt;&lt;h2 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestZoneSearch &amp; &quot; &quot; &amp; sBTEND.sTestChapterAndNotesList &amp; &quot; - &quot; &amp; l &amp; &quot;&lt;/h2&gt;&lt;/font&gt;&quot; &amp; chr(10) )
			MakeReport( oTOS, lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
						lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
						nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText(), _
						vaZoneFlagsArray(), 0, &quot;-&quot;, sConstBookMarkListNote )
			oProgressBar.setValue( 2 )
			&apos; печать финальных таблиц - какие зоны требуют вмешательства, а какие - не требуют
			SaveTablesFinalReport( oTOS, vaZoneFlagsArray() )
			&apos; завершающая часть отчета
			SaveEndReportText( oTOS )
			oProgressBar.End
		ElseIf oBuildFootEndNoteDlg.GetControl( &quot;optbtnFNTextAfterEachChapter&quot; ).State Then
			&apos; Тест для Режима 2: список примечаний - после каждой главы
			&apos;проверка - есть ли хоть одна закладка L-зоны
			aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
			If UBound( aLBookMarks() ) = -1 Then
				MsgBox sBTEND.sNotFoundBookmarkZoneForNoteNumber, 64, sBTEND.sTestMode2
				&apos;oBuildFootEndNoteDlg.Enable = True
				Exit Sub	
			End If
			
			&apos;проверка - соответствует ли число закладок L-зоны числу закладок списков текста сносок
			If UBound( aLBookMarks() ) &lt;&gt; UBound( aRBookMarks() ) Then
				MsgBox sBTEND.sLBCountNotEqualRBCount &amp; chr(10) &amp; chr(10) &amp; _
						sBTEND.sTestBookmarkForStatChapter &amp; &quot;: &quot; &amp; UBound( aLBookMarks() )+1 &amp; chr(10) &amp; _
						sBTEND.sTestBookmarkForListNotes &amp; &quot;: &quot; &amp; UBound( aRBookMarks() )+1 &amp; chr(10), 64, sBTEND.sTestMode2
				&apos;oBuildFootEndNoteDlg.Enable = True
				Exit Sub	
			End If
			
			&apos; сгенерировать отчет и запустить его на просмотр
			&apos; записываем в файл отчета &quot;шапку&quot; - название режима
			SaveStartReportText( oTOS, sBTEND.sTestMode2 )
			SaveZonesCount( oTOS, UBound( aLBookMarks() )+1, UBound( aRBookMarks() )+1 )
			
			oStartCurs = oBookMarks.getByName( aLBookMarks(0) ).getAnchor()
			oLCurs.gotoRange( oStartCurs.getEnd(), False )
			
			For l=0 To UBound( aRBookMarks() )
				&apos; печатаем номер очередной тестируемой зоны (глава и ее Список примечаний)
				oTOS.writeString( &quot;&lt;font color=red&gt;&lt;h2 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestZoneSearch &amp; &quot; &quot; &amp; sBTEND.sTestChapterAndNotesList &amp; &quot; - &quot; &amp; l &amp; &quot;&lt;/h2&gt;&lt;/font&gt;&quot; &amp; chr(10) )
				oRCurs = oBookMarks.getByName( aRBookMarks(l) ).getAnchor()
				oListBookMark = oBookMarks.getByName( aRBookMarks(l) ).getAnchor()
				GetFootNoteDataTest( oDoc, oViewCursor, oLCurs, oRCurs, oListBookMark, sRegFind, oTOS, oProgressBar, _
									lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
									lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
									nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
				MakeReport( oTOS, lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
							lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
							nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText(), _
							vaZoneFlagsArray(), l, aLBookMarks(l), aRBookMarks(l) )
				&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
				With oLCurs
					.gotoRange( oRCurs.getEnd(), False )
					.goRight( 1, False )
				End With
				&apos; очищение всех рабочих массивов для следующего прохода теста
				RedimAllArrays( saNumbersInText(), vaRepeatNumbersInText(), saNumbersInList(), vaRepeatNumbersInList(), _
								nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
			Next l
			oProgressBar.setValue( 2 )
			&apos; печать финальных таблиц - какие зоны требуют вмешательства, а какие - не требуют
			SaveTablesFinalReport( oTOS, vaZoneFlagsArray() )
			&apos; завершающая часть отчета
			SaveEndReportText( oTOS )
			oProgressBar.End
		ElseIf oBuildFootEndNoteDlg.GetControl( &quot;optbtnAllChaptersFNTextAtEndOf&quot; ).State Then
			&apos; Тест Режима 3: все списки примечаний - в конце книги		
			&apos;проверка - есть ли хоть одна закладка L-зоны
			aLBookMarks = GetFindListNoteZones( oBookMarks, sConstBookMarkNZoneNote )
			If UBound( aLBookMarks() ) = -1 Then
				MsgBox sBTEND.sNotFoundBookmarkZoneForNoteNumber, 64, sBTEND.sTestMode3
				&apos;oBuildFootEndNoteDlg.Enable = True
				Exit Sub	
			End If
		
			&apos;проверка - соответствует ли число закладок L-зоны числу закладок списков текста сносок
			If UBound( aLBookMarks() ) &lt;&gt; UBound( aRBookMarks() ) Then
				MsgBox sBTEND.sLBCountNotEqualRBCount &amp; chr(10) &amp; chr(10) &amp; _
						sBTEND.sTestBookmarkForStatChapter &amp; &quot;: &quot; &amp; UBound( aLBookMarks() )+1 &amp; chr(10) &amp; _
						sBTEND.sTestBookmarkForListNotes &amp; &quot;: &quot; &amp; UBound( aRBookMarks() )+1 &amp; chr(10), 64, sBTEND.sTestMode3
				&apos;oBuildFootEndNoteDlg.Enable = True
				Exit Sub	
			End If
			
			&apos; сгенерировать отчет и запустить его на просмотр
			&apos; записываем в файл отчета &quot;шапку&quot; - название режима
			SaveStartReportText( oTOS, sBTEND.sTestMode3 )
			SaveZonesCount( oTOS, UBound( aLBookMarks() )+1, UBound( aRBookMarks() )+1 )
			&apos; получаем L-зоны для поиска номеров примечаний
			For l=0 To UBound( aRBookMarks() )
				&apos; левая граница поиска номеров сносок - текстовый курсор на очередной закладке (начало главы и т.д.)
				Dim oLBMs As Object : oLBMs = oBookMarks.getByName( aLBookMarks(l) ).getAnchor()
				oLCurs.gotoRange( oLBMs, False )
				&apos; правая граница - следующая левая граница или начало 1-й закладки списка сносок
				If l &lt; UBound( aRBookMarks() ) Then
					oRCurs = oBookMarks.getByName( aLBookMarks(l+1) ).getAnchor()
				Else
					oRCurs = oBookMarks.getByName( aRBookMarks(0) ).getAnchor()
				End If

				&apos; печатаем номер очередной тестируемой зоны (глава и ее Список примечаний)
				oTOS.writeString( &quot;&lt;font color=red&gt;&lt;h2 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestZoneSearch &amp; &quot; &quot; &amp; sBTEND.sTestChapterAndNotesList &amp; &quot; - &quot; &amp; l &amp; &quot;&lt;/h2&gt;&lt;/font&gt;&quot; &amp; chr(10) )
				oListBookMark = oBookMarks.getByName( aRBookMarks(l) ).getAnchor()
				GetFootNoteDataTest( oDoc, oViewCursor, oLCurs, oRCurs, oListBookMark, sRegFind, oTOS, oProgressBar, _
									lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
									lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
									nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
				MakeReport( oTOS, lCountAllTextNotes, saNumbersInText(), vaRepeatNumbersInText(), _
							lCountAllListNotes, saNumbersInList(), vaRepeatNumbersInList(), _
							nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText(), _
							vaZoneFlagsArray(), l, aLBookMarks(l), aRBookMarks(l) )
				&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров примечаний
				With oLCurs
					.gotoRange( oRCurs.getEnd(), False )
					.goRight( 1, False )
				End With
				&apos; очищение всех рабочих массивов для следующего прохода теста
				RedimAllArrays( saNumbersInText(), vaRepeatNumbersInText(), saNumbersInList(), vaRepeatNumbersInList(), _
								nAbsentNumbersInText(), nAbsentNumbersInList(), naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
			Next l
			oProgressBar.setValue( 2 )
			&apos; печать финальных таблиц - какие зоны требуют вмешательства, а какие - не требуют
			SaveTablesFinalReport( oTOS, vaZoneFlagsArray() )
			&apos; завершающая часть отчета
			SaveEndReportText( oTOS )
			oProgressBar.End
		End If
		oTOS.closeOutput()
		&apos; запускаем сгенерированный отчет на просмотр
		Dim oSSE As Object
		oSSE = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
		oSSE.execute( sReport, &quot;&quot;, 0 )
	End If
	&apos;oBuildFootEndNoteDlg.Enable = True
End Sub

&apos; очищение всех рабочих массивов для следующего прохода теста
Sub RedimAllArrays( saNumbersInText() As String, vaRepeatNumbersInText() As Variant, _
					saNumbersInList() As String, vaRepeatNumbersInList() As Variant, _
					nAbsentNumbersInText() As Integer, nAbsentNumbersInList() As Integer, _
					naAbsentTextNumbersInList() As Integer, naAbsentListNumbersInText() As Integer )
	Redim saNumbersInText()
	Redim vaRepeatNumbersInText()
	Redim saNumbersInList()
	Redim vaRepeatNumbersInList()
	Redim nAbsentNumbersInText()
	Redim nAbsentNumbersInList()
	Redim naAbsentTextNumbersInList()
	Redim naAbsentListNumbersInText()
End Sub

&apos; Тест для режима: Нумерация - сквозная; Общий список примечаний - в конце книги
Sub GetFootNoteDataTest( oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, oListBookMark As Object, _
						sRegFind As String, oTOS As Object, oProgressBar As Object, _
						lCountAllTextNotes As Long, saNumbersInText() As String, vaRepeatNumbersInText() As Variant, _
						lCountAllListNotes As Long, saNumbersInList() As String, vaRepeatNumbersInList() As Variant, _
						nAbsentNumbersInText() As Integer, nAbsentNumbersInList() As Integer, _
						naAbsentTextNumbersInList() As Integer, naAbsentListNumbersInText() As Integer )
	oProgressBar.start( sBTEND.sTestDataGathering &amp; &quot;:&quot;, 2 )
	oProgressBar.setValue( 1 )
		
	&apos; сбор информации по номерам примечаний из текста
	lCountAllTextNotes = GetDataForTestComplexFootNote( oDoc, oViewCursor, oLCurs, oRCurs, sRegFind, saNumbersInText(), True )
	oProgressBar.setValue( 2 )
	
	&apos; сбор информации по номерам примечаний из списка примечаний
	&apos; перевод курсора на начала закладки зоны поиска списка примечаний
	oViewCursor.gotoRange( oRCurs.getStart(), False )
	lCountAllListNotes = GetDataForTestComplexFootNote( oDoc, oViewCursor, oListBookMark.getStart(), oListBookMark.getEnd(), _
														GetRegStringNFNInListForNextFind(), saNumbersInList(), False )
	oProgressBar.start( sBTEND.sTestDataAnalysis &amp; &quot;:&quot;, 13 )
	oProgressBar.setValue( 1 )
	
	&apos; тест на наличие одинаковых номеров примечаний в Тексте
	TestForIdenticalNumbers( saNumbersInText(), vaRepeatNumbersInText() )
	oProgressBar.setValue( 2 )
			
	&apos; тест на наличие одинаковых номеров примечаний в Списке примечаний
	TestForIdenticalNumbers( saNumbersInList(), vaRepeatNumbersInList() )
	oProgressBar.setValue( 3 )
			
	&apos; тест на наличие отсутствующих номеров примечаний в Тексте
	TestForAbsentNumbers( saNumbersInText(), nAbsentNumbersInText() )
	oProgressBar.setValue( 4 )
	
	&apos; тест на наличие отсутствующих номеров примечаний в Списке примечаний
	TestForAbsentNumbers( saNumbersInList(), nAbsentNumbersInList() )
	oProgressBar.setValue( 5 )
			
	&apos; какие номера примечаний из текста отсутствуют в списке примечаний, и какие номера примечаний из списка примечаний отсутствуют в тексте
	TestAbsentTextOrListNumbersInListOrText( oProgressBar, saNumbersInText(), saNumbersInList(), _
													naAbsentTextNumbersInList(), naAbsentListNumbersInText() )
	oProgressBar.start( sBTEND.sTestProgressReport &amp; &quot;:&quot;, 2 )
	oProgressBar.setValue( 1 )
End Sub

&apos; Сбор информации по номерам из Текста для теста сложной генерации сносок - режим: Нумерация - сквозная; Общий список примечаний - в конце книги.
Function GetDataForTestComplexFootNote( oDoc As Object, oViewCursor As Object, oLCurs As Object, oRCurs As Object, _
									sRegFind As String, saNumbers() As String, bInText As Boolean ) As Long
	GetDataForTestComplexFootNote = 0
	If IsNull(oViewCursor) Or IsNull(oDoc) Or IsNull(oLCurs) Or IsNull(oRCurs) Then Exit Function
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Function &apos; вышли за правую границу или прямо на ней
	
	&apos; поиск с регулярными выражениями
	Dim vSearch As Variant
	
	Dim bModeNumbersUpIndex As Boolean : bModeNumbersUpIndex = False
	If sRegFind = &quot;NumbersUpIndex&quot; Then bModeNumbersUpIndex = True
	
	&apos; ищем заданный номер сноски в блоке текста сносок
	Dim vFound As Variant 
	
	If bModeNumbersUpIndex = True Then
		If bInText = True Then
			vFound = FindNumbersUpIndexText( oLCurs.getStart() )
		Else
			vFound = FindNumbersUpIndexList( oLCurs.getStart() )
		End If
	Else
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchRegularExpression = True
			.SearchString = sRegFind
		End With
		vFound = oDoc.findNext( oLCurs.getStart(), vSearch )
	End If
	
	&apos; ищем заданный шаблон
	On Error Resume Next
	Dim lCountAllNotes	As Long	: lCountAllNotes = 0
	If Not IsNull( vFound ) Then &apos; нашли
		Do While ( Not IsNull( vFound ) )
			If vFound.ParaStyleName &lt;&gt; &quot;Footnote&quot; And vFound.ParaStyleName &lt;&gt; &quot;Endnote&quot;	Then
				If vFound.ParaStyleName &lt;&gt; &quot;Frame contents&quot; And vFound.ParaStyleName &lt;&gt; &quot;Table Contents&quot; Then
					If oDoc.Text.compareRegionEnds(vFound.getEnd(), oRCurs.getStart()) &lt;= 0 Then
						GetDataForTestComplexFootNote = lCountAllNotes
						Exit Function &apos; вышли за правую границу или прямо на ней
					End If
				End If
				If Not IsEmpty( vFound.TextTable ) Then &apos; номер очередной сноски находится в таблице
					&apos; перепрыгиваем таблицу - не обрабатываем ее
					oViewCursor.gotoRange( vFound, False )
					CursorAfterCurrentTextTable( oViewCursor )
					&apos; &quot;опускаем&quot; верхнюю границу зоны поиска номеров сносок
					If bModeNumbersUpIndex = True Then
						If bInText = True Then
							vFound = FindNumbersUpIndexText( oViewCursor.getStart() )
						Else
							vFound = FindNumbersUpIndexList( oViewCursor.getStart() )
						End If
					Else
						vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
					End If
				ElseIf Not IsEmpty( vFound.TextFrame ) Then &apos; номер очередной сноски находится в текстовой врезке
					&apos; перепрыгиваем через врезку - не обрабатываем ее.
					oViewCursor.gotoRange( vFound.TextFrame.getEnd(), False )
					If bModeNumbersUpIndex = True Then
						If bInText = True Then
							vFound = FindNumbersUpIndexText( oViewCursor.getStart() )
						Else
							vFound = FindNumbersUpIndexList( oViewCursor.getStart() )
						End If
					Else
						vFound = oDoc.findNext( oViewCursor.getStart(), vSearch )
					End If
				Else &apos; просто текст
					If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &gt;= 0 Then &apos; если не вышли за правую границу или прямо на ней
						oViewCursor.gotoRange( vFound, False )
						AddNewItemToArray1( saNumbers(), vFound.getString() )
						lCountAllNotes = lCountAllNotes+1
						If bModeNumbersUpIndex = True Then
							If bInText = True Then
								vFound = FindNumbersUpIndexText( vFound.getEnd() )
							Else
								vFound = FindNumbersUpIndexList( vFound.getEnd() )
							End If
						Else
							vFound = oDoc.findNext( vFound.getEnd(), vSearch )
						End If
					Else
						GetDataForTestComplexFootNote = lCountAllNotes
						Exit Function
					End if
				End If
			Else
				vFound = oDoc.findNext( vFound.getEnd(), vSearch )
			End If
		Loop
	End If
	GetDataForTestComplexFootNote = lCountAllNotes
End Function

&apos; тест на наличие одинаковых номеров примечаний в зоне поиска
Sub TestForIdenticalNumbers( saNumbers() As String, vaNumbersRepeat() As Variant )
	If UBound( saNumbers() ) = -1 Then Exit Sub
	Dim l As Long, s As String
	Dim lCount As Long : lCount = 0
	Dim b As Boolean 
	For l=0 To UBound( saNumbers() )
		lCount = 0 : b = False
		s = saNumbers( l )
		Dim ll As Long
		For ll=0 To UBound( saNumbers() )
			If l &lt;&gt; ll Then
				If s = saNumbers( ll ) Then
					b = True
					lCount = lCount+1
				End If
			End If
		Next ll
		If b = True Then &apos; нет текущего номера
			Dim t As tTestDataRepeat
			t.sFind = s
			t.lCount = lCount+1
			&apos; заносим результат в массив
			Dim k As Long
			k = Ubound( vaNumbersRepeat() ) + 1
			ReDim Preserve vaNumbersRepeat(k)
			vaNumbersRepeat(k) = t
		End If
	Next l
	&apos; убираем повторяющиеся
	vaNumbersRepeat() = RemoveIdenticalNonSortArrayElements_var( vaNumbersRepeat() )
End Sub

&apos; удаление из не сортированного variant массива всех одинаковых элементов
Function RemoveIdenticalNonSortArrayElements_var( vaArray() As Variant ) As Array
	If UBound( vaArray() ) = -1 Then Exit Function
	Dim l As Long, i As Long
	Dim vaTemp() As Variant
	For l=0 To UBound( vaArray() )
		If Not IsExsistsElement( vaTemp(), vaArray(l) ) Then
			AddNewItemToVarArray1( vaTemp(), vaArray(l) )
		End If	
	Next l
	RemoveIdenticalNonSortArrayElements_var = vaTemp()
End Function

Function IsExsistsElement( vaArray() As Variant, v As Variant ) As Boolean
	IsExsistsElement = False
	If UBound( vaArray() ) = -1 Then Exit Function
	Dim l As Long
	For l=0 To UBound( vaArray() )
		If v.sFind = vaArray(l).sFind Then
			IsExsistsElement = True
			Exit Function
		End If
	Next l
End Function

&apos; тест на наличие отсутствующих номеров примечаний в зоне поиска
Sub TestForAbsentNumbers( saNumbers() As String, nAbsentNumbers() As Integer )
	If UBound( saNumbers() ) = -1 Then Exit Sub
	Dim l As Long
	&apos; выделяем номера числом из найденного
	Dim iaSort() As Integer
	For l=0 To UBound( saNumbers() )
		AddNewItemToIntArray1( iaSort(), Val( GetNumberFromString( saNumbers(l) ) ) )
	Next l
	&apos; сортируем список номеров
	bubble_sort_int( iaSort(), Ubound( iaSort() )+1 )
	Dim nMin As Integer, nMax As Integer
	nMin = iaSort( 0 ) : nMax = iaSort( Ubound( iaSort() ) )
	&apos; число всех элементов должно быть равно максимальному значению. Если это не так - то каких-то элементов нет
	If nMax &lt;&gt; UBound( iaSort() ) Then
		&apos; перебор по всем элементам
		Dim nPrev As Integer, nCurrent As Integer : nPrev = iaSort( 0 )
		For l=1 To UBound( iaSort() )
			nCurrent = iaSort( l )
			&apos; если текущий элемент &gt; предыдущего более, чем на 1 - то разница между ними - номера отсутствующих элементов
			If nCurrent - nPrev &gt; 1 Then
				Dim i As Integer
				For i=nPrev+1 To nCurrent-1
					AddNewItemToIntArray1( nAbsentNumbers(), i )
				Next i
				nPrev = nCurrent
			Else
				nPrev = nCurrent
			End If
		Next l
	End If
End Sub

&apos; какие номера примечаний из текста отсутствуют в списке примечаний
Sub TestAbsentTextOrListNumbersInListOrText( oProgressBar As Object, saNumbersInText() As String, saNumbersInList() As String, _
											naAbsentTextNumbersInList() As Integer, naAbsentTextNumbersInText() As Integer )
	If UBound( saNumbersInText() )=-1 Or UBound( saNumbersInList )=-1 Then Exit Sub
	&apos; созлаем сортированный массив из чисел номеров примечаний в Тексте
	Dim l As Long, i As Long
	Dim iaNumbersInTextSort() As Integer
	For l=0 To UBound( saNumbersInText() )
		AddNewItemToIntArray1( iaNumbersInTextSort(), Val( GetNumberFromString( saNumbersInText(l) ) )
	Next l
	oProgressBar.setValue( 6 )
	&apos; сортируем список номеров
	bubble_sort_int( iaNumbersInTextSort(), Ubound( iaNumbersInTextSort() )+1 )
	oProgressBar.setValue( 7 )
	&apos; удаляем одинаковые элементы из массива, если они есть
	iaNumbersInTextSort() = RemoveIdenticalSortArrayElements_int( iaNumbersInTextSort() )
	oProgressBar.setValue( 8 )
	
	&apos; созлаем сортированный массив из чисел номеров примечаний в Тексте
	Dim iaNumbersInListSort() As Integer
	For l=0 To UBound( saNumbersInList() )
		AddNewItemToIntArray1( iaNumbersInListSort(), Val( GetNumberFromString( saNumbersInList(l) ) )
	Next l
	oProgressBar.setValue( 9 )
	&apos; сортируем список номеров
	bubble_sort_int( iaNumbersInListSort(), Ubound( iaNumbersInListSort() )+1 )
	oProgressBar.setValue( 10 )
	&apos; удаляем одинаковые элементы из массива, если они есть
	iaNumbersInListSort() = RemoveIdenticalSortArrayElements_int( iaNumbersInListSort() )
	oProgressBar.setValue( 11 )
	
	&apos; смотрим, есть каждый номер из iaNumbersInTextSort в iaNumbersInListSort
	Dim nCurrent As Integer, b As Boolean : b = False
	For l=0 To UBound( iaNumbersInTextSort() )
		nCurrent = iaNumbersInTextSort(l)
		For i=0 To UBound( iaNumbersInListSort() )
			If nCurrent = iaNumbersInListSort(i) Then
				b = True
				Exit For
			Else
				b = False
			End If
		Next i
		If Not b Then &apos; нет текущего номера из Текста в Списке
			AddNewItemToIntArray1( naAbsentTextNumbersInList(), nCurrent )
		End If
	Next l
	oProgressBar.setValue( 12 )
	
	&apos; смотрим, есть каждый номер из iaNumbersInTextSort в iaNumbersInTextSort
	b = False
	For l=0 To UBound( iaNumbersInListSort() )
		nCurrent = iaNumbersInListSort(l)
		For i=0 To UBound( iaNumbersInTextSort() )
			If nCurrent = iaNumbersInTextSort(i) Then
				b = True
				Exit For
			Else
				b = False
			End If
		Next i
		If Not b Then &apos; нет текущего номера из Списка в Тексте
			AddNewItemToIntArray1( naAbsentTextNumbersInText(), nCurrent )
		End If
	Next l
	oProgressBar.setValue( 13 )
End Sub

&apos; создание отчета о работе Теста генерации сносок
Sub MakeReport( oTOS As Object, lCountAllTextNotes As Long, saNumbersInText() As String, vaRepeatNumbersInText() As Variant, _
				lCountAllListNotes As Long, saNumbersInList() As String, vaRepeatNumbersInList() As Variant, _
				nAbsentNumbersInText() As Integer, nAbsentNumbersInList() As Integer, _
				naAbsentTextNumbersInList() As Integer, naAbsentListNumbersInText() As Integer, _
				vaZoneFlagsArray() As Variant, nZoneNumber As Long, sLBookMark As String, sRBookMark As String )
	&apos; все данные-флаги по конкретной зоне поиска - инициализация
	Dim t As tTestDataFlags 
	t.nZoneNumber						= nZoneNumber &apos; порядковый номер тестируемой зоны (глава и ее список примечаний)
	t.nCountFindNumbersInText			= lCountAllTextNotes &apos; Число найденных номеров Примечаний в Тексте, удовлетворяющий шаблону поиска
	t.nCountFindNumbersInList			= lCountAllListNotes &apos; Число найденных номеров Примечаний в Списке, удовлетворяющий шаблону поиска
	t.nTestRepeatingNumbersInText		= 0
	t.nTestRepeatingNumbersInList		= 0
	t.nTestAbsentNumbersInText			= 0
	t.nTestAbsentNumbersInList			= 0
	t.nTestAbsentNumbersFromTextInList	= 0
	t.nTestAbsentNumbersFromListInText	= 0
	t.sLBookMark = sLBookMark
	t.sRBookMark = sRBookMark
	
	&apos; зона теста - глава книги
	Dim s As String, l As Long
	s = &quot;&lt;font color=&quot;&quot;#0000ff&quot;&quot;&gt;&lt;h2&gt;&quot; &amp; sBTEND.sTestBookChapter &amp; &quot;:&lt;/h2&gt;&lt;/font&gt;&quot; &amp; chr(10)
	oTOS.writeString( s )

	s = &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestProcessedNotesNumbersInText &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lCountAllTextNotes &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestUniqueNumbersInText &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	
	Dim lBound As Long : lBound = -1
	Dim lUnique As Long
	If Not IsNull( vaRepeatNumbersInText() ) Then
		If UBound( vaRepeatNumbersInText() ) &gt; -1 Then
			lBound = UBound( vaRepeatNumbersInText() )
			t.nTestRepeatingNumbersInText = lBound+1 &apos; есть повторяющиеся номера примечаний в главе
			For l=0 To lBound
				lUnique = lUnique + vaRepeatNumbersInText(l).lCount
			Next l
		End If
	End If
	lUnique = lCountAllTextNotes - lUnique
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lUnique &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestRepeatingNumbersInText &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestAbsentNumbersInText &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	lBound = -1
	If Not IsNull( nAbsentNumbersInText() ) Then
		If UBound( nAbsentNumbersInText() ) &gt; -1 Then
			lBound = UBound( nAbsentNumbersInText() )
			t.nTestAbsentNumbersInText = lBound+1 &apos; есть отсутствующие номера примечаний в Главе
		End If
	End If
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestAbsentNumbersFromTextInList &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	lBound = -1
	If Not IsNull( naAbsentTextNumbersInList() ) Then
		If UBound( naAbsentTextNumbersInList() ) &gt; -1 Then
			lBound = UBound(naAbsentTextNumbersInList() )
			t.nTestAbsentNumbersFromTextInList = lBound+1 &apos; есть отсутствующие номера примечаний из Главы в Списке
		End If
	End If
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
	
	oTOS.writeString( s )
	
	&apos; для Главы книги
	If Not IsNull( saNumbersInText() ) Then
		If UBound( saNumbersInText() ) &gt; -1 Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestProcessedNotesNumbersInText &amp; &quot;:&lt;/h3&gt;&quot;
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( saNumbersInText() )
				s = s &amp; saNumbersInText(l)
				If l &lt;&gt; Ubound( saNumbersInText() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	
	Dim iaUniqueNumbers() As Integer
	For l=0 To UBound( saNumbersInText() )
		AddNewItemToIntArray1( iaUniqueNumbers(), Val( GetNumberFromString( saNumbersInText(l) ) )
	Next l
	&apos; удаляем одинаковые элементы из массива, если они есть
	iaUniqueNumbers() = RemoveIdenticalNonSortArrayElements_int( iaUniqueNumbers() )
	If Not IsNull( iaUniqueNumbers() ) Then
		If UBound( iaUniqueNumbers() ) &gt; -1 Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestUniqueNumbersInText &amp; &quot;:&lt;/h3&gt;&quot;
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( iaUniqueNumbers() )
&apos;				s = s &amp; Mid( saNumbersInText(0), 1, 1 ) &amp; iaUniqueNumbers(l) &amp; Mid( saNumbersInText(0), Len( saNumbersInText(0) ), 1 )
				s = s &amp; iaUniqueNumbers(l)
				If l &lt;&gt; Ubound( iaUniqueNumbers() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	
	If Not IsNull( vaRepeatNumbersInText() ) Then
		If Ubound( vaRepeatNumbersInText() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestRepeatingNumbersInText &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestNoteNumber &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;td&gt;&quot; &amp; sBTEND.sTestNoteQuantity &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( vaRepeatNumbersInText() )
				s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; vaRepeatNumbersInText(l).sFind &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
				s = s &amp; &quot;&lt;td&gt;&quot; &amp; vaRepeatNumbersInText(l).lCount &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
			Next l
			s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	If Not IsNull( nAbsentNumbersInText() ) Then
		If Ubound( nAbsentNumbersInText() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestAbsentNumbersInText &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( nAbsentNumbersInText() )
&apos;				s = s &amp; Mid( saNumbersInText(0), 1, 1 ) &amp; nAbsentNumbersInText(l) &amp; Mid( saNumbersInText(0), Len( saNumbersInText(0) ), 1 )
				s = s &amp; nAbsentNumbersInText(l)
				If l &lt;&gt; Ubound( nAbsentNumbersInText() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	If Not IsNull( naAbsentTextNumbersInList() ) Then
		If Ubound( naAbsentTextNumbersInList() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestAbsentNumbersFromTextInList &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( naAbsentTextNumbersInList() )
&apos;				s = s &amp; Mid( saNumbersInText(0), 1, 1 ) &amp; naAbsentTextNumbersInList(l) &amp; Mid( saNumbersInText(0), Len( saNumbersInText(0) ), 1 )
				s = s &amp; naAbsentTextNumbersInList(l)
				If l &lt;&gt; Ubound( naAbsentTextNumbersInList() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If

	&apos; /////////////// Тестируем Список примечаний /////////////////
	s = chr(10)
	s = s &amp; &quot;&lt;font color=&quot;&quot;#0000ff&quot;&quot;&gt;&lt;h2&gt;&quot; &amp; sBTEND.sTestNotesList &amp; &quot;:&lt;/h2&gt;&lt;/font&gt;&quot; &amp; chr(10)
	oTOS.writeString( s )

	s = &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestProcessedNotesNumbersInList &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lCountAllListNotes &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestUniqueNumbersInList &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	lUnique = 0
	lBound = -1
	If Not IsNull( vaRepeatNumbersInList() ) Then
		If UBound( vaRepeatNumbersInList() ) &gt; -1 Then
			lBound = UBound( vaRepeatNumbersInList() )
			t.nTestRepeatingNumbersInList = lBound+1 &apos; есть повторяющиеся номера примечаний в Списке
			For l=0 To lBound
				lUnique = lUnique + vaRepeatNumbersInList(l).lCount
			Next l
		End If
	End If
	lUnique = lCountAllListNotes - lUnique
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lUnique &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestRepeatingNumbersInList &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestAbsentNumbersInList &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	lBound = -1
	If Not IsNull( nAbsentNumbersInList() ) Then
		If UBound( nAbsentNumbersInList() ) &gt; -1 Then
			lBound = UBound(nAbsentNumbersInList() )
			t.nTestAbsentNumbersInList = lBound+1 &apos; есть отсутствующие номера примечаний в Списке
		End If
	End If
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestAbsentNumbersFromListInText &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	lBound = -1
	If Not IsNull( naAbsentListNumbersInText() ) Then
		If UBound( naAbsentListNumbersInText() ) &gt; -1 Then
			lBound = UBound(naAbsentListNumbersInText() )
			t.nTestAbsentNumbersFromListInText = lBound+1 &apos; есть отсутствующие номера примечаний из Списка в Главе
		End If
	End If
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lBound+1 &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
	oTOS.writeString( s )
	
	If Not IsNull( saNumbersInList() ) Then
		If UBound( saNumbersInList() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestProcessedNotesNumbersInList &amp; &quot;:&lt;/h3&gt;&quot;
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( saNumbersInList() )
				s = s &amp; saNumbersInList(l)
				If l &lt;&gt; Ubound( saNumbersInList() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	
	Dim iaUniqueNumbersList() As Integer
	For l=0 To UBound( saNumbersInList() )
		AddNewItemToIntArray1( iaUniqueNumbersList(), Val( GetNumberFromString( saNumbersInList(l) ) )
	Next l
	&apos; удаляем одинаковые элементы из массива, если они есть
	iaUniqueNumbersList() = RemoveIdenticalNonSortArrayElements_int( iaUniqueNumbersList() )
	If Not IsNull( iaUniqueNumbersList() ) Then
		If UBound( iaUniqueNumbersList() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestUniqueNumbersInList &amp; &quot;:&lt;/h3&gt;&quot;
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( iaUniqueNumbersList() )
				s = s &amp; iaUniqueNumbersList(l)
				If l &lt;&gt; Ubound( iaUniqueNumbersList() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	
	If Not IsNull( vaRepeatNumbersInList() ) Then
		If Ubound( vaRepeatNumbersInList() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestRepeatingNumbersInList &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestNoteNumber &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;td&gt;&quot; &amp; sBTEND.sTestNoteQuantity &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( vaRepeatNumbersInList() )
				s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; vaRepeatNumbersInList(l).sFind &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
				s = s &amp; &quot;&lt;td&gt;&quot; &amp; vaRepeatNumbersInList(l).lCount &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
			Next l
			s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	If Not IsNull( nAbsentNumbersInList() ) Then
		If Ubound( nAbsentNumbersInList() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestAbsentNumbersInList &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( nAbsentNumbersInList() )
				s = s &amp; nAbsentNumbersInList(l)
				If l &lt;&gt; Ubound( nAbsentNumbersInList() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	If Not IsNull( naAbsentListNumbersInText() ) Then
		If Ubound( naAbsentListNumbersInText() ) &gt; -1  Then
			s = &quot;&lt;h3&gt;&quot; &amp; sBTEND.sTestAbsentNumbersFromListInText &amp; &quot;:&lt;/h3&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; chr(10)
			For l=0 To Ubound( naAbsentListNumbersInText() )
				s = s &amp; naAbsentListNumbersInText(l)
				If l &lt;&gt; Ubound( naAbsentListNumbersInText() ) Then s = s &amp; &quot; &apos; &quot;
			Next l
			s = s &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10)
			oTOS.writeString( s )
		End If
	End If
	
	&apos; заносим результат в массив
	Dim k As Long : k = Ubound( vaZoneFlagsArray() ) + 1
	ReDim Preserve vaZoneFlagsArray(k)
	vaZoneFlagsArray(k) = t
End Sub


Sub SaveStartReportText( oTOS As Object, sMode as String )
	Dim s As String
	s = &quot;&lt;html&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;meta http-equiv=&quot;&quot;content-type&quot;&quot; content=&quot;&quot;text/html; charset=utf-8&quot;&quot;&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;body&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;font color=&quot;&quot;#FF0000&quot;&quot;&gt;&lt;h1 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestResults &amp; &quot;&lt;/h1&gt;&lt;/font&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;font color=green&gt;&lt;h1 ALIGN=CENTER&gt;&quot; &amp; sMode &amp; &quot;&lt;/h1&gt;&lt;/font&gt;&quot; &amp; chr(10) &amp; chr(10)
	oTOS.writeString( s )
End Sub

Sub SaveEndReportText( oTOS As Object )
	Dim s As String
	s = &quot;&lt;font color=red&gt;&lt;h2 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestAnalysisOfResult &amp; &quot;&lt;/h2&gt;&lt;/font&gt;&quot;
	s = s &amp; &quot;&lt;p&gt;&quot; &amp; sBTEND.sTestCorrectlyBook &amp; &quot;:&lt;/p&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;p&gt;&quot; &amp; sBTEND.sTestCorrectlyBook1 &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;p&gt;&quot; &amp; sBTEND.sTestCorrectlyBook2 &amp; &quot;&lt;/p&gt;&quot;
	s = s &amp; &quot;&lt;p&gt;&quot; &amp; sBTEND.sTestCorrectlyBook3 &amp; &quot;&lt;/p&gt;&quot;
	s = s &amp; &quot;&lt;font color=green&gt;&lt;p&gt;&quot; &amp; sBTEND.sTestCorrectlyBook4 &amp; &quot;&lt;/p&gt;&lt;/font&gt;&quot;

	s = s &amp; &quot;&lt;/body&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/html&gt;&quot;
	oTOS.writeString( s )
End Sub

Sub SaveZonesCount( oTOS As Object, lCB As Long, lLB As Long  )
	Dim s As String
	s = &quot;&lt;font color=magneta&gt;&lt;h3&gt;&quot; &amp; sBTEND.sTestBookmarkForSearchZones &amp; &quot;:&lt;/h3&gt;&lt;/font&gt;&quot;
	s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestBookmarkForStatChapter &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lCB &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; sBTEND.sTestBookmarkForListNotes &amp; &quot;, &quot; &amp; sBTEND.sCount &amp; &quot;:&lt;/td&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;td&gt;&quot; &amp; lLB &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
	s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10) &amp; chr(10)
	oTOS.writeString( s )
End Sub

&apos; печать финальных таблиц - какие зоны требуют вмешательства, а какие - не требуют
Sub SaveTablesFinalReport( oTOS As Object, vaZoneFlagsArray() As Variant )
	Dim alOk() As Long, alErr() As Long
	Dim l As Long, s As String
	s = &quot;&lt;font color=red&gt;&lt;h2 ALIGN=CENTER&gt;&quot; &amp; sBTEND.sTestGeneralResume &amp; &quot;&lt;/h2&gt;&lt;/font&gt;&quot;
	oTOS.writeString( s )
	
	For l=0 To UBound( vaZoneFlagsArray() )
		If vaZoneFlagsArray(l).nCountFindNumbersInText&gt;0 And vaZoneFlagsArray(l).nCountFindNumbersInList&gt;0 And _
		  	vaZoneFlagsArray(l).nTestRepeatingNumbersInText&lt;=0 And vaZoneFlagsArray(l).nTestRepeatingNumbersInList&lt;=0 And _
			vaZoneFlagsArray(l).nTestAbsentNumbersInText&lt;=0 And vaZoneFlagsArray(l).nTestAbsentNumbersInList&lt;=0 And _
			vaZoneFlagsArray(l).nTestAbsentNumbersFromTextInList&lt;=0 And vaZoneFlagsArray(l).nTestAbsentNumbersFromListInText&lt;=0 Then
			&apos; эта зона не требует ручной правки
			AddNewItemToLongArray1( alOk(), vaZoneFlagsArray(l).nZoneNumber )
		Else
			&apos; эта зона требует ручной правки
			AddNewItemToLongArray1( alErr(), vaZoneFlagsArray(l).nZoneNumber )
		End If
	Next l
	
	&apos; печать: Все OK, если ни одна зона не нуждается в корректировке
	If UBound( alOk() ) &gt; -1 And UBound( alErr() ) = -1 Then
		s = &quot;&lt;font color=magneta&gt;&lt;h3&gt;&quot; &amp; sBTEND.sTestResultOK &amp; &quot;&lt;/h3&gt;&lt;/font&gt;&quot; &amp; chr(10)
		s = s &amp; &quot;&lt;font color=magneta&gt;&lt;h3&gt;&quot; &amp; sBTEND.sTestResultOKMess &amp; &quot;&lt;/h3&gt;&lt;/font&gt;&quot; &amp; chr(10)
		s = s &amp; &quot;&lt;font color=magneta&gt;&lt;h3&gt;&quot; &amp; sBTEND.sTestResultOKMess1 &amp; &quot;&lt;/h3&gt;&lt;/font&gt;&quot; &amp; chr(10)
		oTOS.writeString( s )
		Exit Sub
	End If
	
	&apos; печать таблицы зон, где требуется ручное вмешательство
	If UBound( alErr() ) &gt; -1 Then
		s = &quot;&lt;font color=green&gt;&lt;h3&gt;&quot; &amp; sBTEND.sTestZones &amp; &quot; &quot; &amp; sBTEND.sTestChapterAndNotesList &amp; &quot;, &quot; &amp; sBTEND.sTestNeedyCorrect &amp; &quot;:&lt;/h3&gt;&lt;/font&gt;&quot;
		s = s &amp; &quot;&lt;table border=&quot;&quot;1&quot;&quot;&gt;&quot; &amp; chr(10)
		s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&lt;b&gt;&quot; &amp; &quot; № &quot; &amp; &quot;&lt;/b&gt;&lt;/td&gt;&quot; &amp; chr(10)
		s = s &amp; &quot;&lt;td&gt;&lt;b&gt;&quot; &amp; sBTEND.sTestChapterBookmarkName &amp; &quot;&lt;/b&gt;&lt;/td&gt;&quot; &amp; chr(10)
		s = s &amp; &quot;&lt;td&gt;&lt;b&gt;&quot; &amp; sBTEND.sTestListNotesBookmarkName &amp; &quot;&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
		For l=0 To UBound( alErr() )
			s = s &amp; &quot;&lt;tr&gt;&lt;td&gt;&quot; &amp; alErr(l) &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;td&gt;&quot; &amp; vaZoneFlagsArray( alErr(l) ).sLBookMark &amp; &quot;&lt;/td&gt;&quot; &amp; chr(10)
			s = s &amp; &quot;&lt;td&gt;&quot; &amp; vaZoneFlagsArray( alErr(l) ).sRBookMark &amp; &quot;&lt;/td&gt;&lt;/tr&gt;&quot; &amp; chr(10)
		Next l
		s = s &amp; &quot;&lt;/table&gt;&quot; &amp; chr(10) &amp; chr(10)
		oTOS.writeString( s )
	End If
End Sub

&apos;////////////////////////////////////////////////////// не работает //////////////////////////
&apos; возвращает: True, если в зоне списка закладок aListBookMarks есть Врезка и/или Таблица
&apos; не пустой массив aListBookMarkName() с именами закладок списков примечаний
Function TextFrameOrAndTableExistsInBookmark( aListBookMarks() As Object, aListBookMarkName() As String ) As Boolean
	TextFrameOrAndTableExistsInBookmark = False
	Dim oDoc					As Object	: oDoc = ThisComponent
	Dim i, k					As Integer
	Dim oBookMarks, oBookMark	As Object	: oBookMarks = oDoc.getBookmarks()
	For i=0 To UBound( aListBookMarks() )
		oBookMark = oBookMarks.getByName( aListBookMarks(i) ).getAnchor()
		If Not IsEmpty( oBookMark.TextTable ) Or Not IsEmpty( oBookMark.TextFrame ) Then
			&apos; заносим название закладки, где есть Таблица и/или Врезка в массив
			k = Ubound( aListBookMarkName() ) + 1
			ReDim Preserve aListBookMarkName(k)
			aListBookMarkName(k) = oBookMark.getName()
			TextFrameOrAndTableExistsInBookmark = True
		End If
	Next i
End Function

</script:module>