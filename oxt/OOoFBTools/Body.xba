<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Body" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Public bELForStartAnnot As Boolean

Function IsAECP( sStyle As String ) As Boolean
	&apos; Если sStyle - это Эпиграф, Цитата или Поэма - то возвращается True, иначе - False
	Select Case sStyle
			Case sStylePoem
				IsAECP = True
			Case sStylePoemTitle
				IsAECP = True
			Case sStylePoemSubTitle
				IsAECP = True
			Case sStylePoemAuthor
				IsAECP = True
			Case sStylePoemDate
				IsAECP = True
			Case sStyleCite
				IsAECP = True
			Case sStyleCiteSubTitle
				IsAECP = True
			Case sStyleCiteAuthor
				IsAECP = True
			Case sStyleEpigraph
				IsAECP = True
			Case sStyleEpigraphAuthor
				IsAECP = True
			Case sStyleAnnotationSubTitle
				IsAECP = True
			Case Else
				IsAECP = False
	End Select
End Function

Sub SaveBody()
	Dim lParaCount As Long
	If  IsLevel(sBodyParagraphs(UBound(sBodyParagraphs),1)) = True OR _
		IsAECP(sBodyParagraphs(UBound(sBodyParagraphs),1)) = True Then
		&apos; Защита от &quot;вылетания&quot; конвертора, на случай, если последний абзац - 
		&apos; Уровень (в нарушение схемы), Эпиграф (в нарушение схемы), Поэма, Цитата
	 	&apos; значительно упрощаются функции создания сложных Поэм, Цитата и т.д. -
	 	&apos; Убирается масса проверок на верхний граничный индекс - увеличивается быстродействие конвертора!
		AddBodyArray( &quot;&lt;empty-line/&gt;&quot;, &quot;&quot;, False )
	End If
	
	lParaCount = UBound( sBodyParagraphs )
	oProgressBar.start( sIDD.sFB2ExportProgressBarCreate, lParaCount )
	oProgressBar.setValue(0)
	
	lCurrentElement = 0
	oTextOutputStream.writeString( MakeBookTitle )
	
	MakeBody( sBodyParagraphs, True )
	
End Sub

Sub _MakeBody( sArray As String, bBody As Boolean )
	&apos; 1. Печать абзацев, находящихся до 1-й секции (если они есть)
	&apos; Проверка на наличие Annotation, Cite, Poem Title, Poem, Para, &quot;&quot; (&lt;empty-line&gt;).
	&apos; Если есть, то до них ставим &lt;section&gt;, а перед 1-й секцией &lt;/section&gt;. Epigraph - без &lt;section&gt;...&lt;/section&gt;
	Dim lIndexOf1Section As Long, lParaCount As Long
	Dim bText As Boolean, bTextSmSection As Boolean
	lParaCount = UBound(sArray)
	lIndexOf1Section = IndexOf1Section(sArray)
	bText = False
	bTextSmSection = False
	If lIndexOf1Section = -1 Then &apos; нет ни одной секции
		While sArray(lCurrentElement,1)=sStyleEpigraph
			&apos; Если 1-е элементы - епиграф, то его не берем в &lt;section&gt;, хотя если взять - документ все равно валидный будет
			SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
			If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
&apos;			If lCurrentElement &gt; UBound( sArray() ) Then Exit Function
		Wend
		&apos; Все остальные элементы обрамляем &lt;section&gt;
		If bBody = True Then &apos; только для body книги (не для сносок - лишняя секция)
			oTextOutputStream.writeString(&quot;&lt;section&gt;&quot; &amp; chr(10))
		End If
		While lCurrentElement &lt;= UBound(sArray)
			SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
			If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Wend
		If bBody = True Then &apos; только для body книги (не для сносок - лишняя секция)
			oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
		End If
	Else &apos;секции есть
		If lIndexOf1Section &gt; 0 Then &apos; что-то есть - записываем до 1-й секции
			While lCurrentElement &lt; lIndexOf1Section
				If sArray(lCurrentElement,1)=&quot;Para&quot; OR sArray(lCurrentElement,1)=sStylePoemTitle OR _
					sArray(lCurrentElement,1)=sStylePoem OR sArray(lCurrentElement,1)=sStyleCite OR _
					sArray(lCurrentElement,1)=sStyleSubTitle OR sArray(lCurrentElement,1)=&quot;&quot; OR _
					sArray(lCurrentElement,1)=&quot;Image&quot; OR sArray(lCurrentElement,1)=&quot;Table&quot; OR _
					sArray(lCurrentElement,1)=sStyleAnnotation Then
					If bText = False Then
						oTextOutputStream.writeString(&quot;&lt;section&gt;&quot; &amp; chr(10))
						bText = True
						&apos; &quot;защита&quot; - если после аннотации идет сразу Уровень, то вставляем между ними пустую строку для валидности
						If sArray(lCurrentElement,1)=sStyleAnnotation Then
							bELForStartAnnot = IsNeededELForAnnot( sArray(), lCurrentElement )
						End If
					End If
					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
					If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else &apos; это явно эпиграф
					If bText = True Then
						oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
						SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
						bText = False
						If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
					Else &apos; епиграф самый первый, как и должен 
						SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
						If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
					End If
				End If
				If bText = true AND lCurrentElement = lIndexOf1Section Then
					oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
				End If
			Wend
		End If
		&apos; 2. Печать всех блоков секций, начиная от 1-й
		Dim N As Integer, lNextIndex As Long
		If lIndexOf1Section &lt;&gt; -1 Then &apos; что-то есть
			While lCurrentElement &lt;= lParaCount &apos; по индексам
				lNextIndex = GetIndexOfNextLevel(sArray, lCurrentElement)
				N = GetCountSection(sArray, lCurrentElement, lNextIndex, IndexOfEndSection(sArray))
				If lNextIndex = 0 Then
					lNextIndex = lParaCount + 1
				End If
				While lCurrentElement &lt; lNextIndex
					&apos;печатаем все абзацы между секциями (саму следующую секцию не включаем)
					Dim NN As Integer : NN = IsAdjacentCurrentLevelsOfNextLevel( sArray(), lCurrentElement )
					&apos;NN: например, если Level 1 и 2 - NN=1, 1 и 3 - NN=0, 3 и 1 - NN=-1, 2 и 2 - NN=2
					If NN = 1 Then &apos; смежные уровни
						If N = 0 Then &apos; смежные уровни
							&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
							Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
						End If
					ElseIf NN = 0 Then &apos; не смежные уровни
						If Not IsLevel( sArray( lCurrentElement,1 ) ) Then &apos; текущий элемент - не Level
							If N = 0 Then
								&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
								Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
							ElseIf N &lt; 0 Then &apos; не смежные уровни, а между ними - текст, цитаты...
								If lCurrentElement &gt; IndexOf1Section( sArray() ) Then
									&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
									Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
								End If
								&apos; печать нужного числа открывающих &lt;section&gt;
								SaveOpenSections( sArray(), lCurrentElement )
							End If
						Else  &apos; текущий элемент - Level
							&apos; печать нужного числа открывающих &lt;section&gt;
							SaveOpenSections( sArray(), lCurrentElement )
						End If
					ElseIf NN = -1 Then &apos; не смежные уровни с большего на меньший
						If IsAdjacentCurrentLevelsOfPrevLevel( sArray(), lCurrentElement ) &lt;&gt; 1 Then
							&apos; для несмедных уровней
							&apos; печать нужного числа открывающих &lt;section&gt;
							SaveOpenSections( sArray(), lCurrentElement )
						End If
					End If

					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
					If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Wend
	
				&apos; закрываем секции, взависимости от смежности уровней
				If N = 0 Then &apos; смежные уровни
					If bTextSmSection = True Then &apos; между ними есть текст. требующий взятие его в &lt;section&gt; &lt;/section&gt;
						SaveCloseSection(1)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					End If
				Else &apos; не смежные уровни
					If bTextSmSection = True Then &apos; между ними есть текст. требующий взятие его в &lt;section&gt; &lt;/section&gt;
						SaveCloseSection(1)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					Else
						SaveCloseSection(N)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					End If
				End If
				
			Wend
		End If
	End If
End Sub

Sub Save1OpenSectionForCandidate( sArray() As String, lCurrentElement As Long, bTextSmSection As Boolean )
	&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
	If IsCandidateToSections( sArray(), lCurrentElement ) Then
		If bTextSmSection = False Then
			oTextOutputStream.writeString(&quot;&lt;section&gt;&quot; &amp; chr(10))
			bTextSmSection = True
		End If
	End If
End Sub

Sub SaveOpenSections( sArray() As String, lCurrentElement As Long )
	&apos; печать нужного числа открывающих &lt;section&gt;
	If lCurrentElement &gt; IndexOf1Section( sArray() ) Then
		Dim NOpen As Integer, i As Integer
		NOpen = GetCountOpenSection( sArray(), lCurrentElement, _
									GetIndexOfPrevLevel( sArray(), lCurrentElement ), IndexOfEndSection( sArray() ) )
		If NOpen &gt; 0 Then
			For i=0 To NOpen-1
				oTextOutputStream.writeString( &quot;&lt;section&gt;&quot; &amp; chr(10) )
			Next i
		End If
	End If
End Sub

&apos; печать заданного числа открывающих &lt;section&gt;
Sub SaveNOpenSections( N As Integer )
	If N &gt; 0 Then
		Dim i As Integer
		For i=0 To N-1
			oTextOutputStream.writeString( &quot;&lt;section&gt;&quot; &amp; chr(10) )
		Next i
	End If
End Sub

Function IsCandidateToSections( sArray() As String, lCurrentElement As Long )
	&apos; возможные кандидаты на обрамление &lt;sections&gt;...&lt;/sections&gt;
	IsCandidateToSections = False
	If sArray(lCurrentElement,1)=&quot;Para&quot; OR sArray(lCurrentElement,1)=sStylePoemTitle OR _
		sArray(lCurrentElement,1)=sStylePoem OR sArray(lCurrentElement,1)=sStyleCite OR _
		sArray(lCurrentElement,1)=sStyleSubTitle OR sArray(lCurrentElement,1)=&quot;Image&quot; OR _
		sArray(lCurrentElement,1)=&quot;Table&quot; OR sArray(lCurrentElement,1)=&quot;&quot; _
		Or sArray(lCurrentElement,1)=sStyleCiteSubTitle _
		Or sArray(lCurrentElement,1)=sStyleCiteAuthor _
		Or sArray(lCurrentElement,1)=sStylePoemSubTitle _
		Or sArray(lCurrentElement,1)=sStylePoemAuthor Then
			IsCandidateToSections = True
	End If
End Function

Sub SaveNotes()
	Dim lCount As Long, l As Long
	Dim sNotePars() As String
	oTextOutputStream.writeString(&quot;&lt;body name=&quot;&quot;notes&quot;&quot;&gt;&quot; &amp; chr(10))
	oTextOutputStream.writeString(&quot;&lt;title&gt;&quot; &amp; chr(10) &amp; &quot;&lt;p&gt;&quot; &amp; sFootnoteTitle &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10))
	For lCount = 0 To UBound(sFootnoteText())
		oTextOutputStream.writeString(&quot;&lt;section id=&quot;&quot;n&quot; &amp; lCount+1 &amp; &quot;&quot;&quot;&gt;&quot; &amp; chr(10))
		oTextOutputStream.writeString(&quot;&lt;title&gt;&quot; &amp; chr(10) &amp; &quot;&lt;p&gt;&quot; &amp; lCount+1 &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10) &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10))
		sNotePars = Split(sFootnoteText(lCount), chr(10))
		If bNotesElements = True Then &apos; экспортируем сложные структуры текста сносок
			Dim sNote As String, sType As String
			Dim sPars() As String
			For l=0 To UBound(sNotePars)
				If IsEvenNumber(l) Then
					sNote = sNotePars(l)
				Else
					sType = sNotePars(l)
				End If
				If Not IsEvenNumber(l) Then
					AddNewItemToArray2(sPars, sNote, sType)
				End If
			Next l
			lCurrentElement = 0
			&apos; Защита от &quot;вылетания&quot; конвертора, на случай, если последний абзац - 
			&apos; Уровень (в нарушение схемы), Эпиграф (в нарушение схемы), Поэма, Цитата
		 	&apos; значительно упрощаются функции создания сложных Поэм, Цитата и т.д. -
		 	&apos; Убирается масса проверок на верхний граничный индекс - увеличивается быстродействие конвертора!
			AddNewItemToArray2(sPars, &quot;&quot;, &quot;end-fn&quot;) &apos; иначе тип последней строки сноски определяется неверно
			MakeBody(sPars, False)
		Else	
			For l=0 To UBound(sNotePars)-1
				If sNotePars(l) = &quot;&quot; Then
					oTextOutputStream.writeString(&quot;&lt;empty-line/&gt;&quot; &amp; chr(10))
				Else
					oTextOutputStream.writeString(&quot;&lt;p&gt;&quot; &amp; sNotePars(l) &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10))
				End If
			Next l
		End If
		oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
		oProgressBar.setValue(lCount) &apos; Статусбар
	Next lCount
	oTextOutputStream.writeString(&quot;&lt;/body&gt;&quot; &amp; chr(10))
End Sub

&apos; печатаем коды картинок
Function SaveImages() As Integer
	If( UBound( Images() )&gt;=0 ) Then
		Dim i As Integer, j As Integer
		j = 0
		For i=0 To UBound( Images() )
			Dim sMimeFile As String : sMimeFile = getOOoFBToolsTempPath() &amp; &quot;/base64image&quot; &amp; i &amp; &quot;.txt&quot;
			If FileExists( sMimeFile ) Then
				&apos; для jpg-файлов приводим mime-тип к правильному значению
				Dim sExt As String : sExt = Images(i)
				Dim sFileExt As String : sFileExt = Images(i)
				sFileExt = Images(i)
				If LCase(sExt) = &quot;jpg&quot; Then
					sFileExt = &quot;jpeg&quot;
				End If

				&apos; считываем код картинки из файла		
				Dim sLine As String
				Dim oSFA As Object, oFS As Object, oTIS As Object
				oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
				oFS = oSFA.openFileRead ( ConvertToURL ( sMimeFile ) )
				oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
				oTIS.setInputStream (oFS)
				If Not IsFileEmpty( sMimeFile ) Then
					&apos; открываем тэг
					oTextOutputStream.writeString( &quot;&lt;binary id=&quot;&quot;img_&quot; &amp; i &amp; &quot;.&quot; &amp; sExt &amp; &quot;&quot;&quot; content-type=&quot;&quot;image/&quot; &amp; sFileExt &amp; &quot;&quot;&quot;&gt;&quot; &amp; chr(10) )
					Do While ( NOT oTIS.isEOF() )
						sLine = oTIS.readLine()
						If sLine &lt;&gt; chr(10) Then
							If sLine &lt;&gt; &quot;&quot; Then
								oTextOutputStream.writeString( sLine &amp; chr(10) )
							End If
						End If
					Loop
					oTIS.closeInput()
					&apos; закрываем тэг
					oTextOutputStream.writeString( &quot;&lt;/binary&gt;&quot; &amp; chr(10) )
					j = j+1
				End If
			End If
			oProgressBar.setValue(i) &apos; Статусбар
		Next i
	End If
	SaveImages = j
End Function

Function IsNeededELForAnnot( sArray() As String, ByVal lCurrentElement As Long ) As Boolean
	&apos; &quot;защита&quot; - если после аннотации идет сразу Уровень, то вставляем между ними пустую строку для валидности
	Dim l As Long, lPointer As Long
	lPointer = lCurrentElement
	For l=0 To UBound(sArray())
		If sArray(lPointer,1)&lt;&gt;sStyleAnnotation Then
			If sArray(lPointer,1)=&quot;&quot; Then &apos; пустая строка после стартовой аннотации уже есть
				If bDelEL = True Then &apos; не удаляем пустую строку, даже при включенной опции удаления
					IsNeededELForAnnot = True				
				Else
					IsNeededELForAnnot = False
				End If
				Exit Function
			ElseIf IsLevel(sArray(lPointer,1)) = True Then
				IsNeededELForAnnot = True
				Exit Function
			Else
				IsNeededELForAnnot = False
				Exit Function
			End If
		End If
		lPointer = lPointer+1
	Next l
	IsNeededELForAnnot = False
End Function

&apos; /////////////////////////////////////////////////////////////////////////////////
Sub MakeBody( sArray As String, bBody As Boolean )
	&apos; 1. Печать абзацев, находящихся до 1-й секции (если они есть)
	&apos; Проверка на наличие Annotation, Cite, Poem Title, Poem, Para, &quot;&quot; (&lt;empty-line&gt;).
	&apos; Если есть, то до них ставим &lt;section&gt;, а перед 1-й секцией &lt;/section&gt;. Epigraph - без &lt;section&gt;...&lt;/section&gt;
	Dim lIndexOf1Section As Long, lParaCount As Long
	Dim bText As Boolean, bTextSmSection As Boolean
	lParaCount = UBound(sArray)
	lIndexOf1Section = IndexOf1Section(sArray)
	bText = False
	bTextSmSection = False
	If lIndexOf1Section = -1 Then &apos; нет ни одной секции
		While sArray(lCurrentElement,1)=sStyleEpigraph
			&apos; Если 1-е элементы - епиграф, то его не берем в &lt;section&gt;, хотя если взять - документ все равно валидный будет
			SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
			If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
&apos;			If lCurrentElement &gt; UBound( sArray() ) Then Exit Function
		Wend
		&apos; Все остальные элементы обрамляем &lt;section&gt;
		If bBody = True Then &apos; только для body книги (не для сносок - лишняя секция)
			oTextOutputStream.writeString(&quot;&lt;section&gt;&quot; &amp; chr(10))
		End If
		While lCurrentElement &lt;= UBound(sArray)
			SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
			If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
		Wend
		If bBody = True Then &apos; только для body книги (не для сносок - лишняя секция)
			oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
		End If
	Else &apos;секции есть
		If lIndexOf1Section &gt; 0 Then &apos; что-то есть - записываем до 1-й секции
			While lCurrentElement &lt; lIndexOf1Section
				If sArray(lCurrentElement,1)=&quot;Para&quot; OR sArray(lCurrentElement,1)=sStylePoemTitle OR _
					sArray(lCurrentElement,1)=sStylePoem OR sArray(lCurrentElement,1)=sStyleCite OR _
					sArray(lCurrentElement,1)=sStyleSubTitle OR sArray(lCurrentElement,1)=&quot;&quot; OR _
					sArray(lCurrentElement,1)=&quot;Image&quot; OR sArray(lCurrentElement,1)=&quot;Table&quot; OR _
					sArray(lCurrentElement,1)=sStyleAnnotation Then
					If bText = False Then
						oTextOutputStream.writeString(&quot;&lt;section&gt;&quot; &amp; chr(10))
						bText = True
						&apos; &quot;защита&quot; - если после аннотации идет сразу Уровень, то вставляем между ними пустую строку для валидности
						If sArray(lCurrentElement,1)=sStyleAnnotation Then
							bELForStartAnnot = IsNeededELForAnnot( sArray(), lCurrentElement )
						End If
					End If
					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
					If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Else &apos; это явно эпиграф
					If bText = True Then
						oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
						SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
						bText = False
						If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
					Else &apos; епиграф самый первый, как и должен 
						SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
						If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
					End If
				End If
				If bText = True AND lCurrentElement = lIndexOf1Section Then
					oTextOutputStream.writeString(&quot;&lt;/section&gt;&quot; &amp; chr(10))
				End If
			Wend
		End If

		&apos; 2. Печать всех блоков секций, начиная от 1-й
		If lIndexOf1Section &lt;&gt; -1 Then &apos; секция есть
			&apos; 2.1 Печать блока секции для 1-го Заголовка (Уровня)
			Dim nH1Index As Integer : nH1Index = lCurrentElement
			Dim nH2Index As Integer : nH2Index = GetIndexOfNextLevel(sArray, lCurrentElement)
			Dim nH1Level As Integer : nH1Level = GetLevelNumber( sArray(nH1Index,1) )
			Dim nH2Level As Integer : nH2Level = GetLevelNumber( sArray(nH2Index,1) )
			Dim nOpenSections : nOpenSections = nH1Level &apos; число открывающих &lt;section&gt;
			If nH2Level &lt;&gt; 0 Then &apos; если есть 2-й Заголовок
				If nH1Level &lt; nH2Level Then
					&apos; Уровень 1-го Заголовка &lt; Уровня 2-го (например: 1 и 2; 1 и 3; 2 и 4)
					SaveNOpenSections( nOpenSections-1 ) &apos; печать заданного числа открывающих &lt;section&gt;
					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody) &apos; печатаем Заголовок
					Dim nStep : nStep = nH2Level - nH1Level &apos; шаг между Уровнями 2-х первых Заголовков
					SaveNOpenSections( nStep-1 ) &apos; печать заданного числа открывающих &lt;section&gt;
				ElseIf nH1Level &gt; nH2Level Then
					&apos; Уровень 1-го Заголовка &gt; Уровня 2-го (например: 2 и 1; 6 и 2)
					SaveNOpenSections( nOpenSections-1 ) &apos; печать заданного числа открывающих &lt;section&gt;
					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody) &apos; печатаем Заголовок
					&apos; есть ли текст между этими Заголовками?
					Dim nIter As Integer, bTextBetweenH1H2 As Boolean : bTextBetweenH1H2 = False
					For nIter = nH1Index To nH2Index
						If Not IsLevel( sArray( nIter,1 ) ) Then
							bTextBetweenH1H2 = True : Exit For
						End If
					Next nIter
					If bTextBetweenH1H2 = False Then 
						&apos; между ними нет текста - печатаем пустую строку
						oTextOutputStream.writeString(&quot;&lt;empty-line/&gt;&quot; &amp; chr(10)) &apos; иначе - не валидность
					Else
						&apos; между ними есть текст - печатаем этот текст
						While lCurrentElement &lt; nH2Index
							SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
						Wend
					End If
					SaveCloseSection( nOpenSections ) &apos; закрываем &lt;/section&gt;
					&apos; для 2-го Заголовка печатаем недостающие открывающие &lt;section&gt;
					SaveNOpenSections( nH2Level-1 ) &apos; печать заданного числа открывающих &lt;section&gt;
				End If
			Else
				&apos; в книге только 1 Заголовок
				SaveNOpenSections( nOpenSections-1 ) &apos; печать заданного числа открывающих &lt;section&gt;
				SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody) &apos; печатаем Заголовок
				&apos; если после этого единственного Заголовка - всего 1 абзац, то добавляем в конец пустую строку - от зацикливания
				If lCurrentElement = lParaCount Then
					AddBodyArray(&quot;&lt;empty-line/&gt;&quot;, &quot;&quot;, False) : lParaCount = lParaCount+1
				End If
			End If
			
			&apos; 2.2 Печать остальных блоков секций, начиная от 2-й
			Dim N As Integer, lNextIndex As Long
			While lCurrentElement &lt;= lParaCount &apos; по индексам
				lNextIndex = GetIndexOfNextLevel(sArray, lCurrentElement)
				N = GetCountSection(sArray, lCurrentElement, lNextIndex, IndexOfEndSection(sArray))
				If lNextIndex = 0 Then lNextIndex = lParaCount + 1
				While lCurrentElement &lt; lNextIndex
					&apos;печатаем все абзацы между секциями (саму следующую секцию не включаем)
					Dim NN As Integer : NN = IsAdjacentCurrentLevelsOfNextLevel( sArray(), lCurrentElement )
					&apos;NN: например, если Level 1 и 2 - NN=1, 1 и 3 - NN=0, 3 и 1 - NN=-1, 2 и 2 - NN=-2
					If NN = 1 Then &apos; смежные уровни
						If N = 0 Then &apos; смежные уровни
							&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
							Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
						End If
					ElseIf NN = 0 Then &apos; не смежные уровни
						If Not IsLevel( sArray( lCurrentElement,1 ) ) Then &apos; текущий элемент - не Level
							If N = 0 Then
								&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
								Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
							ElseIf N &lt; 0 Then &apos; не смежные уровни, а между ними - текст, цитаты...
								If lCurrentElement &gt; IndexOf1Section( sArray() ) Then
									&apos; печать 1 открывающей секции для кандидатов в обрамление &lt;section&gt;...&lt;/section&gt;
									Save1OpenSectionForCandidate( sArray(), lCurrentElement, bTextSmSection )
								End If
								&apos; печать нужного числа открывающих &lt;section&gt;
								SaveOpenSections( sArray(), lCurrentElement )
							End If
						Else  &apos; текущий элемент - Level
							&apos; печать нужного числа открывающих &lt;section&gt;
							SaveOpenSections( sArray(), lCurrentElement )
						End If
					ElseIf NN = -1 Then &apos; не смежные уровни с большего на меньший
						If IsAdjacentCurrentLevelsOfPrevLevel( sArray(), lCurrentElement ) &lt;&gt; 1 Then
							&apos; для несмежных уровней
							&apos; печать нужного числа открывающих &lt;section&gt;
							SaveOpenSections( sArray(), lCurrentElement )
						End If
					End If

					SaveElements(sArray, sArray(lCurrentElement, 1), sArray(lCurrentElement, 0), bBody)
					If bBody Then oProgressBar.setValue(lCurrentElement) &apos; Статусбар
				Wend
	
				&apos; закрываем секции, взависимости от смежности уровней
				If N = 0 Then &apos; смежные уровни
					If bTextSmSection = True Then &apos; между ними есть текст. требующий взятие его в &lt;section&gt; &lt;/section&gt;
						SaveCloseSection(1)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					End If
				Else &apos; не смежные уровни
					If bTextSmSection = True Then &apos; между ними есть текст. требующий взятие его в &lt;section&gt; &lt;/section&gt;
						SaveCloseSection(1)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					Else
						SaveCloseSection(N)
						bTextSmSection = False &apos; для вставки &lt;section&gt; после &lt;title&gt; уровня
					End If
				End If
				
			Wend
		End If
		
	End If
End Sub

</script:module>