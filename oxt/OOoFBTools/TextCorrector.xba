<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector" script:language="StarBasic">&apos;======================================================================================================================
&apos; 							модуль автоматической обработки документа: Корректор Текста
&apos;======================================================================================================================

Option Explicit

Const sConstCorrector As String = &quot;corrector.txt&quot; &apos; файл настроек Корректора Текста

Private oDoc		As Object
Private oReplace	As Object

Public oTextCorrectorDlg As Object

Private bTCDelStartSpace			As Boolean
Private bTCStartNoBreakSpaceDelete	As Boolean
Private bTCStartTabDelete			As Boolean
Private bTCDelSpace					As Boolean
Private nTCSpaceCount				As Integer
Private bTCToSpace					As Boolean
Private bTCNBDelSpace				As Boolean
Private bRemoveSpaceBeforePunct		As Boolean

Private bOnlyDefisPara				As Boolean
Private bDefisWordDelOnlyPara		As Boolean
Private bDefisWordDeAll				As Boolean

Private bWorkEmptyPar				As Boolean

Private bDelMP			As Boolean &apos; удаление мягкие переносы
Private bWordDefisPara	As Boolean

Private bDelPB As Boolean &apos; Удаление разрывов страниц

Private bBreakLine	As Boolean
Private bDel 		As Boolean
Private bPar		As Boolean
Private bSpace		As Boolean

Private b2HyphenToDash				As Boolean
Private bHyphenToDashBetweenWords	As Boolean
Private bMinusToDash				As Boolean
Private bMinusToDashBetweenNumbers	As Boolean

Private bInsertSpaceBSymAndMDH		As Boolean
Private bInsertSpaceBPunctAndMDH	As Boolean
Private bInsertSpaceBPunctAndSym	As Boolean

Private bDefis			As Boolean
Private bNoBreakDefis	As Boolean

Private bKav 	As Boolean
Private bPoints As Boolean
Private bC		As Boolean
Private bImages As Boolean
Private bEmbeddingImages As Boolean
Private nAnchor As String
Private bDeleteAllLineShape		As Boolean
Private bRemoveSpaceInBracket	As Boolean
Private bRemoveSpaceInQuote		As Boolean

Private bInsertNoBreakBlankToFIO		As Boolean
Private bInsertNoBreakBlankToShortening	As Boolean
Private bInsertNoBreakBlankToDate		As Boolean

Private bReplaceMarkerDashToSymbol		As Boolean &apos; замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус. Актуально для художственной литературы
Private bDirectSpeech					As Boolean &apos; Заменить дефисы и минусы в прямой речи на тире

Sub TextCorrector()
&apos;	DialogLibraries.LoadLibrary(&quot;OOoFBTools&quot;)
	If Not GlobalScope.DialogLibraries.isLibraryLoaded( &quot;OOoFBTools&quot; ) Then
    	GlobalScope.DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	End If
	oTextCorrectorDlg = CreateUnoDialog( GlobalScope.DialogLibraries.OOoFBTools.TextCorrectorDlg )
	
	&apos; инициализация формы
	InitTextCorrectorDlg()
	
	Dim sAnchorsList() As String &apos; виды привязки картинки
	sAnchorsList() = Array( sTCD.sToParagraph, sTCD.sToSymbol, sTCD.sAsSymbol )
	With oTextCorrectorDlg.Model
		.Height = 324
		.Width  = 392
		.cbAnchor.StringItemList = sAnchorsList()
	End With
	
	&apos; АЛГОРИТМ - Очень ВАЖНО!!!
	&apos; т.к. Корректор развивается, и в диалоге Корректора Текста появляются НОВЫЕ опции (контролы),
	&apos; а у пользователей УЖЕ СОХРАНЕН файл corrector.txt, где данных для этих новых опций нет,
	&apos; то при работе Корректора может произойти либо ошибка, либо коректура произведется не так, как ожидается,
	&apos; а при запуске формы Корректора новые опции будут не такими, как ожидал User,
	&apos; Поэтому, сначала устанавливаем значения переменных по умолчанию (SetCorrectorSettingDefault),
	&apos; а потом - считываем из файла значения опций в переменные (ReadCorrectorSettings).
	&apos; Для тех новых опций, которых еще нет в файле corrector.txt значения будут по умолчанию,
	&apos; а для остальных - считаны из файла.
	&apos; Когда же User запустит форму и пересохранит ВСЕ настройки Корректора,
	&apos; то вне переменные и контролы будут иметь значения из файла!
		
	&apos; Задаем настройки очистки текста в контролы по умолчанию
	SetCorrectorSettingDefault()
	&apos; только теперь считывание настройки из файла
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getOOoFBToolsSettingsDir() &amp; sConstCorrector, oTextCorrectorDlg, nX, nY )
	With oTextCorrectorDlg
		.setPosSize( nX, nY, 324, 392, com.sun.star.awt.PosSize.POS )
		.GetControl(&quot;optbtnSpaceAndBreak&quot;).State = 1
		ControlsEnabled()
		.execute()
	End With

End Sub

Sub SaveCorrectorSettings()
	&apos; записываем настройки очистки текста
	Dim oLB As Object &apos; Для работы с ListBox`ами
	SaveSettings( getOOoFBToolsSettingsDir() &amp; sConstCorrector, oTextCorrectorDlg )
	
	&apos; заполняем переменные
	With oTextCorrectorDlg
		bWordDefisPara			= .GetControl(&quot;cboxWordDefisPara&quot;).State
		bOnlyDefisPara			= .GetControl(&quot;obtnOnlyDefisPara&quot;).State
		bDefisWordDelOnlyPara	= .GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State
		bDefisWordDeAll			= .GetControl(&quot;obtnDefisWordDeAll&quot;).State
		
		bTCDelStartSpace			= .GetControl(&quot;cbStartSpaceDelete&quot;).State
		bTCStartNoBreakSpaceDelete	= .GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State
		bTCStartTabDelete			= .GetControl(&quot;cbStartTabDelete&quot;).State
		bTCDelSpace					= .GetControl(&quot;cboxDelSpace&quot;).State
		bTCNBDelSpace				= .GetControl(&quot;cboxNonBreakSpace&quot;).State
		oLB 						= .getControl(&quot;lbTCSpaceCount&quot;)
		nTCSpaceCount 				= oLB.SelectedItem
		bTCToSpace					= .GetControl(&quot;obTCToSpace&quot;).State
		bRemoveSpaceInBracket		= .GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State
		bRemoveSpaceInQuote			= .GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State
		bRemoveSpaceBeforePunct		= .GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State
		
		bWorkEmptyPar	= .GetControl(&quot;cboxWorkEmptyPar&quot;).State
	
		bBreakLine		= .GetControl(&quot;cboxBreakLine&quot;).State
		bDel			= .GetControl(&quot;obtnDel&quot;).State
		bPar			= .GetControl(&quot;obtnPar&quot;).State
		bSpace			= .GetControl(&quot;obtnSpace&quot;).State
	
		b2HyphenToDash				= .GetControl(&quot;cbox2HyphenToDash&quot;).State
		bHyphenToDashBetweenWords	= .GetControl(&quot;cboxHyphenToDash&quot;).State
		bMinusToDash				= .GetControl(&quot;cboxMinusToDash&quot;).State
		bMinusToDashBetweenNumbers	= .GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State
		
		bInsertSpaceBSymAndMDH = 	.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State
		bInsertSpaceBPunctAndMDH = 	.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State
		bInsertSpaceBPunctAndSym = 	.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State
		bInsertNoBreakBlankToFIO =	.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State
		bInsertNoBreakBlankToShortening = .GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State
		bInsertNoBreakBlankToDate = .GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State
		bDefis = 					.GetControl(&quot;cboxHyphen&quot;).State
		bNoBreakDefis = 			.GetControl(&quot;obSimpleHyphen&quot;).State
		bKav = 						.GetControl(&quot;cboxKav&quot;).State
		bPoints = 					.GetControl(&quot;cboxPoints&quot;).State
		bC = 						.GetControl(&quot;cboxC&quot;).State
		bImages = 					.GetControl(&quot;cboxImages&quot;).State
		bEmbeddingImages =			.GetControl(&quot;cboxEmbeddingImages&quot;).State
		oLB = 						.getControl(&quot;cbAnchor&quot;)
		nAnchor = 					oLB.SelectedItem
		bDelMP = 					.GetControl(&quot;cboxMP&quot;).State
		bDelPB = 					.GetControl(&quot;cboDelPB&quot;).State
		bDeleteAllLineShape = 		.GetControl(&quot;cboDeleteAllLineShape&quot;).State
		bReplaceMarkerDashToSymbol = .GetControl(&quot;cboxMarkerDashToSymbol&quot;).State
		bDirectSpeech =				.GetControl(&quot;checkBoxDirectSpeech&quot;).State
	End With
End Sub

Sub CheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 1	
		End If
	Next i
	ControlsEnabled()
End Sub

Sub UnCheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 0	
		End If
	Next i
	ControlsEnabled()
End Sub

Sub ControlsEnabled()
	cboxDefisPartEnabled()
	cboxWordDefisParaEnabled()
	cboxImagesEnabled()
	cboxBreakLineEnabled()
	cboxDelSpaceEnabled()
End Sub

Sub cboxWordDefisParaEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxWordDefisPara&quot;).State = 1 Then
			.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable			= True
			.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable	= True
			.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable		= True
		Else
			.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable			= False
			.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable	= False
			.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable		= False
		End If
	End With
End Sub

Sub cboxImagesEnabled()
	With oTextCorrectorDlg
	If .GetControl(&quot;cboxImages&quot;).State = 1 Then
			.GetControl(&quot;lblAnchor&quot;).Enable	= True
			.GetControl(&quot;cbAnchor&quot;).Enable	= True
		Else
			.GetControl(&quot;lblAnchor&quot;).Enable	= False
			.GetControl(&quot;cbAnchor&quot;).Enable	= False
		End If
	End With
End Sub

Sub cboxBreakLineEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxBreakLine&quot;).State = 1 Then
			.GetControl(&quot;obtnDel&quot;).Enable	= True
			.GetControl(&quot;obtnPar&quot;).Enable	= True
			.GetControl(&quot;obtnSpace&quot;).Enable	= True
		Else
			.GetControl(&quot;obtnDel&quot;).Enable	= False
			.GetControl(&quot;obtnPar&quot;).Enable	= False
			.GetControl(&quot;obtnSpace&quot;).Enable	= False
		End If
	End With
End Sub

Sub cboxDelSpaceEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxDelSpace&quot;).State = 1 Then
			.GetControl(&quot;obTCToSpace&quot;).Enable	= True
			.GetControl(&quot;obTCToTab&quot;).Enable		= True
			.GetControl(&quot;lbTCSpaceCount&quot;).Enable= True
			.GetControl(&quot;cboxNonBreakSpace&quot;).Enable= True
		Else
			.GetControl(&quot;obTCToSpace&quot;).Enable	= False
			.GetControl(&quot;obTCToTab&quot;).Enable		= False
			.GetControl(&quot;lbTCSpaceCount&quot;).Enable= False
			.GetControl(&quot;cboxNonBreakSpace&quot;).Enable= False
		End If
	End With
End Sub

Sub cboxDefisPartEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxHyphen&quot;).State = 1 Then
			.GetControl(&quot;obSimpleHyphen&quot;).Enable	= True
			.GetControl(&quot;obNoBreakHyphen&quot;).Enable	= True
		Else
			.GetControl(&quot;obSimpleHyphen&quot;).Enable	= False
			.GetControl(&quot;obNoBreakHyphen&quot;).Enable	= False
		End If
	End With
End Sub

&apos;***************************************************************************
&apos; перключение &quot;вкладок&quot; групп настроек
Sub ChangeOptionsGroup(o)
	With oTextCorrectorDlg.Model
		If o.Source.Model.Name = &quot;optbtnSpaceAndBreak&quot; Then
			.Step = 1
		ElseIf o.Source.Model.Name = &quot;optbtnHypenDashAndOther&quot; Then
			.Step = 2
		End If
	End With
End Sub
&apos;***************************************************************************

&apos; ////////////////////////////////////// Задание профиля книг (вид литературы) ////////////////
&apos; Установка настроек по умолчанию в контролы
Sub SetCorrectorSettingDefault()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 1			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; 1 по умолчанию
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )
		
		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 1	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 0	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 0 &apos; удаление из текста всех векторных линий

		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Документы
Sub SetDocumentType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 1			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 0	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 1	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 0 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Художественная литература
Sub SetFictionType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 1			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 0	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 1	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 1	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 1	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 1 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 1
	End With
	ControlsEnabled()
End Sub

&apos; Документалистика / Публицистика
Sub SetPublicismType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 1			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 1	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 1	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 1 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Научная литература
Sub SetScientificType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 0			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 0	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 0		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 0	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 0	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 0 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Техническая, Компьтерная литература
Sub SetTechnicType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 0			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 0	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 1		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 0 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Книги по программированию
Sub SetProgrammingType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 0			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 0	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 0			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 0			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 0	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 0		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 0	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 1 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; Религиозная литература
Sub SetReligionType()
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1			&apos; удаление стартовых пробелов
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1	&apos; удаление стартовых неразрывных пробелов
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1			&apos; удаление стартовых табудяций
		.GetControl(&quot;cboxDelSpace&quot;).State = 1				&apos; замена множественных пробелов на
		.GetControl(&quot;cboxNonBreakSpace&quot;).State = 1			&apos; учитывать и неразрывные пробелы
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)					&apos; число замен
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;					&apos; по умолчанию 1
		.GetControl(&quot;obTCToSpace&quot;).State = 1				&apos; пробелов
		.GetControl(&quot;obTCToTab&quot;).State = 0					&apos; табуляций
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1	&apos; удалить пробел перед знаком препинания
		.GetControl(&quot;cboxRemoveSpaceInBracket&quot;).State = 1	&apos; Удалить пробелы внутри скобок, например: ( слова ) -&gt; (слова)
		.GetControl(&quot;cboxRemoveSpaceInQuote&quot;).State = 1		&apos; Удалить пробелы внутри кавычек, например: « слова » -&gt; «слова»

		&apos; Вставка пробелов
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1		&apos; вставить пробел между кавычкой и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1	&apos; вставить пробел между знаком препинания и минусом, тире или дефисом
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1	&apos; вставить пробел после знака препинания
		.GetControl(&quot;cboxInsertNoBreakBlankToFIO&quot;).State = 1	&apos; вставить неразрывные пробелы между Фамилией и инициалами
		.GetControl(&quot;cboxInsertNoBreakBlankToShortening&quot;).State = 1	&apos; вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
		.GetControl(&quot;cboxInsertNoBreakBlankToDate&quot;).State = 1	&apos; вставить неразрывный пробел в датах (19 января ... )

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1			&apos; Удалить разрывы для дефисов и переносов слов
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0			&apos; Обрабатывать только разорванные дефисы
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1	&apos; Удаление только разрыва абзаца(¶) и строки(BR); перенос (-) не удаляется
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0			&apos; Удаление и разрыва переноса(-) и абзаца(¶) и строки(BR)

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxWorkEmptyPar&quot;).State = 0	&apos; Обработать пустые абзацы ¶
		.GetControl(&quot;cboxBreakLine&quot;).State = 1		&apos; Разрыв строки:
		.GetControl(&quot;obtnDel&quot;).State = 0			&apos; Удалить
		.GetControl(&quot;obtnPar&quot;).State = 1			&apos; Заменить на абзац (¶)
		.GetControl(&quot;obtnSpace&quot;).State = 0			&apos; Заменить на 1 пробел
		
		&apos; Минусы, дефисы и тире
		.GetControl(&quot;checkBoxDirectSpeech&quot;).State = 1 &apos; Заменить дефисы и минусы в прямой речи на тире
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1	&apos; умная замена 2 минусов на тире
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
		.GetControl(&quot;cboxHyphen&quot;).State = 1			&apos; Заменить минус, тире на дефис в словах &quot;&quot;кое-что&quot;&quot;, &quot;&quot;куда-то&quot;&quot; и т.д.
		.GetControl(&quot;obSimpleHyphen&quot;).State = 1		&apos; Неразрывный дефис
		.GetControl(&quot;obNoBreakHyphen&quot;).State = 0	&apos; Простой дефис
		.GetControl(&quot;cboxMinusToDash&quot;).State = 1	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
		.GetControl(&quot;cboxMinusToDashBetweenNumbers&quot;).State = 1	&apos; Заменить минус на дефис между цифрами
		
		&apos; Разное
		.GetControl(&quot;cboxMP&quot;).State = 1		&apos; мягкие переносы
		.GetControl(&quot;cboDelPB&quot;).State = 1	&apos; разрывы страниц
		.GetControl(&quot;cboxKav&quot;).State = 0	&apos; замена кавычек лапок на елочки
		.GetControl(&quot;cboxPoints&quot;).State = 1	&apos; многоточия
		.GetControl(&quot;cboxC&quot;).State = 0		&apos; торговые знаки
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 1 &apos; удаление из текста всех векторных линий
				
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		.GetControl(&quot;cboxEmbeddingImages&quot;).State = 1
		
		&apos;замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус.
		.GetControl(&quot;cboxMarkerDashToSymbol&quot;).State = 0
	End With
	ControlsEnabled()
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////
&apos; запуск корректировки
Sub TextCorrectorDlgOk()
	Dim sCorrectorName As String : sCorrectorName = sTCD.sTextCorrecting
	&apos; Если есть опции для чистки, то - работаем
	If Not isOneCheckBoxeCheched( oTextCorrectorDlg ) Then
		MsgBox sTCD.sSelectOptions, 64, sCorrectorName
		Exit Sub
	End If
	
	&apos; Принятие параметров чистки текста
	oTextCorrectorDlg.endExecute()
	
	SaveCorrectorSettings() &apos; сохранение настроек чистки текста

	Dim oProgressBar : oProgressBar = ThisComponent.CurrentController.StatusIndicator
	
	oDoc = ThisComponent
	oReplace = oDoc.createReplaceDescriptor
	oReplace.SearchRegularExpression = True
	
	&apos; удаление из документа всех векторных линий (после OCR)
	If bDeleteAllLineShape = True Then
		Dim oPage	As Object : oPage = oDoc.getDrawPage()
		Dim oShape	As Object
		Dim nAllDrawPage	As Integer : nAllDrawPage = oPage.getCount()
		Dim nLineShape		As Integer : nLineShape = -1 &apos;счетчик всех шейпов (счетчик проходов)
&apos;		Dim nDelLineShape	As Integer : nDelLineShape = 0	&apos;счетчик удаленных линий
		&apos; подсчет всех линий LineShape
		Dim i As Integer
		For i = 0 To nAllDrawPage - 1
			oShape = oPage.getByIndex ( i )
			If oShape.supportsService(&quot;com.sun.star.drawing.LineShape&quot;) Then
				nLineShape = nLineShape + 1
			End If
		Next i
		&apos; удаление из документа всех линий LineShape
		oProgressBar.start( sTCD.sWorkGraphic, nLineShape )
		Do While oPage.getCount() &gt;= 0 And nLineShape &gt; -1
			oShape = oPage.getByIndex ( nLineShape )
			If oShape.supportsService(&quot;com.sun.star.drawing.LineShape&quot;) Then
				oPage.remove( oShape )
&apos;				nDelLineShape = nDelLineShape + 1
			End If
			oProgressBar.setValue(nLineShape)
			nLineShape = nLineShape - 1
		Loop
&apos;		If nDelLineShape &gt; 0 Then
&apos;			MsgBox &quot;Удалено &quot; &amp; Str$( nDelLineShape ) &amp; &quot; векторной линии&quot;, 176, &quot;Удаление LineShape из документа&quot;
&apos;		Else
&apos;			MsgBox &quot;Не найдено ни одной векторной линии&quot;, 176, &quot;Удаление LineShape из документа&quot;
&apos;		End If
	End If
	
	&apos; встраивание всей графики-ссылок в документ (файлы картинок находятся на жестком диске)
	If bEmbeddingImages = True Then
		EmbeddingAllGraphicLinksToDoc( oProgressBar, sTCD.sWorkGraphic )
	End If
	
	&apos; Привязка картинок
	If bImages = True Then
		Dim oGraphics As Object 
		Dim oThisGraphic As Object 
		Dim iAnchor As Integer
		Select Case nAnchor
			Case sTCD.sToParagraph
				iAnchor = 0
			Case sTCD.sToSymbol
				iAnchor = 4
			Case sTCD.sAsSymbol
				iAnchor = 1
			Case Else
				iAnchor = 0
		End Select
		oGraphics = oDoc.getGraphicObjects()
	    oProgressBar.start( sTCD.sWorkGraphic, oGraphics.Count )
	    For i = 0 to oGraphics.Count - 1
	    	oThisGraphic = oGraphics.GetByIndex(i)
			oThisGraphic.AnchorType  = iAnchor
			oProgressBar.setValue(i)
		Next i
	End If

	&apos; ===========================================================================================================
	&apos; замена маркеров тире, дефиса и минуса в прямой речи (начало абзаца) на соответствующие тире, дефис или минус
	&apos; ===========================================================================================================
	Dim nCur As Integer : nCur = 0
	If bReplaceMarkerDashToSymbol = True Then
		Dim oText As Variant : oText = ThisComponent.Text
		Dim oViewCursor As Object : oViewCursor = ThisComponent.getCurrentController().getViewCursor()
		Dim oCursor As Variant : oCursor = oText.CreateTextCursor()
		oCursor.GoToStart(False)
		Dim symbol As String
		oProgressBar.start( sTCD.sDirectSpeech, ThisComponent.ParagraphCount )
		Do
			If NOT oCursor.gotoEndOfParagraph(True) Then Exit Do
			If oCursor.NumberingIsNumber = True Then
				symbol = GetBulletChar( oCursor )
				If symbol = chr(8212) OR symbol = chr(8211) OR symbol = chr(8210) OR symbol = chr(8208) OR symbol = chr(45) OR symbol = chr(8209) Then
					oCursor.NumberingIsNumber = False
					oCursor.NumberingStyleName = &quot;&quot;
					oViewCursor.gotoRange(oCursor, False)
					oViewCursor.collapseToStart()
					_UnoInsertText( symbol + &quot; &quot; )
				End If
			End If
			oProgressBar.setValue(nCur)
			nCur = nCur+1
		Loop Until NOT oCursor.gotoNextParagraph(False)
	End If

	nCur = 0
	oProgressBar.start( sTCD.sTextCorrecting &amp; &quot;:&quot;, 29 )
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; удаление разрывов страниц
	If bDelPB Then
		DeleteAllPageBreaks()
	End If
	
	&apos; Удаление мягких переносов
	If bDelMP = True Then
		DeleteMPer( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Упорядочить многоточие
	If bPoints = True Then
		With oReplace
			.SearchString = &quot;\. *\. *\.&quot;
			.ReplaceString = &quot;…&quot;&apos;chr(8230)
		End With
		oDoc.ReplaceAll(oReplace)
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	&apos; ===========================================================================================================
	&apos; 											Работа с пробелами и табуляциями
	&apos; ===========================================================================================================
	&apos; Удаляем все стартовые ПРОСТЫЕ пробелы
	If bTCDelStartSpace = True Then
		DelStartSpace( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем все НЕРАЗРЫВНЫЕ стартовые пробелы
	If bTCStartNoBreakSpaceDelete = True Then
		DelStartNoBreakSpace( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем все стартовые табуляции
	If bTCStartTabDelete = True Then
		DelStartTab( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удалить пробелы в начале и в конце скобок
	If bRemoveSpaceInBracket = True Then
		RemoveSpaceInBrackets( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удалить пробелы внутри кавычек (« слово » -&gt; «слово»)
	If bRemoveSpaceInQuote = True Then
		RemoveSpaceInQuote( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; If bInsertSpaceBPunctAndSym должен идти ДО If bRemoveSpaceBeforePunct - так результат лучше
	&apos; Вставляем ПРОСТОЙ пробел после знака препинания
	If bInsertSpaceBPunctAndSym = True Then
		InsertSpaceBPunctAndSymbol( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем ПРОСТЫЕ пробелы перед знаком препинания
	If bRemoveSpaceBeforePunct = True Then
		RemoveSpaceBeforePunct( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Заменить все множественные пробелы (ПРОСТЫЕ, НЕРАЗРЫВНЫЕ и их комбинация) и табуляции между слов на пробел или табуляцию
	If bTCDelSpace = True Then
		&apos; Замена множественных пробелов на заданное число простых пробелов или табуляций
		ReplaceMSpaceTo( oDoc, nTCSpaceCount, bTCToSpace )
		&apos; Удаляем все конечные ПРОСТЫЕ и НЕРАЗРЫВНЫЕ пробелы, их комбинацию и табуляции
		DelEndSpace( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
		
	&apos; Вставка ПРОСТОГО пробела между знаком препинания и минусом, тире или дефисом
	If bInsertSpaceBPunctAndMDH Then
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 45 )		&apos; минус
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8211 )	&apos; дефис
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8209 )	&apos; неразрывный дефис
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8212 )	&apos; тире
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Вставка ПРОСТОГО пробела между словами, кавычками и минусом, тире или дефисом
	If bInsertSpaceBSymAndMDH Then
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 45 )	&apos; минус
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8211 )	&apos; дефис
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8209 )	&apos; неразрывный дефис
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8212 )	&apos; тире
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Вставить неразрывные пробелы между фамилией и инициалами
	If bInsertNoBreakBlankToFIO = True Then
		InsertNoBreakBlankToFIO( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е.
	If bInsertNoBreakBlankToShortening = True Then
		InsertNoBreakBlankToShortening( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Вставка неразрывного пробела в датах (19 января ... )
	If bInsertNoBreakBlankToDate = True Then
		InsertNoBreakBlankToDate( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; ===========================================================================================================
	&apos; 										Работа с абзацами и разрывами
	&apos; ===========================================================================================================
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов в тексте, таблицах, сносках и врезках)
	If bWordDefisPara = True Then
		&apos; Удаление мягких переносов, иначе результат будет неверен
		If bDelMP = False Then
			DeleteMPer( oDoc, oReplace )
		End If
		&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов в тексте, таблицах, сносках и врезках)
		JoinWordDefisParaInAllTexts( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, nCur )
	End If

&apos;	oProgressBar.start( sTCD.sTextCorrecting &amp; &quot;:&quot;, 13 )
	&apos; Разрывы строк
	If bBreakLine = True Then
		BreakLineTo( oDoc, oReplace, bDel, bPar, bSpace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Обрабатываем пустые абзацы ¶
	If bWorkEmptyPar = True Then
		&apos; удаляем все пробелы в пустых абзацах
		With oReplace
			.SearchString = &quot;^[&quot; &amp; chr(32) &amp; chr(160) &amp; &quot;]+$|^$&quot;
			.ReplaceString = &quot;&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		&apos; Удаляем все пустые абзацы
		If oDoc.getTextTables().getCount() = 0 Then
			&apos; TODO
			&apos; Если в таблице есть пустой абзац, то при его удалении OpenOffice и LibreOffice &quot;зависают&quot; намертво - баг офиса.
			&apos; Если в тексте есть хоть одна Таблица, то не обрабатываем абзацы.
			DelEmptyPar( oDoc, oReplace )
		End If
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; ===========================================================================================================
	&apos; 									Дефисы, тире и минусы
	&apos; ===========================================================================================================
	&apos; Заменить двойной минус двойной дефис (--) на тире
	If b2HyphenToDash = True Then
		Replace2HyphenToDash( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	&apos; Заменить дефисы и минусы в прямой речи на тире
	If bDirectSpeech = True Then
		ReplaceMinusHyphenForDirectSpeechToDash( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	&apos; Заменить дефис или минус, используемый между слов вместо тире на тире
	If bHyphenToDashBetweenWords = True Then
		HyphenToDashBetweenWords( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Вместо минуса - дефис в &quot;кое-что&quot;, &quot;куда-то&quot; и т.д.
	If bDefis = True Then
		ReplaceMinusToDefis( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е и т.д.)
	If bMinusToDash = True Then
		ReplaceMinusToDash( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Заменить минус, дефис и тире на короткое тире между цифрами
	If bMinusToDashBetweenNumbers = True Then
		ReplaceMinusHyphenDashToShortDashBetweenNumbers( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	&apos; ===========================================================================================================
	&apos; 													Разное
	&apos; ===========================================================================================================
	&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
	If bKav = True Then
		QuotationMarks( oDoc, oReplace )
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Замена на (c) (r) (TM)
	If bC = True Then
		With oReplace
			.SearchString = &quot;\( *[C|c|С|с]{1} *\)&quot;
			.ReplaceString = &quot;©&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		With oReplace
			.SearchString = &quot;\( *[R|r]{1} *\)&quot;
			.ReplaceString = &quot;®&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		With oReplace
			.SearchString = &quot;\( *[TtТт]{1}[MmМм]{1} *\)&quot;
			.ReplaceString = &quot;™&quot;
		End With
		oDoc.ReplaceAll(oReplace)
	End If
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	MsgBox sTCD.sEndWork, 64, sCorrectorName
	oProgressBar.end
End Sub

&apos; ===========================================================================================================
&apos; 												Функции обработки
&apos; ===========================================================================================================

&apos; //////////////////////////////// Разрывы и абзацы ////////////////////////////////////

&apos; Удаление мягких переносов
Sub DeleteMPer( oDoc, oReplace )
	Dim b As Boolean
	b = oReplace.SearchRegularExpression
	With oReplace
		.SearchString = &quot;­&quot;&apos; В LO4 поломан поиск мягких переносов в регул. выражениях
		.ReplaceString = &quot;&quot;
		.SearchRegularExpression = False
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\x00AD&quot;
		.ReplaceString = &quot;&quot;
		.SearchRegularExpression = True
	End With
	oDoc.ReplaceAll(oReplace)
	oReplace.SearchRegularExpression = b
End Sub

&apos; замена разрыва строки на
Sub BreakLineTo( oDoc, oReplace, bDel, bPar, bSpace )
	If bDel = True Then
		&apos; Удаляем разрыв строки
		With oReplace
			.SearchString = chr(10)
			.ReplaceString = &quot;&quot;
		End With
	ElseIf bPar = True Then
		&apos; Заменяем разрыв строки на абзац
		With oReplace
			.SearchString = chr(10)
			.ReplaceString = &quot;\n&quot;
		End With
	ElseIf bSpace = True Then
		&apos; Заменяем разрыв строки на 1 пробел
		With oReplace
			.SearchString = chr(10)
			.ReplaceString = &quot; &quot;
		End With
	End If
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удаляем все множественные пустые абзацы
Sub DelEmptyPar( oDoc, oReplace )
	With oReplace
		.SearchString = &quot;^$&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; =========================================================================================================================
&apos;  															Минус, Тире и Дефис
&apos; =========================================================================================================================
&apos; Заменить двойной минус двойной дефис (--) на тире
Sub Replace2HyphenToDash( oDoc, oReplace )
	With oReplace
		.SearchString = &quot;[:space:]{1,}(-|&quot; &amp; chr(8211) &amp; &quot;|&quot; &amp; chr(8209) &amp; &quot;){2}[:space:]{1,}&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(\n)[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{2,}[:space:]*([а-яА-ЯёЁ])&quot;
		.ReplaceString	= &quot;\n&quot; &amp; chr(8212) &amp; &quot; $2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;^[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{2,}[:space:]*([а-яА-ЯёЁ])&quot;
		.ReplaceString	= chr(8212) &amp; &quot; $1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
		
	&apos; для русских слов обработку &quot; --пример&quot;, но не &quot; --i&quot;
	With oReplace
		.SearchString	= &quot;[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{2,}([а-яА-ЯёЁ])&quot;
		.ReplaceString	= &quot; &quot; &amp; chr(8212) &amp; &quot; $1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	&apos; для русских слов обработку &quot;пример-- &quot;, но не &quot;i-- &quot;
	With oReplace
		.SearchString	= &quot;([а-яА-ЯёЁ])[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{2,} *&quot;
		.ReplaceString	= &quot;$1 &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Заменить дефисы и минусы в прямой речи на тире
Sub ReplaceMinusHyphenForDirectSpeechToDash()
	&apos; Прямая речь: Заменить минус или дефис в начале абзаца на тире 
	With oReplace
		.SearchString	= &quot;(\n)[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([а-яА-ЯёЁa-zA-Z])&quot;
		.ReplaceString	= &quot;\n&quot; &amp; chr(8212) &amp; &quot; $2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;^[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([а-яА-ЯёЁa-zA-Z])&quot;
		.ReplaceString	= chr(8212) &amp; &quot; $1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(\n)[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([&quot;&quot;“„«])&quot;
		.ReplaceString	= &quot;\n&quot; &amp; chr(8212) &amp; &quot; $2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;^[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([&quot;&quot;“„«])&quot;
		.ReplaceString	= chr(8212) &amp; &quot; $1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(\n)[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([\.\.\.|…])&quot;
		.ReplaceString	= &quot;\n&quot; &amp; chr(8212) &amp; &quot; …&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;^[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}[:space:]*([\.\.\.|…])&quot;
		.ReplaceString	= chr(8212) &amp; &quot; …&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Заменить дефис или минус, используемый между слов вместо тире, на тире
Sub HyphenToDashBetweenWords( oDoc, oReplace )
	&apos; Между слов
	With oReplace
		.SearchString = &quot;\&gt;[:space:]+[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;][:space:]+\&lt;&quot; &apos;&quot;\&gt; - \&lt;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; только для русских слов:
	With oReplace
	 .SearchString = &quot;([а-яА-ЯёЁ])\&gt;[:space:]+[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;][:space:]+\&lt;([а-яА-ЯёЁ])&quot;
	 .ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; $2&quot; &apos;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	&apos; .SearchString = &quot;([а-яА-ЯёЁ])\&gt; *- {1,}\&lt;([а-яА-ЯёЁ])&quot;
	&apos; .ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; $2&quot; &apos;&quot; — &quot;
		
	&apos; После знаков препинания
	With oReplace
		.SearchString = &quot;([\.,:;\!\?…])[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*&quot; 	&apos;&quot;\.-&quot;
		.ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;. — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	
	With oReplace
		.SearchString = &quot;[:space:]+(&apos;)[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;]&quot;
		.ReplaceString = &quot; $1 &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot; &apos; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; кавычки и тире
	With oReplace
		.SearchString = &quot;([»&quot;&quot;”])[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*([«&quot;&quot;“„])&quot;	&apos;&quot;» - «&quot;
		.ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; $2&quot;	&apos;&quot;» — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	&apos; в LO4 и OO4 сломан механизм замены ([»&quot;&quot;”]) на $1  - заменяем на &quot;прямые&quot; замены
&apos;	With oReplace
&apos;		.SearchString = &quot;([»&quot;&quot;”]) *- *\&lt;&quot;			&apos;&quot;» - \&lt;&quot;
&apos;		.ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;» — &quot;
&apos;	End With
&apos;	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;»[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*\&lt;&quot;	&apos;&quot;» - \&lt;&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;&quot;&quot;[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*\&lt;&quot;	&apos;&quot;» - \&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;”[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*\&lt;&quot;	&apos;&quot;» - \&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;\&gt;[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*([«&quot;&quot;“„])&quot;	&apos;&quot;\&gt; - «&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; $1&quot;	&apos;&quot; — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; скобки и тире
	With oReplace
		.SearchString = &quot;([\]\)\}])[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*&quot;	&apos;&quot;)- &quot;
		.ReplaceString = &quot;$1 &quot; &amp; chr(8212) &amp; &quot; &quot;	&apos;&quot;) — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[:space:]*[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; chr(8209) &amp; &quot;][:space:]*([\[\(\{])&quot;	&apos;&quot;-(&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; $1&quot;	&apos;&quot; — (&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Вместо минуса или тире - дефис в &quot;кое-что&quot;, &quot;куда-то&quot; и т.д.
Sub ReplaceMinusToDefis( oDoc, oReplace )
	Dim bReplCase As Boolean : bReplCase = oReplace.SearchCaseSensitive
	&apos; обрабатываем русские слова
	Dim sRight As String : sRight = &quot;(то|либо|нибудь|что|таки|ка|де|никак|никакой|кто|что|как|ли|под|за)([^а-яА-ЯёЁ])&quot;
	If bNoBreakDefis = True Then	&apos; заменить на неразрывный дефис
		With oReplace
			.SearchCaseSensitive = True
			.SearchString = &quot;([а-яА-ЯёЁ])&quot; &amp; &quot;[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;]{1}&quot; &amp; sRight
			.ReplaceString = &quot;$1&quot; &amp; chr(8209) &amp; &quot;$2$3&quot;
		End With
	Else							&apos; заменить на простой дефис
		With oReplace
			.SearchCaseSensitive = True
			.SearchString = &quot;([а-яА-ЯёЁ])&quot; &amp; &quot;[-&quot; &amp; chr(8209) &amp; chr(8212) &amp; &quot;]{1}&quot; &amp; sRight
			.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2$3&quot;
		End With
	End If
	oDoc.ReplaceAll(oReplace)
	&apos; Теперь восстанавливаем значение учета регистра при поиске и замене
	oReplace.SearchCaseSensitive = bReplCase

&apos;	&apos; обрабатываем иностранные слова
&apos;	If bNoBreakDefis = True Then	&apos; заменить на неразрывный дефис
&apos;		With oReplace
&apos;			.SearchString = &quot;([a-zA-Z])[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;]{1}([a-zA-Z])&quot;
&apos;			.ReplaceString = &quot;$1&quot; &amp; chr(8209) &amp; &quot;$2&quot;
&apos;		End With
&apos;	Else							&apos; заменить на простой дефис
&apos;		With oReplace
&apos;			.SearchString = &quot;([a-zA-Z])[-&quot; &amp; chr(8209) &amp; chr(8212) &amp; &quot;]{1}([a-zA-Z])&quot;
&apos;			.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot;
&apos;		End With
&apos;	End If
&apos;	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Заменить минус на дефис в уточняющих словах (черно-белый, дом-небоскреб, 1900-е, и т.д.)
Sub ReplaceMinusToDash( oDoc, oReplace )
	Dim SearchCaseSensitive As Boolean : SearchCaseSensitive = False &apos; запоминаем опцию регистра поиска, чтобы потом ее восстановить
	&apos; Между 2-х слов с Большой буквы: Париж-Берлин
	With oReplace
		SearchCaseSensitive = .SearchCaseSensitive
		.SearchCaseSensitive = True
		.SearchString = &quot;([:upper:]{1}[:lower:]{1,})[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}([:upper:]{1}[:lower:]{1,})&quot;
		.ReplaceString = &quot;$1&quot; &amp; chr(8212) &amp; &quot;$2&quot; &apos; длинное тире
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; Между 2-х слов, все буквы которых - строчные
	With oReplace
		SearchCaseSensitive = .SearchCaseSensitive
		.SearchCaseSensitive = True
		.SearchString = &quot;(\&lt;[:lower:]{2,})[-&quot; &amp; chr(8212) &amp; chr(8209) &amp; &quot;]{1}([:lower:]{2,})&quot;
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; Между 2-х слов, 1-е начинается с Заглавной буквы, 2-е - состоит из всех строчных: Черно-белый
	With oReplace
		SearchCaseSensitive = .SearchCaseSensitive
		.SearchCaseSensitive = True
		.SearchString = &quot;([:upper:]{1}[:lower:]{1,})[-&quot; &amp; chr(8212) &amp; chr(8209) &amp; &quot;]{1}([:lower:]{2,})&quot;
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	oReplace.SearchCaseSensitive = SearchCaseSensitive
	
	&apos; 1900-е, и т.д
	With oReplace
		.SearchString = &quot;([:digit:])[-&quot; &amp; chr(8212) &amp; chr(8209) &amp; &quot;]{1}([:alpha:])&quot;
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)

	&apos; Обработка слов вида: Да-а-а, Э-э-э
	With oReplace
		SearchCaseSensitive = .SearchCaseSensitive
		.SearchString = &quot;([:alpha:]{1,})[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}([:alpha:]{1,})&quot; &amp; &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]{1}([:alpha:]{1,})&quot;
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &amp; chr(8211) &amp; &quot;$3&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Заменить минус, дефис, неразрывный дефис и тире на короткое тире между цифрами
Sub ReplaceMinusHyphenDashToShortDashBetweenNumbers( oDoc, oReplace )
	&apos; арабские цифры
	&apos; без обрамляющих пробелов
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])&quot; &amp; chr(45) &amp; &quot;([:digit:])&quot; &apos; минус
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])&quot; &amp; chr(8208) &amp; &quot;([:digit:])&quot; &apos; дефис
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])&quot; &amp; chr(8209) &amp; &quot;([:digit:])&quot; &apos; неразрывный дефис
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])&quot; &amp; chr(8212) &amp; &quot;([:digit:])&quot; &apos; длинное тире
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; с обрамляющими пробелами
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])[:space:]+&quot; &amp; chr(45) &amp; &quot;[:space:]+([:digit:])&quot; &apos; минус
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])[:space:]+&quot; &amp; chr(8208) &amp; &quot;[:space:]+([:digit:])&quot; &apos; дефис
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])[:space:]+&quot; &amp; chr(8209) &amp; &quot;[:space:]+([:digit:])&quot; &apos; неразрывный дефис
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([:digit:])[:space:]+&quot; &amp; chr(8212) &amp; &quot;[:space:]+([:digit:])&quot; &apos; длинное тире
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; римские цифры
	&apos; без обрамляющих пробелов
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])&quot; &amp; chr(45) &amp; &quot;([MDCLXVI])&quot; &apos; минус
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])&quot; &amp; chr(8208) &amp; &quot;([MDCLXVI])&quot; &apos; дефис
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])&quot; &amp; chr(8209) &amp; &quot;([MDCLXVI])&quot; &apos; неразрывный дефис
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])&quot; &amp; chr(8212) &amp; &quot;([MDCLXVI])&quot; &apos; длинное тире
		.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; с обрамляющими пробелами
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])[:space:]+&quot; &amp; chr(45) &amp; &quot;[:space:]+([MDCLXVI])&quot; &apos; минус
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])[:space:]+&quot; &amp; chr(8208) &amp; &quot;[:space:]+([MDCLXVI])&quot; &apos; дефис
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])[:space:]+&quot; &amp; chr(8209) &amp; &quot;[:space:]+([MDCLXVI])&quot; &apos; неразрывный дефис
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([MDCLXVI])[:space:]+&quot; &amp; chr(8212) &amp; &quot;[:space:]+([MDCLXVI])&quot; &apos; длинное тире
		.ReplaceString = &quot;$1 &quot; &amp; chr(8211) &amp; &quot; $2&quot; &apos; короткое тире
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; =========================================================================================================================
&apos; 													Работа с пробелами и табуляциями 
&apos; =========================================================================================================================
&apos; Удалить пробелы в начале и в конце скобок
Sub RemoveSpaceInBrackets( oDoc, oReplace )
	With oReplace
		.SearchString = &quot;(\[|\(|\{)[:space:]+&quot;
		.ReplaceString = &quot;$1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[:space:]+(\]|\)|\})&quot;
		.ReplaceString = &quot;$1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удалить пробелы внутри кавычек (« слово » -&gt; «слово»)
Sub	RemoveSpaceInQuote( oDoc, oReplace )
	With oReplace
&apos;		.SearchString = &quot;([\&gt;“\&quot;&quot;«])\x20+|\x20+([”\&quot;&quot;»\&lt;])&quot;
		.SearchString = &quot;(\&gt;«)[:space:]+&quot; &apos; &quot;([\&gt;„«])\x20+&quot;
		.ReplaceString = &quot;$1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[:space:]+(»\&lt;)&quot; &apos; &quot;\x20+([“»\&lt;])&quot;
		.ReplaceString = &quot;$1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub
	
&apos; Удаление пробелов перед знаком препинания
Sub RemoveSpaceBeforePunct( oDoc, oReplace )
	With oReplace
		&apos;.SearchString = &quot;([а-яА-ЯёЁa-zA-Z])[&quot; &amp; chr(32) &amp; &quot;|&quot; &amp; chr(160) &amp; &quot;]+([.,:;!?…])&quot;
		&apos;.ReplaceString = &quot;$1$2&quot;
		.SearchString = &quot;(\&gt;|[\)}\]”\&quot;&quot;»])[:space:]{1,}([.,!?…])([&quot; &amp; chr(32) &amp; &quot;|&quot; &amp; chr(160) &amp; &quot;]{1,})&quot;
		.ReplaceString = &quot;$1$2$3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Вставляем пробел после знака препинания
Sub InsertSpaceBPunctAndSymbol( oDoc, oReplace )
	&apos; (.) обрабатываем только для русских букв и БОЛЬШИХ английских, чтобы &quot;не портились&quot; листинги кода, скрипты и интернет-адреса
&apos;	With oReplace
&apos;		&apos;.SearchString = &quot;([а-яА-ЯёЁa-zA-Z])([,:;!?])([а-яА-ЯёЁa-zA-Z])&quot;
&apos;		.SearchString = &quot;([а-яА-ЯёЁa-zA-Z]|[а-яА-ЯёЁa-zA-Z\)}\]”\&quot;&quot;»])([&quot; &amp; chr(32) &amp; &quot;|&quot; &amp; chr(160) &amp; &quot;]*)([,:;!?])([а-яА-ЯёЁa-zA-Z])&quot;
&apos;		.ReplaceString = &quot;$1$2$3 $4&quot;
&apos;	End With
&apos;	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;([а-яА-ЯёЁ]|[а-яА-ЯёЁ\)}\]”\&quot;&quot;»])[:space:]*([,:;!?])([а-яА-ЯёЁ])&quot;
		.ReplaceString = &quot;$1$2 $3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;([a-zA-Z]|[a-zA-Z\)}\]”\&quot;&quot;»])[:space:]*([,;!?])([a-zA-Z])&quot;
		.ReplaceString = &quot;$1$2 $3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
&apos;	With oReplace
&apos;		.SearchCaseSensitive = True
&apos;		&apos;.SearchString = &quot;([а-яА-ЯёЁa-zA-Z])([\.])([а-яА-ЯёЁA-Z])&quot;
&apos;		.SearchString = &quot;([а-яА-ЯёЁa-zA-Z]|[а-яА-ЯёЁa-zA-Z\)}\]”\&quot;&quot;»][&quot; &amp; chr(32) &amp; &quot;|&quot; &amp; chr(160) &amp; &quot;]*)([\.])([а-яА-ЯёЁA-Z])&quot;
&apos;		.ReplaceString = &quot;$1$2 $3&quot;
&apos;	End With
&apos;	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([а-яА-ЯёЁ]|[а-яА-ЯёЁ\)}\]”\&quot;&quot;»][:space:]{1,})([\.])([а-яА-ЯёЁ])&quot;
		.ReplaceString = &quot;$1$2 $3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchCaseSensitive = True
		.SearchString = &quot;([a-zA-Z]|[a-zA-Z\)}\]”\&quot;&quot;»][:space:]{1,})([\.])([A-Z])&quot;
		.ReplaceString = &quot;$1$2 $3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oReplace.SearchCaseSensitive = False
End Sub

&apos; Вставка ПРОБЕЛА между символами, кавычками и минусом, тире или дефисом
Sub InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, nSymbolCode )
	&apos; кавычки, дефис, тире или минус, кавычки
	With oReplace
		.SearchString = &quot;([”\&quot;&quot;»])&quot; &amp; chr(nSymbolCode) &amp; &quot;([“\&quot;&quot;«])&quot;	&apos; &quot;&quot;-“&quot;
		.ReplaceString = &quot;$1 &quot; &amp; chr(nSymbolCode) &amp; &quot; $2&quot; 				&apos; &quot;&quot; - “&quot;
	End With
	oDoc.ReplaceAll(oReplace)

	&apos; кавычки, дефис, тире или минус
	With oReplace
		.SearchString = &quot;([”\&quot;&quot;»])&quot; &amp; chr(nSymbolCode)	&apos; &quot;»-&quot;
		.ReplaceString = &quot;$1 &quot; &amp; chr(nSymbolCode)		&apos; &quot;» -&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	&apos; дефис, тире или минус, кавычки
	With oReplace
		.SearchString = chr(nSymbolCode) &amp; &quot;([“\&quot;&quot;«])&quot;	&apos; &quot;-“&quot;
		.ReplaceString = chr(nSymbolCode) &amp; &quot; $1&quot;		&apos; &quot; - “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Вставить неразрывные пробелы между фамилией и инициалами
Sub InsertNoBreakBlankToFIO( oDoc, oReplace )
	Dim bReplCase As Boolean : bReplCase = oReplace.SearchCaseSensitive
	&apos; регулярные выражения задавать именно в такой последовательности!
	With oReplace
		.SearchRegularExpression = True
		.SearchCaseSensitive = True		&apos; Учитывать регистр при поиске
		.searchAll=True
	End With
	&apos; Для русских Фамилий
	&apos; 1. слово И.О. Фамилия
	With oReplace
		.SearchString = &quot;(\&gt;)\x20+([А-Я]\.)\x20*([А-Я]\.)\x20*([А-Я]+)&quot;
		.ReplaceString =  &quot;$1 $2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 2. слово Фамилия И.О.
	With oReplace
		.SearchString = &quot;(\&gt;)\x20+([А-Я][а-я]+)\x20+([А-Я]\.)\x20*([А-Я]\.)&quot;
		.ReplaceString =  &quot;$1 $2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 3. С начала абзаца И.О.Фамилия
	With oReplace
		.SearchString = &quot;(\n)\x20*([А-Я]\.)\x20*([А-Я]\.)\x20*([А-Я]+)&quot;
		.ReplaceString =  &quot;\n$2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	With oReplace
		.SearchString = &quot;^\x20*([А-Я]\.)\x20*([А-Я]\.)\x20*([А-Я]+)&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 4. С начала абзаца И.О.Фамилия
	With oReplace
		.SearchString = &quot;(\n)\x20*([А-Я][а-я]+)\x20+([А-Я]\.)\x20*([А-Я]\.)&quot;
		.ReplaceString =  &quot;\n$2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	With oReplace
		.SearchString = &quot;^\x20*([А-Я][а-я]+)\x20+([А-Я]\.)\x20*([А-Я]\.)&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.replaceAll(oReplace)
	
	&apos; Для иностранных Фамилий
	&apos; 1. word N.P. Family
	With oReplace
		.SearchString = &quot;(\&gt;)\x20+([A-Z]\.)\x20*([A-Z]\.)\x20*([A-Z]+)&quot;
		.ReplaceString =  &quot;$1 $2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 2. word Family N.P.
	With oReplace
		.SearchString = &quot;(\&gt;)\x20+([A-Z][a-z]+)\x20+([A-Z]\.)\x20*([A-Z]\.)&quot;
		.ReplaceString =  &quot;$1 $2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 3. С начала абзаца N.P.Family
	With oReplace
		.SearchString = &quot;(\n)\x20*([A-Z]\.)\x20*([A-Z]\.)\x20*([A-Z]+)&quot;
		.ReplaceString =  &quot;\n$2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	With oReplace
		.SearchString = &quot;^\x20*([A-Z]\.)\x20*([A-Z]\.)\x20*([A-Z]+)&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.replaceAll(oReplace)
	&apos; 4. С начала абзаца N.P.Family
	With oReplace
		.SearchString = &quot;(\n)\x20*([A-Z][a-z]+)\x20+([A-Z]\.)\x20*([A-Z]\.)&quot;
		.ReplaceString =  &quot;\n$2&quot; &amp; chr(160) &amp; &quot;$3&quot; &amp; chr(160) &amp; &quot;$4&quot;
	End With
	oDoc.replaceAll(oReplace)
	With oReplace
		.SearchString = &quot;^\x20*([A-Z][a-z]+)\x20+([A-Z]\.)\x20*([A-Z]\.)&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.replaceAll(oReplace)

	&apos; Обработка Римских цифр и слов перед/после них/ними.
	With oReplace
		.SearchString = &quot;([XIVL])\x20+([A-Za-zА-Яа-я]+)&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.replaceAll(oReplace)
	With oReplace
		.SearchString = &quot;([A-Za-zА-Яа-я]+)\x20+([XIVL])&quot;
		.ReplaceString =  &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.replaceAll(oReplace)
	
	&apos; Теперь восстанавливаем значение учета регистра при поиске и замене
	oReplace.SearchCaseSensitive=bReplCase
End Sub

&apos; Вставить неразрывный пробел в сокращениях т.д., т.п., т.к., т.н., т.ч., т.е. и в датах (19 января ...)
Sub InsertNoBreakBlankToShortening( oDoc, oReplace )
	&apos; для русского языка
	With oReplace
		.SearchString	= &quot;([^а-яА-ЯёЁ]т\.)\x20*([д|п|к|е|н|ч|о]{1}\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(по|после|до|между)\x20+([н|Р]{1}\.)\x20*([э|Х]{1}\.)&quot;
		.ReplaceString	= &quot;$1 $2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	&apos; обработка даты
	With oReplace
		.SearchString	= &quot;([:digit:]{2,4})(\x20*)(г)([\.*$])&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$3$4&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;([:digit:]{2,4})(\x20*)(г)([\x20*$])&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$3.$4&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;([:digit:]{2,4})(\x20*)(г$)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$3.$4&quot;
	End With
	oDoc.ReplaceAll(oReplace)

	&apos; для английского языка
	With oReplace
		.SearchString	= &quot;(B\.)\x20*(C\.)\x20*(E\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(A\.)\x20*(D\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(B\.)\x20*(C\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(C\.)\x20*(E\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;([a|p]\.)\x20*(m\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(e\.)\x20*(g\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(i\.)\x20*(e\.)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Вставка неразрывного пробела в датах (19 января, January 19 ... )
Sub InsertNoBreakBlankToDate( oDoc, oReplace )
	With oReplace
		.SearchString	= &quot;([0-9])([:space:]+)(январ|феврал|март|апрел|мая|июн|июл|август|сентябр|октябр|ноябр|декабр)&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString	= &quot;(january|february|march|april|may|june|july|august|september|october|november|december)([:space:]+)([0-9])&quot;
		.ReplaceString	= &quot;$1&quot; &amp; chr(160) &amp; &quot;$3&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Вставка пробела между знаком препинания и минусом, тире или дефисом
Sub InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, nSymbolCode )
	With oReplace
		.SearchString	= &quot;([\.,:…\?\!])&quot; &amp; chr(nSymbolCode)	&apos; &quot;.—&quot;
		.ReplaceString	= &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSymbolCode)			&apos; &quot;. —&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Заменяем все множественные пробелы (простые и неразрывные), табуляции между слов на заданное число пробелов или табуляций
Sub ReplaceMSpaceTo( oDoc, nReplaceCount, bTCToSpace )
	Dim sReplaceStr As String
	If bTCToSpace = True Then
		sReplaceStr = Space(nReplaceCount)
	Else
		Dim i As Integer
		For i=0 To nReplaceCount-1
			sReplaceStr = sReplaceStr + &quot;\t&quot;
		Next i
	End If
	
	&apos; в условие поиска игнорируем цифры в верхнем или нижнем индексе
	Dim SrchAttributes(0) As New com.sun.star.beans.PropertyValue
	SrchAttributes(0).Name	= &quot;CharAutoEscapement&quot;
	SrchAttributes(0).Value	= False
	
	Dim oDesc : oDesc = oDoc.createSearchDescriptor()
	With oDesc
		.SearchRegularExpression = True
		.SetSearchAttributes(SrchAttributes())
&apos;&apos;		.SearchString = &quot;([:alnum:]|[\.,:;…?\!\)}\]»&apos;”\&quot;&quot;])[:space:]{2,}([:alnum:]|[\({\[«&apos;“\&quot;&quot;])&quot;
&apos;		.SearchString = &quot;([:alpha:]|[\.,:;…?\!\)}\]»&apos;”\&quot;&quot;])[:space:]{2,}([:alpha:]|[\({\[«&apos;“\&quot;&quot;])&quot;
		If bTCNBDelSpace Then
			&apos; все пробелы - и простые и неразрывные
			.SearchString = &quot;([:alpha:]|[\.,:;…?\!\)}\]»&apos;”\&quot;&quot;\&gt;%=\-\+&quot;&amp;chr(8209)&amp;chr(8211)&amp;chr(8212)&amp;&quot;])[\x20\xA0\t]{2,}([:alpha:]|[({\[«&apos;“\&quot;&quot;\&lt;])&quot;
		Else
			&apos; только простые пробелы
			.SearchString = &quot;([:alpha:]|[\.,:;…?\!\)}\]»&apos;”\&quot;&quot;\&gt;%=\-\+&quot;&amp;chr(8209)&amp;chr(8211)&amp;chr(8212)&amp;&quot;])[\x20\t]{2,}([:alpha:]|[({\[«&apos;“\&quot;&quot;\&lt;])&quot;
		End if
		.ReplaceString = &quot;$1&quot; &amp; sReplaceStr &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oDesc)
End Sub

&apos; Удаляем все стартовые пробелы
Sub DelStartSpace( oDoc, oReplace )
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^ {1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удаляем все неразрывные стартовые пробелы
Sub DelStartNoBreakSpace( oDoc, oReplace )
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^&quot; &amp; Chr(160) &amp; &quot;{1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удаляем все стартовые табуляции
Sub DelStartTab( oDoc, oReplace )
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^\t{1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удаляем все конечные ПРОСТЫЕ и НЕРАЗРЫВНЫЕ пробелы, их комбинацию и табуляции
Sub DelEndSpace( oDoc, oReplace )
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;[:space:]{1,}$|\t{1,}$&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos;////////////////////////////////// Разное /////////////////////////////// 
&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
Sub QuotationMarks( oDoc, oReplace )
	With oReplace
		.SearchString = &quot;^ {1,}[&quot;&quot;“„]&quot;
		.ReplaceString = &quot;«&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;\&gt;[&quot;&quot;”]&quot;
		.ReplaceString = &quot;»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\&lt;&quot;
		.ReplaceString = &quot;«&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;…[&quot;&quot;”]&quot;
		.ReplaceString = &quot;…»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]…&quot;
		.ReplaceString = &quot;«…&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;\![&quot;&quot;”]&quot;
		.ReplaceString = &quot;!»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\?[&quot;&quot;”]&quot;
		.ReplaceString = &quot;?»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\.[&quot;&quot;”]&quot;
		.ReplaceString = &quot;.»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\(&quot;
		.ReplaceString = &quot;«(&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\)[&quot;&quot;”]&quot;
		.ReplaceString = &quot;)»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\[&quot;
		.ReplaceString = &quot;«[&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\][&quot;&quot;”]&quot;
		.ReplaceString = &quot;]»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\{&quot;
		.ReplaceString = &quot;«{&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;\}[&quot;&quot;”]&quot;
		.ReplaceString = &quot;}»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„][\+]&quot;
		.ReplaceString = &quot;«+&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„][\-]&quot;
		.ReplaceString = &quot;«-&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[\+][&quot;&quot;”]&quot;
		.ReplaceString = &quot;+»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	With oReplace
		.SearchString = &quot;[\-][&quot;&quot;”]&quot;
		.ReplaceString = &quot;-»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
End Sub

&apos; Удаляем все разрывы страниц
Function DeleteAllPageBreaks() As Integer 
	Dim lCount As Integer : lCount = 0
	Dim oText As Variant : oText = ThisComponent.Text
	Dim oCursor As Variant
	oCursor = oText.CreateTextCursor()
	oCursor.GoToStart(False)
	Do
		If NOT oCursor.gotoEndOfParagraph(True) Then Exit Do
		If NOT IsEmpty(oCursor.PageDescName) Then oCursor.PageDescName = &quot;&quot;
		If oCursor.BreakType &lt;&gt; com.sun.star.style.BreakType.NONE Then
			oCursor.BreakType = com.sun.star.style.BreakType.NONE
			lCount = lCount + 1
		End If
	Loop Until NOT oCursor.gotoNextParagraph(False)
	DeleteAllPageBreaks = lCount
End Function

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов
&apos; в тексте, таблицах, сносках и врезках)
Sub JoinWordDefisParaInAllTexts( bDefisWordDelOnlyPara, bDefisWordDeAll, ByRef oProgressBar, ByRef nCur )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте
	JoinWordDefisParaInText( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
	JoinWordDefisParaInTables( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
	&apos; в сноская (Footnote и Endnote) и в текстовых врезках
	JoinWordDefisParaInFENotesAndTextFrames( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте)
Sub JoinWordDefisParaInText( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	With vSearch
		.SearchRegularExpression = True
		.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
	End With
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	vEndFound = oDoc.findFirst(vSearch)
	vL = oDoc.findFirst(vSearch)
	vR = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		If Not IsNull(vStartFound) Then
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If IsEmpty( vStartFound.TextTable ) Then &apos; таблицы не обрабатываем
				&apos; на конец слова с переносом
				If Not IsNull(vEndFound) Then
					With vEndFound
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					With vR
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
					ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, True, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
					&apos; ищем далее
					vStartFound = oDoc.findNext( vStartFound.End, vSearch )
					vEndFound = oDoc.findNext( vEndFound.End, vSearch )
					vL = oDoc.findNext( vL.End, vSearch )
					vR = oDoc.findNext( vR.End, vSearch )
				Else Exit Do
				End If
			Else &apos; обходим строки таблицы
				If Not IsNull(vEndFound) Then
					vStartFound.gotoNextParagraph(False)
					vL.gotoNextParagraph(False)
					With vEndFound
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					With vR
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					vStartFound = oDoc.findNext( vStartFound.End, vSearch )
					vEndFound = oDoc.findNext( vEndFound.End, vSearch )
					vL = oDoc.findNext( vL.End, vSearch )
					vR = oDoc.findNext( vR.End, vSearch )
				Else Exit Do
				End If
			End If
		End If
	Loop
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
Sub JoinWordDefisParaInTables( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, oTable As Object, oCell As Object
	Dim nTablesCount As Integer, i As Integer, l As Long
	oDoc = ThisComponent
	nTablesCount = ThisComponent.getTextTables().getCount() 
	For i=0 To nTablesCount-1
		oTable = oDoc.getTextTables().getByIndex(i)
		oCell = oTable.getCellByName(&quot;A1&quot;)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта в ячейке A1 i-й текстовой таблицы.
		vStartFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vL = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vR = oDoc.findNext( oCell.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull(vStartFound)
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же текстовую таблицу - закончить.
			If NOT EqualUnoObjects(oTable, vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				With vEndFound
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				With vR
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
&apos; в сноская (Footnote и Endnote) и в текстовых врезках
Sub JoinWordDefisParaInFENotesAndTextFrames( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oFootNotes As Object
	Dim i As Integer, l As Long
	Dim oDoc As Object : oDoc = ThisComponent
	Dim nFootnoteCount As Integer : nFootnoteCount = ThisComponent.getFootNotes().getCount() 
	For i=0 To nFootnoteCount-1
		&apos; Получить i-ю сноску
		oFootNotes = oDoc.getFootNotes().getByIndex(i)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта
		vStartFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vL = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vR = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull( vStartFound )
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.FootNote) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же сноску - закончить.
			&apos; закомментировал - чтобы обрабатывалось все - и сноски, и врезки
&apos;			If NOT EqualUnoObjects(oFootNotes, vStartFound.FootNote) Then
&apos;				Exit Do
&apos;			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				With vEndFound
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				With vR
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////
&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
Sub ProcessingHyphen( oLCurs, oRCurs, vL, vR, oDoc, bText As Boolean, bDefisWordDelOnlyPara As Boolean, bDefisWordDeAll As Boolean, oProgressBar, l )
	&apos; Алгоритм: если это слово с дефисом, то удаляем разрыв; иначе - удаляем и &quot;-&quot;, и разрыв
	On Error GoTo ErrorHandler
	
	If IsNull( oLCurs ) Or IsNull( oRCurs ) Or IsNull( oDoc ) Then Exit Sub
	If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
		If oDoc.Text.compareRegionEnds( oLCurs, oRCurs ) &lt;= 0 Then Exit Sub
	End If
	vL.gotoRange(vR, True)
	
	&apos; проверка, какой символ стоит после конца абзаца $. Если цифра, то выходим, т.к. это может быть страничная сноска
	&apos; проверку делаем так: если до - русский символ, то проверяем 1-й после $ на русский символ. Если - английский, то проверяем на английский
	&apos; если до - стоит не рус. и не англ. буква, то выходим - склейка не нужна
	Dim s As String		: s = vL.GetString()
	&apos; определяем тип символа переноса
	Dim sPer As String	: sPer = &quot;-&quot;
	If InStr(s,&quot;-&quot; ) &gt; 0 Then
		sPer = &quot;-&quot;
	ElseIf InStr(s,chr(8211) ) &gt; 0 Then
		sPer = chr(8211)
	ElseIf InStr(s,chr(8209) ) &gt; 0 Then
		sPer = chr(8209)
	End If
	
	&apos; определяем язык символа слева от знака переноса
	Dim c As String : c = Trim( Mid( s, InStr(s,sPer ) - 1, 1 )
	Dim sLeftLang As String, sRightLang As String
	If IsLetter(c) = True Then
		&apos; определяем язык буквы слева от переноса
		sLeftLang = GetLang(c)
		&apos; смотрим, является ли буквой символ справа от переноса и обрыва абзаца в следующем обзаце
		c = Trim( Mid( s, InStr(s, chr(10)) + 1 ) ) : c = Mid( c, 1, 1 )
		If IsLetter(c) = True Then
			&apos; определяем язык буквы справа от переноса и обрыва абзаца в следующем обзаце
			sRightLang = GetLang(c)
			If sLeftLang &lt;&gt; &quot;Unknow&quot; And sRightLang &lt;&gt; &quot;Unknow&quot; Then
				If sLeftLang = sRightLang Then
					&apos; обрабатываем разорванные дефисы
					If IsHyphen( vL.getString() ) = True Then
						&apos; Слово с дефисом - просто удаляем разрыв
						RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
					Else
						If bDefisWordDelOnlyPara Then
							&apos; еще и для слов удаляем только символ абзаца без переноса
							RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
						ElseIf bDefisWordDeAll Then
							&apos; еще и для слов удаляем и перенос, и символ абзаца
							RegReplaceSymbol( &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
							RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
						End If
					End If
				End If
			End If
		End If
	End If

ErrorHandler:
	&apos; &quot;подтягиваем&quot; позиции курсора для обработки слов к позиции курсора для сравнения слов (для согласования поиска)
	oLCurs.gotoRange( vL, False )
	oRCurs.gotoRange( vR, False )
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Поиск заданного символа (sFindSymbol) в заданном диаппазоне (oLCurs, oRCurs) и замена его нужным (sReplSymbol)
Sub RegReplaceSymbol( sFindSymbol As String, sReplSymbol As String, oLCurs, oRCurs, oDoc, bText As Boolean, oProgressBar, l )
	On Error GoTo ErrorHandler
	
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = sFindSymbol
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
&apos;	Do While Not IsNull(vFound)
	If Not IsNull(vFound) Then
		If l &gt;= 100 Then l = 0
		l = l + 1
		oProgressBar.setValue(l)
		If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
			If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &lt;= 0 Then Exit Sub
		End If
		vFound.setString( sReplSymbol )
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
&apos;	Loop
	End If
	ErrorHandler:
End Sub

&apos; /////////////////////////////////////////////////////////////////////////////////////////
&apos; возвращает True, если анализируемое слово - слово с дефисом
Function IsHyphen( sWord As String ) As Boolean
	Dim i As Integer
	Dim aLDefis() As String, aRDefis() As String
	aLDefis = Array(&quot;где&quot;,&quot;откуда&quot;,&quot;зачем&quot;,&quot;почему&quot;,&quot;отчего&quot;, _
					&quot;кто&quot;,&quot;как&quot;,&quot;когда&quot;,&quot;какой&quot;,&quot;какого&quot;,&quot;какому&quot;,&quot;каком&quot;,&quot;какая&quot;,&quot;какую&quot;,&quot;какое&quot;,&quot;какого&quot;,&quot;какие&quot;, _
					&quot;каких&quot;,&quot;каким&quot;,&quot;кем&quot;,&quot;кого&quot;,&quot;кому&quot;,&quot;ком&quot;,&quot;куда&quot;, _
					&quot;что&quot;,&quot;чем&quot;,&quot;чём&quot;,&quot;чему&quot;,&quot;чей&quot;,&quot;чья&quot;,&quot;чьего&quot;,&quot;чьему&quot;,&quot;чьей&quot;,&quot;чьи&quot;,&quot;чьих&quot;,&quot;чьими&quot;,&quot;чье&quot;, _
					&quot;чьё&quot;,&quot;чего&quot;, _
					&quot;сколько&quot;,&quot;скольких&quot;,&quot;скольким&quot;,&quot;сколькими&quot;)
	aRDefis = Array(&quot;нибудь&quot;,&quot;либо&quot;)

	Dim aLR() As String, bFind As Boolean
	aLR = Split( sWord, chr(10) ) &apos; делим слово надвое
	bFind = False
	
	&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
	Dim sLeft As String, sRight As String
	sLeft = LCase( Mid( aLR(0), 1, Len(aLR(0))-2 ) )
	sRight = LCase( DeletePunctMarkInString( aLR(1) ) )

	&apos; II. обработка слов по шаблону только левой или только правой части слова
	&apos; 1. обработка слов &quot;xxx-то&quot;
	If sRight = &quot;то&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 2. обработка слов &quot;xxx-ка&quot;
	If sRight = &quot;ка&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 3. обработка слов &quot;по-xxx&quot;
	If sLeft = &quot;по&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 4. обработка слов &quot;кое-xxx&quot;
	If sLeft = &quot;кое&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 5. обработка слов &quot;кой-xxx&quot;
	If sLeft = &quot;кой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 6. обработка слов &quot;из-xxx&quot;
	If sLeft = &quot;из&quot; And ( sRight = &quot;за&quot; Or sRight = &quot;под&quot; ) Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 7. обработка слов &quot;xxx-таки&quot;
	If sRight = &quot;таки&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 8. обработка слов &quot;как-никак&quot;
	If sLeft = &quot;как&quot; And sRight = &quot;никак&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 9. обработка слов &quot;какой-никакой&quot;
	If sLeft = &quot;какой&quot; And sRight = &quot;никакой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 10. обработка слов &quot;во-xxx&quot;
	If sLeft = &quot;во&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 11. обработка слов &quot;в-xxx&quot;
	If sLeft = &quot;в&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 12. обработка слов &quot;xxx-ли&quot;
	If sRight = &quot;ли&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; II. обработка слов и по левой части и по правой (сравнение с шаблонами)
	&apos; 1. сравнимаем правую часть слова с шаблоном
	For i=0 To UBound( aRDefis() )
		If sRight = LCase( aRDefis(i) ) Then 
			bFind = True &apos; совпадает
			Exit For
		Else
			bFind = False
		End If
	Next i
	
	&apos; II.2. если правая часть совпадает, смотрим левую
	If bFind = True Then
		For i=0 To UBound( aLDefis() )
			If sLeft = LCase( aLDefis(i) ) Then 
				IsHyphen = True &apos; Слово с дефисом
				Exit Function
			End If
		Next i
	End If
	
	IsHyphen = False &apos; Разорванное Абзацем Слово
End Function

&apos; ////////////////////////////////////////////////////////////////////////
&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
Function DeletePunctMarkInString( byval sString As String ) As String
	Dim aPunctMarks() As String
	Dim i As Integer, c As Integer
	aPunctMarks = Array( &quot;.&quot;,&quot;,&quot;,&quot;:&quot;,&quot;&apos;&quot;,&quot;!&quot;,&quot;?&quot;,&quot;\&quot;,&quot;/&quot;,&quot;=&quot;,&quot;+&quot;,&quot;-&quot;,&quot;*&quot;,&quot;&amp;&quot;,&quot;…&quot;, _
						&quot;(&quot;,&quot;)&quot;,&quot;[&quot;,&quot;]&quot;,&quot;{&quot;,&quot;}&quot;,&quot;|&quot;,&quot;№&quot;,&quot;`&quot;,&quot;~&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&quot;&quot;&quot;,&quot;«&quot;,&quot;»&quot;,&quot;“&quot;,&quot;„&quot;,&quot;”&quot; )
	For i=0 To UBound( aPunctMarks() )
		c = InStr( sString, aPunctMarks(i) )
		If c &gt; 0 Then &apos; нашли что-то
			sString = Mid( sString, 1, c-1 )
		Else
			DeletePunctMarkInString = sString
			Exit Function
		End If
	Next i
End Function

</script:module>