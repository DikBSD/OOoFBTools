<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Const sConstCorrector As String = &quot;/OOoFBTools/corrector.txt&quot; &apos; файл начтроек Корректора Текста

Private oDoc As Object
Private oReplace As Object

Public oTextCorrectorDlg As Object

Private bDelSpace As Boolean

Private bOnlyDefisPara
Private bDefisWordDelOnlyPara
Private bDefisWordDeAll

Private bDelEmptyPar As Boolean
Private bBreakLinesInPara As Boolean
Private bBreakLinesInParaStartSpace As Boolean
Private bBreakLinesInParaEndSymbols As Boolean

Private bDelMP As Boolean &apos; удаление мягкие переносы
Private bWordDefisPara As Boolean

Private bDelPB As Boolean &apos; Удаление разрывов страниц

Private bBreakLine As Boolean
Private bDel As Boolean
Private bPar As Boolean
Private bSpace As Boolean

Private b2HyphenToDash As Boolean
Private bHyphenToDash As Boolean
Private bDefis As Boolean
Private bKav As Boolean
Private bPoints As Boolean
Private bC As Boolean
Private bImages As Boolean
Private nAnchor As String

Sub TextCorrector()
	DialogLibraries.LoadLibrary(&quot;OOoFBTools&quot;)
	oTextCorrectorDlg = CreateUnoDialog(DialogLibraries.OOoFBTools.TextCorrectorDlg)
	
	&apos; инициализация формы вставки Жанров Книги в Служебную области Текста
	InitTextCorrectorDlgDlg()
	
	Dim sAnchorsList() As String &apos; виды привязки картинки
	sAnchorsList() = Array( sTCD.sToParagraph, sTCD.sToSymbol, sTCD.sAsSymbol )
	With oTextCorrectorDlg.Model
		.Height = 242
		.Width  = 318
		.cbAnchor.StringItemList = sAnchorsList()
	End With
	
	&apos; АЛГОРИТМ - Очень ВАЖНО!!!
	&apos; т.к. Корректор развивается, и в диалоге Корректора Текста появляются НОВЫЕ опции (контролы),
	&apos; а у пользователей УЖЕ СОХРАНЕН файл corrector.txt, где данных для этих новых опций нет,
	&apos; то при работе Корректора может произойти либо ошибка, либо коректура произведется не так, как ожидается,
	&apos; а при запуске формы Корректора новые опции будут не такими, как ожидал User,
	&apos; Поэтому, сначала устанавливаем значения переменных по умолчанию (SetCorrectorSettingDefault),
	&apos; а потом - считываем из файла значения опций в переменные (ReadCorrectorSettings).
	&apos; Для тех новых опций, которых еще нет в файле corrector.txt значения будут по умолчанию,
	&apos; а для остальных - считаны из файла.
	&apos; Когда же User запустит форму и пересохранит ВСЕ настройки Корректора,
	&apos; то вне переменные и контролы будут иметь значения из файла!
		
	&apos; Задаем настройки очистки текста в контролы по умолчанию
	SetCorrectorSettingDefault()
	&apos; только теперь считывание настройки из файла
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getUserPath() &amp; sConstCorrector, oTextCorrectorDlg, nX, nY )
	oTextCorrectorDlg.setPosSize( nX, nY, 242, 318, com.sun.star.awt.PosSize.POS )
	
	cboxWordDefisParaEnabled()
	cboxImagesEnabled()
	cboxBreakLineEnabled()
	cboxBreakLinesInParaEnabled()
				
	oTextCorrectorDlg.execute()

End Sub

Sub SaveCorrectorSettings()
	&apos; записываем настройки очистки текста
	Dim oLB As Object &apos; Для работы с ListBox`ами
	SaveSettings( getUserPath() &amp; sConstCorrector, oTextCorrectorDlg )
	
	&apos; заполняем переменные
	bWordDefisPara = oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State
	bOnlyDefisPara = oTextCorrectorDlg.GetControl(&quot;obtnOnlyDefisPara&quot;).State
	bDefisWordDelOnlyPara = oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State
	bDefisWordDeAll = oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDeAll&quot;).State
		
	bDelSpace = oTextCorrectorDlg.GetControl(&quot;cboxDelSpace&quot;).State
	
	bDelEmptyPar = oTextCorrectorDlg.GetControl(&quot;cboxDelEmptyPar&quot;).State
	bBreakLinesInPara = oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State
	bBreakLinesInParaStartSpace = oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).State
	bBreakLinesInParaEndSymbols = oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).State
	
	bBreakLine = oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State
	bDel = oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).State
	bPar = oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).State
	bSpace = oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).State
	
	b2HyphenToDash = oTextCorrectorDlg.GetControl(&quot;cbox2HyphenToDash&quot;).State
	bHyphenToDash = oTextCorrectorDlg.GetControl(&quot;cboxHyphenToDash&quot;).State
	bDefis = oTextCorrectorDlg.GetControl(&quot;cboxDefis&quot;).State
	bKav = oTextCorrectorDlg.GetControl(&quot;cboxKav&quot;).State
	bPoints = oTextCorrectorDlg.GetControl(&quot;cboxPoints&quot;).State
	bC = oTextCorrectorDlg.GetControl(&quot;cboxC&quot;).State
	bImages = oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State
	oLB = oTextCorrectorDlg.getControl(&quot;cbAnchor&quot;)
	nAnchor = oLB.SelectedItem
	bDelMP = oTextCorrectorDlg.GetControl(&quot;cboxMP&quot;).State
	bDelPB = oTextCorrectorDlg.GetControl(&quot;cboDelPB&quot;).State
	
End Sub

Sub SetCorrectorSettingDefault()
	&apos; Установка настроек по умолчанию в контролы
	Dim oLB As Object &apos; Для работы с ListBox`ами
	&apos; Работа с пробелами и табуляциями
	oTextCorrectorDlg.GetControl(&quot;cboxDelSpace&quot;).State = 1

	&apos; Работа с разорванными дефисами и переносами символом ¶ 
	oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0
	oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0

	&apos; Работа с абзацами и разрывами	
	oTextCorrectorDlg.GetControl(&quot;cboxDelEmptyPar&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State = 0
	oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).State = 0
	
	oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).State = 0
	oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).State = 0
	&apos; Кавычки, Дефисы. Разное
	oTextCorrectorDlg.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxHyphenToDash&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxDefis&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxKav&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxPoints&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxC&quot;).State = 0
	&apos; Картинки
	oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State = 0
	oLB = oTextCorrectorDlg.getControl(&quot;cbAnchor&quot;)
	oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
	&apos; мягкие переносы
	oTextCorrectorDlg.GetControl(&quot;cboxMP&quot;).State = 1
	&apos; разрывы страниц
	oTextCorrectorDlg.GetControl(&quot;cboDelPB&quot;).State = 0
	
	cboxWordDefisParaEnabled
	cboxImagesEnabled
	cboxBreakLineEnabled
	cboxBreakLinesInParaEnabled
End Sub

Sub CheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 1	
		End If
	Next i
	cboxWordDefisParaEnabled
	cboxImagesEnabled
	cboxBreakLineEnabled
	cboxBreakLinesInParaEnabled
End Sub

Sub UnCheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 0	
		End If
	Next i
	cboxWordDefisParaEnabled
	cboxImagesEnabled
	cboxBreakLineEnabled
	cboxBreakLinesInParaEnabled
End Sub

Sub cboxWordDefisParaEnabled()
	If oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable = False
	End If
End Sub

Sub cboxImagesEnabled()
	If oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;lblAnchor&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;cbAnchor&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;lblAnchor&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;cbAnchor&quot;).Enable = False
	End If
End Sub

Sub cboxBreakLineEnabled()
	If oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).Enable = False
	End If
End Sub

Sub cboxBreakLinesInParaEnabled()
	If oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).Enable = False
	End If
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////
&apos; запуск корректировки
Sub TextCorrectorDlgOk()
	Dim sCorrectorName As String
	sCorrectorName = sTCD.sTextCorrecting
	&apos; Если есть опции для чистки, то - работаем
	Dim ctrl As Object, i As Integer, bSel As Boolean
	bSel = False
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			If ctrl(i).Model.State Then
				bSel = True
			End If
		End If
	Next i
	If Not bSel Then
		MsgBox sTCD.sSelectOptions, 64, sCorrectorName
		Exit Sub
	End If
	
	&apos; Принятие параметров чистки текста
	oTextCorrectorDlg.endExecute()
	
	SaveCorrectorSettings &apos; сохранение настроек чистки текста

	Dim oProgressBar : oProgressBar = ThisComponent.CurrentController.StatusIndicator
	
	&apos; Очистка текста
	oDoc = ThisComponent
	oReplace = oDoc.createReplaceDescriptor
	oReplace.SearchRegularExpression = True
	
	&apos; Привязка картинок
	If bImages = True Then
		Dim oGraphics As Object 
		Dim oThisGraphic As Object 
		Dim iAnchor As Integer
		Select Case nAnchor
			Case sTCD.sToParagraph
				iAnchor = 0
			Case sTCD.sToSymbol
				iAnchor = 4
			Case sTCD.sAsSymbol
				iAnchor = 1
			Case Else
				iAnchor = 0
		End Select
		oGraphics = oDoc.getGraphicObjects()
	    For i = 0 to oGraphics.Count - 1
	    	oThisGraphic = oGraphics.GetByIndex(i)
			oThisGraphic.AnchorType  = iAnchor
		Next i
	End If
	

	Dim nCur As Integer
	nCur = 0
	
	&apos; удаление разрывов страниц
	If bDelPB Then
		DeleteAllPageBreaks()
	End If
	
	&apos; Удаление мягких переносов
	If bDelMP = True Then
		DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
	End If

	&apos; Работа с абзацами и разрывами
	
	If bWordDefisPara = True Then
		&apos; Удаление мягких переносов
		If bDelMP = False Then
			DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
		End If
		&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов
		&apos; в тексте, таблицах, сносках и врезках
		JoinWordDefisParaInAllTexts( oProgressBar )
	End If
	
	If bBreakLinesInPara = True Then
		&apos; !!!!!!!!!не переставлять местами все эти условия!!! Результат будет неверен!!!!!!
		&apos; Удаление мягких переносов
		If bDelMP = False Then
			DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
		End If
		If bWordDefisPara = False Then &apos; если обработка дефисов не проводилась
			&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов
			&apos; в тексте, таблицах, сносках и врезках
			JoinWordDefisParaInAllTexts( oProgressBar )
		End If
		oProgressBar.start( sTCD.sSpliceLines, ThisComponent.ParagraphCount )
		If bBreakLinesInParaStartSpace = True Then
			JoinBreakLinesInParaStartSpace( oProgressBar )
		ElseIf bBreakLinesInParaEndSymbols = True Then
			JoinBreakLinesInParaEndSymbols( oProgressBar )
		End If
	End If

	oProgressBar.start( sTCD.sTextCorrecting &amp; &quot;:&quot;, 98 )
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	If bDelEmptyPar = True Then
		&apos; Удаляем все множественные пустые абзацы
		Dim oDoc As Object : oDoc = ThisComponent
		Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchRegularExpression = True
			.SearchString = &quot;^$&quot;
		End With
		Dim vFound As Variant : vFound = oDoc.findFirst( vSearch )
		Do While Not IsNull( vFound )
			If Not IsNull( vFound ) Then
				vFound.setString(&quot;&quot;)
				&apos; ищем далее
				vFound = oDoc.findNext( vFound.getEnd(), vSearch )
			End If
		Loop
		oProgressBar.setValue( nCur )
		nCur = nCur+1
	End If
	If bBreakLine = True Then
		&apos; Разрывы строк
		If bDel = True Then
			&apos; Удаляем разрыв строки
			oReplace.SearchString = chr(10)
			oReplace.ReplaceString = &quot;&quot;
		ElseIf bPar = True Then
			&apos; Заменяем разрыв строки на абзац
			oReplace.SearchString = chr(10)
			oReplace.ReplaceString = &quot;\n&quot;
		ElseIf bSpace = True Then
			&apos; Заменяем разрыв строки на 1 пробел
			oReplace.SearchString = chr(10)
			oReplace.ReplaceString = &quot; &quot;
		End If
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	&apos; Кавычки, Дефисы, Разное
	If b2HyphenToDash = True Then
		&apos; Заменить двойной дефис (--) на тире
		oReplace.SearchString = &quot;--&quot;
		oReplace.ReplaceString = &quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = chr(8211) &amp; chr(8211)
		oReplace.ReplaceString = &quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	If bHyphenToDash = True Then
		&apos; Заменить, дефис используемый вместо тире на тире
		&apos; (В прямой речи, между слов, но не в &quot;какой-то, где-то...&quot;)
		HyphenToDash( oDoc, oReplace, oProgressBar, nCur )
	End If
	If bDefis = True Then
		&apos; Вместо минуса - дефис в &quot;кое-что&quot;, &quot;куда-то&quot; и т.д.
		oReplace.SearchString = &quot;\&gt;-\&lt;&quot;
		oReplace.ReplaceString = chr(8211)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		
		oReplace.SearchString = &quot;\&gt;- \&lt;&quot;
		oReplace.ReplaceString = chr(8211)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		
		oReplace.SearchString = &quot;\&gt; -\&lt;&quot;
		oReplace.ReplaceString = chr(8211)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	If bPoints = True Then
		&apos; Упорядочить многоточие
		oReplace.SearchString = &quot;\.\.\.&quot;
		oReplace.ReplaceString = &quot;…&quot;&apos;chr(8230)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\. \. \.&quot;
		oReplace.ReplaceString = &quot;…&quot;&apos;chr(8230)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	If bKav = True Then
		&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
		QuotationMarks( oDoc, oReplace, oProgressBar, nCur )
	End If
	If bC = True Then
		&apos; Замена на (c) (r) (TM)
		oReplace.SearchString = &quot;\(c\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(с\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(C\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(С\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(r\)&quot;
		oReplace.ReplaceString = &quot;®&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(R\)&quot;
		oReplace.ReplaceString = &quot;®&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(TM\)&quot;
		oReplace.ReplaceString = &quot;™&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		oReplace.SearchString = &quot;\(ТМ\)&quot;
		oReplace.ReplaceString = &quot;™&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	&apos; Работа с пробелами и табуляциями
	If bDelSpace = True Then
		DelSpace( oDoc, oReplace, oProgressBar, nCur )
	End If
	
	MsgBox sTCD.sEndWork, 64, sCorrectorName
	oProgressBar.end
End Sub

Sub DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
	&apos; Удаление мягких переносов
	oReplace.SearchString = &quot;\x00AD&quot;
	oReplace.ReplaceString = &quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Sub

&apos; /////////////////////////////////////////////////////////////////////////
Sub JoinBreakLinesInParaStartSpace( oProgressBar As Object )
	&apos; сборка разорваных строк абзаца знаком абзаца в один абзац.
	&apos; Идентификатор каждого &quot;нового абзаца&quot; - 1 или несколько пробелов в начале строки.
	&apos; Полезно при обработке книг после сканирования и сохраненных в txt формате (таких море в сети)
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	vSearch.SearchRegularExpression = True
	vSearch.SearchString = &quot;^[:space:]+&quot; &apos;&quot;^ {1,}&quot;
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		vEndFound = oDoc.findNext( vStartFound.End, vSearch)
		If IsNull(vEndFound) Then
			&apos; Найден стартовый идентификатор без завершающего - ищем от vStartFound и до конца документа
			vEndFound = oDoc.Text.createTextCursor()
			vEndFound.GoToEnd(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			Exit Do
		Else
			vEndFound.gotoPreviousParagraph(False)
			&apos;vEndFound.gotoEndOfParagraph(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			vStartFound = oDoc.findNext( vStartFound.End, vSearch )
		End If
	Loop
End Sub

Sub JoinBreakLinesInParaEndSymbols( oProgressBar As Object )
	&apos; сборка разорваных строк абзаца знаком абзаца в один абзац.
	&apos; Идентификатор строки &quot;одного абзаца&quot; - 1 или несколько пробелов в конце строки.
	&apos; Полезно при обработке книг после сканирования и сохраненных в txt формате (таких море в сети)
	Dim vStartSearch, vEndSearch &apos;Open и Close descriptors
	Dim vStartFound, vEndFound &apos;Open и Close find objects
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	&apos; Создать дескрипторы для документа, в котором возможен поиск.
	vStartSearch = oDoc.createSearchDescriptor()
	vEndSearch = oDoc.createSearchDescriptor()

	vStartSearch.SearchRegularExpression = True
	vEndSearch.SearchRegularExpression = True
	
	&apos; Задать текст, который нужно искать, и др.
	vStartSearch.SearchString = &quot;$&quot;&apos;( если поиск по пробелам в конце абзаца - &quot;[:space:]+$&quot; - этот вариант не всегда встречается и не все разорванные строки &quot;видит&quot;)
	vEndSearch.SearchString = &quot;[.!?…»”\&quot;&quot;:;]$&quot;
	&apos; Найти первый открывающий разделитель
	vStartFound = oDoc.findFirst(vStartSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителья, начиная с найденного открывающего
		vEndFound = oDoc.findNext( vStartFound.End, vEndSearch)
		If IsNull(vEndFound) Then
			vEndFound = oDoc.Text.createTextCursor()
			vEndFound.GoToEnd(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			Exit Do
		Else
			&apos; Выделить текст внутри разделителей
			vStartFound.gotoStartOfParagraph(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			vStartFound = oDoc.findNext( vStartFound.End, vStartSearch )
		End If
	Loop
End Sub

Sub JoinLines(oLCurs, oRCurs, oDoc, oProgressBar, l)
	On Error GoTo ErrorHandler
	
	If IsNull(oLCurs) Or IsNull(oRCurs) Or IsNull(oDoc) Then Exit Sub
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Sub
	oLCurs.goRight(0, False)
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = &quot;$&quot;
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
	Do While Not IsNull(vFound)
		l = l + 1
		oProgressBar.setValue(l)
		If oDoc.Text.compareRegionEnds( vFound, oRCurs ) = -1 Then Exit Do
		vFound.setString(&quot; &quot;)
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
	Loop
ErrorHandler:
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте
Sub JoinWordDefisParaInText( oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	With vSearch
		.SearchRegularExpression = True
		.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; &quot;]$&quot;
	End With
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	vEndFound = oDoc.findFirst(vSearch)
	vL = oDoc.findFirst(vSearch)
	vR = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		If Not IsNull(vStartFound) Then
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If IsEmpty( vStartFound.TextTable ) Then &apos; таблицы не обрабатываем
				&apos; на конец слова с переносом
				If Not IsNull(vEndFound) Then
					vEndFound.gotoNextParagraph(False)
					vEndFound.gotoEndOfWord(False)
					vR.gotoNextParagraph(False)
					vR.gotoEndOfWord(False)
					&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
					ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, True, oProgressBar, l )
					&apos; ищем далее
					vStartFound = oDoc.findNext( vStartFound.End, vSearch )
					vEndFound = oDoc.findNext( vEndFound.End, vSearch )
					vL = oDoc.findNext( vL.End, vSearch )
					vR = oDoc.findNext( vR.End, vSearch )
				Else Exit Do
				End If
			Else &apos; обходим строки таблицы
				vStartFound.gotoNextParagraph(False)
				vL.gotoNextParagraph(False)
				vEndFound.gotoNextParagraph(False)
				vEndFound.gotoEndOfWord(False)
				vR.gotoNextParagraph(False)
				vR.gotoEndOfWord(False)
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			End If
		End If
	Loop
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
Sub JoinWordDefisParaInTables( oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, oTable As Object, oCell As Object
	Dim nTablesCount As Integer, i As Integer, l As Long
	oDoc = ThisComponent
	nTablesCount = ThisComponent.getTextTables().getCount() 
	For i=0 To nTablesCount-1
		oTable = oDoc.getTextTables().getByIndex(i)
		oCell = oTable.getCellByName(&quot;A1&quot;)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта в ячейке A1 i-й текстовой таблицы.
		vStartFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vL = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vR = oDoc.findNext( oCell.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull(vStartFound)
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же текстовую таблицу - закончить.
			If NOT EqualUnoObjects(oTable, vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				vEndFound.gotoNextParagraph(False)
				vEndFound.gotoEndOfWord(False)
				vR.gotoNextParagraph(False)
				vR.gotoEndOfWord(False)
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов
&apos; в тексте, таблицаъ, сносках и врезках
Sub JoinWordDefisParaInAllTexts( oProgressBar )
	oProgressBar.start( sTCD.sDelWordBreak, ThisComponent.ParagraphCount )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте
	JoinWordDefisParaInText( oProgressBar )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
	JoinWordDefisParaInTables( oProgressBar )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
	&apos; в сноская (Footnote и Endnote) и в текстовых врезках
	JoinWordDefisParaInFENotesAndTextFrames( oProgressBar )
End Sub

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
&apos; в сноская (Footnote и Endnote) и в текстовых врезках
Sub JoinWordDefisParaInFENotesAndTextFrames( oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, oFootNotes As Object
	Dim nFootnoteCount As Integer, i As Integer, l As Long
	oDoc = ThisComponent
	nFootnoteCount = ThisComponent.getFootNotes().getCount() 
	For i=0 To nFootnoteCount-1
		&apos; Получить i-ю сноску
		oFootNotes = oDoc.getFootNotes().getByIndex(i)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта
		vStartFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vL = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vR = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull( vStartFound )
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.FootNote) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же сноску - закончить.
			&apos; закомментировал - чтобы обрабатывалось все - и сноски, и врезки
&apos;			If NOT EqualUnoObjects(oFootNotes, vStartFound.FootNote) Then
&apos;				Exit Do
&apos;			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				vEndFound.gotoNextParagraph(False)
				vEndFound.gotoEndOfWord(False)
				vR.gotoNextParagraph(False)
				vR.gotoEndOfWord(False)
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////
&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
Sub ProcessingHyphen( oLCurs, oRCurs, vL, vR, oDoc, bText As Boolean, oProgressBar, l )
	&apos; Алгоритм: если это слово с дефисом, то удаляем разрыв; иначе - удаляем и &quot;-&quot;, и разрыв
	On Error GoTo ErrorHandler
	
	If IsNull(oLCurs) Or IsNull(oRCurs) Or IsNull(oDoc) Then Exit Sub
	If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
		If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Sub
	End If
	vL.gotoRange(vR, True)
	
	&apos; обрабатываем разорванные дефисы
	If IsHyphen( vL.getString() ) = True Then
		&apos; Слово с дефисом - просто удаляем разрыв
		RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
	Else
		If bDefisWordDelOnlyPara Then
			&apos; еще и для слов удаляем только символ абзаца без переноса
			RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
		ElseIf bDefisWordDeAll Then
			&apos; еще и для слов удаляем и перенос, и символ абзаца
			RegReplaceSymbol( &quot;[-&quot; &amp; chr(8211) &amp; &quot;]&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
			RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
		End If
	End If
	
	&apos; &quot;подтягиваем&quot; позиции курсора для обработки слов к позиции курсора для сравнения слов (для согласования поиска)
	oLCurs.gotoRange(vL, False)
	oRCurs.gotoRange(vR, False)
	
	ErrorHandler:
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Поиск заданного символа (sFindSymbol) в заданном диаппазоне (oLCurs, oRCurs) и замена его нужным (sReplSymbol)
Sub RegReplaceSymbol( sFindSymbol As String, sReplSymbol As String, oLCurs, oRCurs, oDoc, bText As Boolean, oProgressBar, l )
	On Error GoTo ErrorHandler
	
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = sFindSymbol
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
&apos;	Do While Not IsNull(vFound)
	If Not IsNull(vFound) Then
		l = l + 1
		oProgressBar.setValue(l)
		If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
			If oDoc.Text.compareRegionEnds(vFound, oRCurs) &lt;= 0 Then Exit Sub
		End If
		vFound.setString(sReplSymbol)
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
&apos;	Loop
	End If
	ErrorHandler:
End Sub

&apos; /////////////////////////////////////////////////////////////////////////////////////////
&apos; возвращает True, если анализируемое слово - слово с дефисом
Function IsHyphen( sWord As String ) As Boolean
	Dim i As Integer
	Dim aLDefis() As String, aRDefis() As String
	aLDefis = Array(&quot;где&quot;,&quot;откуда&quot;,&quot;зачем&quot;,&quot;почему&quot;,&quot;отчего&quot;, _
					&quot;кто&quot;,&quot;как&quot;,&quot;когда&quot;,&quot;какой&quot;,&quot;какого&quot;,&quot;какому&quot;,&quot;каком&quot;,&quot;какая&quot;,&quot;какую&quot;,&quot;какое&quot;,&quot;какого&quot;,&quot;какие&quot;, _
					&quot;каких&quot;,&quot;каким&quot;,&quot;кем&quot;,&quot;кого&quot;,&quot;кому&quot;,&quot;ком&quot;,&quot;куда&quot;, _
					&quot;что&quot;,&quot;чем&quot;,&quot;чём&quot;,&quot;чему&quot;,&quot;чей&quot;,&quot;чья&quot;,&quot;чьего&quot;,&quot;чьему&quot;,&quot;чьей&quot;,&quot;чьи&quot;,&quot;чьих&quot;,&quot;чьими&quot;,&quot;чье&quot;, _
					&quot;чьё&quot;,&quot;чего&quot;, _
					&quot;сколько&quot;,&quot;скольких&quot;,&quot;скольким&quot;,&quot;сколькими&quot;)
	aRDefis = Array(&quot;нибудь&quot;,&quot;либо&quot;)

	Dim aLR() As String, bFind As Boolean
	aLR = Split( sWord, chr(10) ) &apos; делим слово надвое
	bFind = False
	
	&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
	Dim sLeft As String, sRight As String
	sLeft = LCase( Mid( aLR(0), 1, Len(aLR(0))-2 ) )
	sRight = LCase( DeletePunctMarkInString( aLR(1) ) )

	&apos; II. обработка слов по шаблону только левой или только правой части слова
	&apos; 1. обработка слов &quot;xxx-то&quot;
	If sRight = &quot;то&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 2. обработка слов &quot;xxx-ка&quot;
	If sRight = &quot;ка&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 3. обработка слов &quot;по-xxx&quot;
	If sLeft = &quot;по&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 4. обработка слов &quot;кое-xxx&quot;
	If sLeft = &quot;кое&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 5. обработка слов &quot;кой-xxx&quot;
	If sLeft = &quot;кой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 6. обработка слов &quot;из-xxx&quot;
	If sLeft = &quot;из&quot; And ( sRight = &quot;за&quot; Or sRight = &quot;под&quot; ) Then 
			IsHyphen = True &apos; Слово с дефисом
			Exit Function
	End If
	
	&apos; 7. обработка слов &quot;xxx-таки&quot;
	If sRight = &quot;таки&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 8. обработка слов &quot;как-никак&quot;
	If sLeft = &quot;как&quot; And sRight = &quot;никак&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 9. обработка слов &quot;какой-никакой&quot;
	If sLeft = &quot;какой&quot; And sRight = &quot;никакой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 10. обработка слов &quot;во-xxx&quot;
	If sLeft = &quot;во&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 11. обработка слов &quot;в-xxx&quot;
	If sLeft = &quot;в&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 12. обработка слов &quot;xxx-ли&quot;
	If sRight = &quot;ли&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; II. обработка слов и по левой части и по правой (сравнение с шаблонами)
	&apos; 1. сравнимаем правую часть слова с шаблоном
	For i=0 To UBound( aRDefis() )
		If sRight = LCase( aRDefis(i) ) Then 
			bFind = True &apos; совпадает
			Exit For
		Else
			bFind = False
		End If
	Next i
	
	&apos; II.2. если правая часть совпадает, смотрим левую
	If bFind = True Then
		For i=0 To UBound( aLDefis() )
			If sLeft = LCase( aLDefis(i) ) Then 
				IsHyphen = True &apos; Слово с дефисом
				Exit Function
			End If
		Next i
	End If
	
	IsHyphen = False &apos; Разорванное Абзацем Слово
End Function

&apos; ////////////////////////////////////////////////////////////////////////
&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
Function DeletePunctMarkInString( byval sString As String ) As String
	Dim aPunctMarks() As String
	Dim i As Integer, c As Integer
	aPunctMarks = Array( &quot;.&quot;,&quot;,&quot;,&quot;:&quot;,&quot;;&quot;,&quot;!&quot;,&quot;?&quot;,&quot;\&quot;,&quot;/&quot;,&quot;=&quot;,&quot;+&quot;,&quot;-&quot;,&quot;*&quot;,&quot;&amp;&quot;,&quot;…&quot;, _
						&quot;(&quot;,&quot;)&quot;,&quot;[&quot;,&quot;]&quot;,&quot;{&quot;,&quot;}&quot;,&quot;|&quot;,&quot;№&quot;,&quot;`&quot;,&quot;~&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&quot;&quot;&quot;,&quot;«&quot;,&quot;»&quot; )
	For i=0 To UBound( aPunctMarks() )
		c = InStr( sString, aPunctMarks(i) )
		If c &gt; 0 Then &apos; нашли что-то
			sString = Mid( sString, 1, c-1 )
		Else
			DeletePunctMarkInString = sString
			Exit Function
		End If
	Next i
End Function

&apos; Заменить, дефис используемый вместо тире на тире
&apos;(В прямой речи, между слов, но не в &quot;какой-то, где-то...&quot;)
Function HyphenToDash( oDoc, oReplace, oProgressBar, nCur )
	oReplace.SearchString = &quot;^ {1,}-&quot;
	oReplace.ReplaceString = chr(8212) &amp; &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;^-&quot;
	oReplace.ReplaceString = chr(8212) &amp; &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\.-&quot;
	oReplace.ReplaceString = &quot;. &quot; &amp; chr(8212) &amp; &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\. {1,}-&quot; &apos;&quot;\. -&quot;
	oReplace.ReplaceString = &quot;. &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;. — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;,-&quot;
	oReplace.ReplaceString = &quot;, &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;, — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;, {1,}-&quot; &apos;&quot;, -&quot;
	oReplace.ReplaceString = &quot;, &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;, — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;:-&quot;
	oReplace.ReplaceString = &quot;: &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;: — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;: {1,}-&quot; &apos;&quot;: -&quot;
	oReplace.ReplaceString = &quot;: &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;: — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;;-&quot;
	oReplace.ReplaceString = &quot;; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;; {1,}-&quot;  &apos;&quot; ;-&quot;
	oReplace.ReplaceString = &quot;; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\!-&quot;
	oReplace.ReplaceString = &quot;! &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;! — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\! {1,}-&quot; &apos;&quot;\! -&quot;
	oReplace.ReplaceString = &quot;! &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;! — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\?-&quot;
	oReplace.ReplaceString = &quot;? &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;? — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\? {1,}-&quot; &apos;&quot;\? -&quot;
	oReplace.ReplaceString = &quot;? &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;? — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;…-&quot;
	oReplace.ReplaceString = &quot;… &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;… — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;… {1,}-&quot; &apos;&quot;… -&quot;
	oReplace.ReplaceString = &quot;… &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;… — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}- {1,}\&lt;&quot; &apos;&quot;\&gt; - \&lt;&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; кавычки и тире
	oReplace.SearchString = &quot;» {1,}- {1,}\&lt;&quot; &apos;&quot;» - \&lt;&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;»- {1,}\&lt;&quot; &apos;&quot;»- \&lt;&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;» {1,}-\&lt;&quot; &apos; &quot;» -\&lt;&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;»-\&lt;&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}- {1,}«&quot; &apos; &quot;\&gt; - «&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;- {1,}«&quot; &apos; &quot;\&gt;- «&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}-«&quot; &apos;&quot;\&gt; -«&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;-«&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;» {1,}- {1,}«&quot; &apos;&quot;» - «&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;»- {1,}«&quot; &apos;&quot;»- «&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;» {1,}-«&quot; &apos;&quot;» -«&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;»-«&quot;
	oReplace.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
		
	oReplace.SearchString = &quot;&quot;&quot; {1,}- {1,}\&lt;&quot; &apos; &quot;&quot;&quot; - \&lt;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot;- {1,}\&lt;&quot; &apos; &quot;&quot;&quot;- \&lt;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot; {1,}-\&lt;&quot; &apos; &quot;&quot;&quot; -\&lt;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot;-\&lt;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}- {1,}&quot;&quot;&quot; &apos;&quot;\&gt; - &quot;&quot;&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;- {1,}&quot;&quot;&quot; &apos;&quot;\&gt;- &quot;&quot;&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}-&quot;&quot;&quot; &apos; &quot;\&gt; -&quot;&quot;&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;-&quot;&quot;&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot; {1,}- {1,}&quot;&quot;&quot; &apos;&quot;&quot;&quot; - &quot;&quot;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot;- {1,}&quot;&quot;&quot; &apos;&quot;&quot;&quot;- &quot;&quot;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;&quot;&quot; {1,}-&quot;&quot;&quot; &apos;&quot;&quot;&quot; -&quot;&quot;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;&quot;&quot;-&quot;&quot;\&lt;&quot;
	oReplace.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;” {1,}- {1,}\&lt;&quot; &apos; &quot;” - \&lt;&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;”- {1,}\&lt;&quot; &apos;&quot;”- \&lt;&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;” {1,}-\&lt;&quot; &apos;&quot;” -\&lt;&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;”-\&lt;&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}- {1,}“&quot; &apos;&quot;\&gt; - “&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;- {1,}“&quot; &apos;&quot;\&gt;- “&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt; {1,}-“&quot; &apos;&quot;\&gt; -“&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;-“&quot;
	oReplace.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;” {1,}- {1,}“&quot; &apos;&quot;” - “&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;”- {1,}“&quot; &apos;&quot;”- “&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;” {1,}-“&quot; &apos;&quot;” -“&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\&gt;”-“\&lt;&quot;
	oReplace.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Работа с пробелами и табуляциями
Function DelSpace( oDoc, oReplace, oProgressBar, nCur )
	&apos; Заменяем одиночную табуляцию на пробел
	oReplace.SearchString = &quot;\t&quot;
	oReplace.ReplaceString = &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем все стартовые табуляции
	&apos;oReplace.SearchString = &quot;^\t{1,}&quot;
	&apos;oReplace.ReplaceString = &quot;&quot;
	&apos;oDoc.ReplaceAll(oReplace)
	&apos; Удаляем все конечные табуляции
	&apos;oReplace.SearchString = &quot;\t{1,}$&quot;
	&apos;oReplace.ReplaceString = &quot;&quot;
	&apos;oDoc.ReplaceAll(oReplace)
	&apos; Заменяем все множественные табуляции:
	&apos;oReplace.SearchString = &quot;\t{2,}&quot;
	&apos;oReplace.ReplaceString = &quot; &quot;
	&apos;oDoc.ReplaceAll(oReplace)
	&apos; Удаляем все стартовые пробелы
	oReplace.SearchString = &quot;^ {1,}&quot;
	oReplace.ReplaceString = &quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем все конечные пробелы
	oReplace.SearchString = &quot; {1,}$&quot;
	oReplace.ReplaceString = &quot;&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Обработка множественных пробелов
	oReplace.SearchString = &quot; +&quot; &apos;&quot;  {1,2}&quot;
	oReplace.ReplaceString = &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Обработка множественных неразрывных пробелов
	oReplace.SearchString = &quot; +&quot;
	oReplace.ReplaceString = &quot; &quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Обработка оставшихся комбинаций пробелов и неразрывных пробелов
	oReplace.SearchString = &quot;   &quot; &apos; неразрывный, простой, неразрывный
	oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;   &quot; &apos; простой, неразрывный, простой
	oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;  &quot; &apos; неразрывный, простой
	oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;  &quot; &apos; простой, неразрывный
	oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
Function QuotationMarks( oDoc, oReplace, oProgressBar, nCur )
	oReplace.SearchString = &quot;^ {1,}[&quot;&quot;“„]&quot;
	oReplace.ReplaceString = &quot;«&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur) 
	nCur = nCur+1
	
	oReplace.SearchString = &quot;\&gt;[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;[&quot;&quot;“„]\&lt;&quot;
	oReplace.ReplaceString = &quot;«&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;…[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;…»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;[&quot;&quot;“„]…&quot;
	oReplace.ReplaceString = &quot;«…&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;\![&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;!»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\?[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;?»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1	
	oReplace.SearchString = &quot;\.[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;.»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;[&quot;&quot;“„]\(&quot;
	oReplace.ReplaceString = &quot;«(&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\)[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;)»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;[&quot;&quot;“„]\[&quot;
	oReplace.ReplaceString = &quot;«[&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\][&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;]»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;[&quot;&quot;“„]\{&quot;
	oReplace.ReplaceString = &quot;«{&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;\}[&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;}»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	oReplace.SearchString = &quot;[&quot;&quot;“„][\+]&quot;
	oReplace.ReplaceString = &quot;«+&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;[&quot;&quot;“„][\-]&quot;
	oReplace.ReplaceString = &quot;«-&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;[\+][&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;+»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	oReplace.SearchString = &quot;[\-][&quot;&quot;”]&quot;
	oReplace.ReplaceString = &quot;-»&quot;
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все разрывы страниц
Function DeleteAllPageBreaks() As Long 
	Dim lCount As Long : lCount = 0
	Dim oText As Variant : oText = ThisComponent.Text
	Dim oCursor as Variant
	oCursor = oText.CreateTextCursor()
	oCursor.GoToStart(False)
	Do
		If NOT oCursor.gotoEndOfParagraph(True) Then Exit Do
		If NOT IsEmpty(oCursor.PageDescName) Then oCursor.PageDescName = &quot;&quot;
		If oCursor.BreakType &lt;&gt; com.sun.star.style.BreakType.NONE Then
			oCursor.BreakType = com.sun.star.style.BreakType.NONE
			lCount = lCount + 1
		End If
	Loop Until NOT oCursor.gotoNextParagraph(False)
	DeleteAllPageBreaks = lCount
End Function

</script:module>