<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Const sConstCorrector As String = &quot;/OOoFBTools/corrector.txt&quot; &apos; файл настроек Корректора Текста

Private oDoc As Object
Private oReplace As Object

Public oTextCorrectorDlg As Object

Private bTCDelStartSpace			As Boolean
Private bTCStartNoBreakSpaceDelete	As Boolean
Private bTCStartTabDelete			As Boolean
Private bTCDelSpace					As Boolean
Private nTCSpaceCount				As Integer
Private bTCToSpace					As Boolean
Private bRemoveSpaceBeforePunct		As Boolean

Private bOnlyDefisPara				As Boolean
Private bDefisWordDelOnlyPara		As Boolean
Private bDefisWordDeAll				As Boolean

Private bDelEmptyPar				As Boolean

Private bDelMP As Boolean &apos; удаление мягкие переносы
Private bWordDefisPara As Boolean

Private bDelPB As Boolean &apos; Удаление разрывов страниц

Private bBreakLine As Boolean
Private bDel As Boolean
Private bPar As Boolean
Private bSpace As Boolean

Private b2HyphenToDash As Boolean
Private bHyphenToDash As Boolean
Private bInsertSpaceBSymAndMDH	As Boolean
Private bInsertSpaceBPunctAndMDH As Boolean
Private bInsertSpaceBPunctAndSym As Boolean

Private bDefis			As Boolean
Private bNoBreakDefis	As Boolean

Private bKav As Boolean
Private bPoints As Boolean
Private bC As Boolean
Private bImages As Boolean
Private nAnchor As String
Private bDeleteAllLineShape As Boolean

Sub TextCorrector()
&apos;	DialogLibraries.LoadLibrary(&quot;OOoFBTools&quot;)
	If Not GlobalScope.DialogLibraries.isLibraryLoaded( &quot;OOoFBTools&quot; ) Then
    	GlobalScope.DialogLibraries.LoadLibrary( &quot;OOoFBTools&quot; )
	End If
	oTextCorrectorDlg = CreateUnoDialog( GlobalScope.DialogLibraries.OOoFBTools.TextCorrectorDlg )
	
	&apos; инициализация формы
	InitTextCorrectorDlg()
	
	Dim sAnchorsList() As String &apos; виды привязки картинки
	sAnchorsList() = Array( sTCD.sToParagraph, sTCD.sToSymbol, sTCD.sAsSymbol )
	With oTextCorrectorDlg.Model
		.Height = 380
		.Width  = 420
		.cbAnchor.StringItemList = sAnchorsList()
	End With
	
	&apos; АЛГОРИТМ - Очень ВАЖНО!!!
	&apos; т.к. Корректор развивается, и в диалоге Корректора Текста появляются НОВЫЕ опции (контролы),
	&apos; а у пользователей УЖЕ СОХРАНЕН файл corrector.txt, где данных для этих новых опций нет,
	&apos; то при работе Корректора может произойти либо ошибка, либо коректура произведется не так, как ожидается,
	&apos; а при запуске формы Корректора новые опции будут не такими, как ожидал User,
	&apos; Поэтому, сначала устанавливаем значения переменных по умолчанию (SetCorrectorSettingDefault),
	&apos; а потом - считываем из файла значения опций в переменные (ReadCorrectorSettings).
	&apos; Для тех новых опций, которых еще нет в файле corrector.txt значения будут по умолчанию,
	&apos; а для остальных - считаны из файла.
	&apos; Когда же User запустит форму и пересохранит ВСЕ настройки Корректора,
	&apos; то вне переменные и контролы будут иметь значения из файла!
		
	&apos; Задаем настройки очистки текста в контролы по умолчанию
	SetCorrectorSettingDefault()
	&apos; только теперь считывание настройки из файла
	Dim nX As Integer, nY As Integer
	ReadDlgSettings( getUserPath() &amp; sConstCorrector, oTextCorrectorDlg, nX, nY )
	oTextCorrectorDlg.setPosSize( nX, nY, 380, 420, com.sun.star.awt.PosSize.POS )
	
	ControlsEnabled()
	
	oTextCorrectorDlg.execute()

End Sub

Sub SaveCorrectorSettings()
	&apos; записываем настройки очистки текста
	Dim oLB As Object &apos; Для работы с ListBox`ами
	SaveSettings( getUserPath() &amp; sConstCorrector, oTextCorrectorDlg )
	
	&apos; заполняем переменные
	With oTextCorrectorDlg
		bWordDefisPara			= .GetControl(&quot;cboxWordDefisPara&quot;).State
		bOnlyDefisPara			= .GetControl(&quot;obtnOnlyDefisPara&quot;).State
		bDefisWordDelOnlyPara	= .GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State
		bDefisWordDeAll			= .GetControl(&quot;obtnDefisWordDeAll&quot;).State
		
		bTCDelStartSpace			= .GetControl(&quot;cbStartSpaceDelete&quot;).State
		bTCStartNoBreakSpaceDelete	= .GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State
		bTCStartTabDelete			= .GetControl(&quot;cbStartTabDelete&quot;).State
		bTCDelSpace					= .GetControl(&quot;cboxDelSpace&quot;).State
		oLB 						= .getControl(&quot;lbTCSpaceCount&quot;)
		nTCSpaceCount 				= oLB.SelectedItem
		bTCToSpace					= .GetControl(&quot;obTCToSpace&quot;).State
		bRemoveSpaceBeforePunct		= .GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State
		
		bDelEmptyPar	= .GetControl(&quot;cboxDelEmptyPar&quot;).State
	
		bBreakLine		= .GetControl(&quot;cboxBreakLine&quot;).State
		bDel			= .GetControl(&quot;obtnDel&quot;).State
		bPar			= .GetControl(&quot;obtnPar&quot;).State
		bSpace			= .GetControl(&quot;obtnSpace&quot;).State
	
		b2HyphenToDash = 			.GetControl(&quot;cbox2HyphenToDash&quot;).State
		bHyphenToDash = 			.GetControl(&quot;cboxHyphenToDash&quot;).State
		bInsertSpaceBSymAndMDH = 	.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State
		bInsertSpaceBPunctAndMDH = 	.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State
		bInsertSpaceBPunctAndSym = 	.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State
		bDefis = 					.GetControl(&quot;cboxDefis&quot;).State
		bNoBreakDefis = 			.GetControl(&quot;obNoBreakDefis&quot;).State
		bKav = 						.GetControl(&quot;cboxKav&quot;).State
		bPoints = 					.GetControl(&quot;cboxPoints&quot;).State
		bC = 						.GetControl(&quot;cboxC&quot;).State
		bImages = 					.GetControl(&quot;cboxImages&quot;).State
		oLB = 						.getControl(&quot;cbAnchor&quot;)
		nAnchor = 					oLB.SelectedItem
		bDelMP = 					.GetControl(&quot;cboxMP&quot;).State
		bDelPB = 					.GetControl(&quot;cboDelPB&quot;).State
		bDeleteAllLineShape = 		.GetControl(&quot;cboDeleteAllLineShape&quot;).State
	End With
End Sub

Sub SetCorrectorSettingDefault()
	&apos; Установка настроек по умолчанию в контролы
	Dim oLB As Object &apos; Для работы с ListBox`ами
	With oTextCorrectorDlg
		&apos; Удаление пробелов и/или табуляций
		.GetControl(&quot;cbStartSpaceDelete&quot;).State = 1
		.GetControl(&quot;cbStartNoBreakSpaceDelete&quot;).State = 1
		.GetControl(&quot;cbStartTabDelete&quot;).State = 1
		.GetControl(&quot;cboxDelSpace&quot;).State = 1
		oLB = .getControl(&quot;lbTCSpaceCount&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;1&quot;
		.GetControl(&quot;obTCToSpace&quot;).State = 1
		.GetControl(&quot;obTCToTab&quot;).State = 0
		.GetControl(&quot;cboxRemoveSpaceBeforePunct&quot;).State = 1

		&apos; Работа с разорванными дефисами и переносами символом ¶ 
		.GetControl(&quot;cboxWordDefisPara&quot;).State = 1
		.GetControl(&quot;obtnOnlyDefisPara&quot;).State = 0
		.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).State = 1
		.GetControl(&quot;obtnDefisWordDeAll&quot;).State = 0

		&apos; Работа с абзацами и разрывами	
		.GetControl(&quot;cboxDelEmptyPar&quot;).State = 0
		.GetControl(&quot;cboxBreakLine&quot;).State = 1
		.GetControl(&quot;obtnDel&quot;).State = 0
		.GetControl(&quot;obtnPar&quot;).State = 1
		.GetControl(&quot;obtnSpace&quot;).State = 0
		
		&apos; Разное
		.GetControl(&quot;cbox2HyphenToDash&quot;).State = 0
		.GetControl(&quot;cboxHyphenToDash&quot;).State = 1
		.GetControl(&quot;cboxInsertSpaceBSymAndMDH&quot;).State = 1
		.GetControl(&quot;cboxInsertSpaceBPunctAndMDH&quot;).State = 1
		.GetControl(&quot;cboxInsertSpaceBPunctAndSym&quot;).State = 1
		.GetControl(&quot;cboxDefis&quot;).State = 1
		.GetControl(&quot;obNoBreakDefis&quot;).State = 1
		.GetControl(&quot;obSimpleDefis&quot;).State = 0
		.GetControl(&quot;cboxKav&quot;).State = 0
		.GetControl(&quot;cboxPoints&quot;).State = 1
		.GetControl(&quot;cboxC&quot;).State = 0
		
		&apos; Картинки
		.GetControl(&quot;cboxImages&quot;).State = 0
		oLB = 	.getControl(&quot;cbAnchor&quot;)
		oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
		
		&apos; мягкие переносы
		.GetControl(&quot;cboxMP&quot;).State = 1
		
		&apos; разрывы страниц
		.GetControl(&quot;cboDelPB&quot;).State = 0
		
		&apos; удаление из текста всех векторных линий
		.GetControl(&quot;cboDeleteAllLineShape&quot;).State = 0
	End With
	
	ControlsEnabled()
End Sub

Sub CheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 1	
		End If
	Next i
	ControlsEnabled()
End Sub

Sub UnCheckAllOptions()
	Dim ctrl As Object, i As Integer
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			ctrl(i).State = 0	
		End If
	Next i
	ControlsEnabled()
End Sub

Sub ControlsEnabled()
	cboxDefisPartEnabled()
	cboxWordDefisParaEnabled()
	cboxImagesEnabled()
	cboxBreakLineEnabled()
	cboxDelSpaceEnabled()
End Sub

Sub cboxWordDefisParaEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxWordDefisPara&quot;).State = 1 Then
			.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable			= True
			.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable	= True
			.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable		= True
		Else
			.GetControl(&quot;obtnOnlyDefisPara&quot;).Enable			= False
			.GetControl(&quot;obtnDefisWordDelOnlyPara&quot;).Enable	= False
			.GetControl(&quot;obtnDefisWordDeAll&quot;).Enable		= False
		End If
	End With
End Sub

Sub cboxImagesEnabled()
	With oTextCorrectorDlg
	If .GetControl(&quot;cboxImages&quot;).State = 1 Then
			.GetControl(&quot;lblAnchor&quot;).Enable	= True
			.GetControl(&quot;cbAnchor&quot;).Enable	= True
		Else
			.GetControl(&quot;lblAnchor&quot;).Enable	= False
			.GetControl(&quot;cbAnchor&quot;).Enable	= False
		End If
	End With
End Sub

Sub cboxBreakLineEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxBreakLine&quot;).State = 1 Then
			.GetControl(&quot;obtnDel&quot;).Enable	= True
			.GetControl(&quot;obtnPar&quot;).Enable	= True
			.GetControl(&quot;obtnSpace&quot;).Enable	= True
		Else
			.GetControl(&quot;obtnDel&quot;).Enable	= False
			.GetControl(&quot;obtnPar&quot;).Enable	= False
			.GetControl(&quot;obtnSpace&quot;).Enable	= False
		End If
	End With
End Sub

Sub cboxDelSpaceEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxDelSpace&quot;).State = 1 Then
			.GetControl(&quot;obTCToSpace&quot;).Enable	= True
			.GetControl(&quot;obTCToTab&quot;).Enable		= True
			.GetControl(&quot;lbTCSpaceCount&quot;).Enable= True
		Else
			.GetControl(&quot;obTCToSpace&quot;).Enable	= False
			.GetControl(&quot;obTCToTab&quot;).Enable		= False
			.GetControl(&quot;lbTCSpaceCount&quot;).Enable= False
		End If
	End With
End Sub

Sub cboxDefisPartEnabled()
	With oTextCorrectorDlg
		If .GetControl(&quot;cboxDefis&quot;).State = 1 Then
			.GetControl(&quot;obNoBreakDefis&quot;).Enable	= True
			.GetControl(&quot;obSimpleDefis&quot;).Enable		= True
		Else
			.GetControl(&quot;obNoBreakDefis&quot;).Enable	= False
			.GetControl(&quot;obSimpleDefis&quot;).Enable		= False
		End If
	End With
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////
&apos; запуск корректировки
Sub TextCorrectorDlgOk()
	Dim sCorrectorName As String : sCorrectorName = sTCD.sTextCorrecting
	&apos; Если есть опции для чистки, то - работаем
	Dim ctrl As Object, i As Integer, bSel As Boolean
	bSel = False
	ctrl = oTextCorrectorDlg.getControls()
	For i=LBound(ctrl) To UBound(ctrl)
		If ctrl(i).getImplementationName() = &quot;stardiv.Toolkit.UnoCheckBoxControl&quot; Then
			If ctrl(i).Model.State Then
				bSel = True
			End If
		End If
	Next i
	If Not bSel Then
		MsgBox sTCD.sSelectOptions, 64, sCorrectorName
		Exit Sub
	End If
	
	&apos; Принятие параметров чистки текста
	oTextCorrectorDlg.endExecute()
	
	SaveCorrectorSettings() &apos; сохранение настроек чистки текста

	Dim oProgressBar : oProgressBar = ThisComponent.CurrentController.StatusIndicator
	
	&apos; /////////////// Очистка текста //////////////////
	oDoc = ThisComponent
	oReplace = oDoc.createReplaceDescriptor
	oReplace.SearchRegularExpression = True
	
	&apos; удаление из документа всех векторных линий (посде OCR)
	If bDeleteAllLineShape = True Then
		Dim oPage	As Object	: oPage	= oDoc.getDrawPage()
		Dim oShape	As Object
		Dim nAllDrawPage	As Integer : nAllDrawPage = oPage.getCount()
		Dim nLineShape		As Integer : nLineShape = -1		&apos;счетчик всех шейпов (счетчик проходов)
&apos;		Dim nDelLineShape	As Integer : nDelLineShape = 0	&apos;счетчик удаленных линий
		&apos; подсчет всех линий LineShape
&apos;		Dim i As Integer
		For i = 0 To nAllDrawPage - 1
			oShape = oPage.getByIndex ( i )
			If oShape.supportsService(&quot;com.sun.star.drawing.LineShape&quot;) Then
				nLineShape = nLineShape + 1
			End If
		Next i
		&apos; удаление из документа всех линий LineShape
		oProgressBar.start( sTCD.sWorkGraphic, nLineShape )
		Do While oPage.getCount() &gt;= 0 And nLineShape &gt; -1
			oShape = oPage.getByIndex ( nLineShape )
			If oShape.supportsService(&quot;com.sun.star.drawing.LineShape&quot;) Then
				oPage.remove( oShape )
&apos;				nDelLineShape = nDelLineShape + 1
			End If
			oProgressBar.setValue(nLineShape)
			nLineShape = nLineShape - 1
		Loop
&apos;		If nDelLineShape &gt; 0 Then
&apos;			MsgBox &quot;Удалено &quot; &amp; Str$( nDelLineShape ) &amp; &quot; векторной линии&quot;, 176, &quot;Удаление LineShape из документа&quot;
&apos;		Else
&apos;			MsgBox &quot;Не найдено ни одной векторной линии&quot;, 176, &quot;Удаление LineShape из документа&quot;
&apos;		End If
	End If
	
	&apos; Привязка картинок
	If bImages = True Then
		Dim oGraphics As Object 
		Dim oThisGraphic As Object 
		Dim iAnchor As Integer
		Select Case nAnchor
			Case sTCD.sToParagraph
				iAnchor = 0
			Case sTCD.sToSymbol
				iAnchor = 4
			Case sTCD.sAsSymbol
				iAnchor = 1
			Case Else
				iAnchor = 0
		End Select
		oGraphics = oDoc.getGraphicObjects()
	    oProgressBar.start( sTCD.sWorkGraphic, oGraphics.Count )
	    For i = 0 to oGraphics.Count - 1
	    	oThisGraphic = oGraphics.GetByIndex(i)
			oThisGraphic.AnchorType  = iAnchor
			oProgressBar.setValue(i)
		Next i
	End If
	

	Dim nCur As Integer : nCur = 0
	
	&apos; удаление разрывов страниц
	If bDelPB Then
		DeleteAllPageBreaks()
	End If
	
	&apos; Удаление мягких переносов
	If bDelMP = True Then
		DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
	End If

	&apos; /////////////// Работа с абзацами и разрывами //////////////
	
	If bWordDefisPara = True Then
		&apos; Удаление мягких переносов, иначе результат будет неверен
		If bDelMP = False Then
			DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
		End If
		&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов в тексте, таблицах, сносках и врезках
		oProgressBar.start( sTCD.sDelWordBreak, 100 )
		JoinWordDefisParaInAllTexts( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	End If

	oProgressBar.start( sTCD.sTextCorrecting &amp; &quot;:&quot;, 144 )
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; Разрывы строк
	If bBreakLine = True Then
		If bDel = True Then
			&apos; Удаляем разрыв строки
			With oReplace
				.SearchString = chr(10)
				.ReplaceString = &quot;&quot;
			End With
		ElseIf bPar = True Then
			&apos; Заменяем разрыв строки на абзац
			With oReplace
				.SearchString = chr(10)
				.ReplaceString = &quot;\n&quot;
			End With
		ElseIf bSpace = True Then
			&apos; Заменяем разрыв строки на 1 пробел
			With oReplace
				.SearchString = chr(10)
				.ReplaceString = &quot; &quot;
			End With
		End If
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	If bDelEmptyPar = True Then
		&apos; Удаляем все множественные пустые абзацы
		Dim oDoc As Object : oDoc = ThisComponent
		Dim vSearch As Variant : vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchRegularExpression = True
			.SearchString = &quot;^$&quot;
		End With
		Dim vFound As Variant : vFound = oDoc.findFirst( vSearch )
		Do While Not IsNull( vFound )
			If Not IsNull( vFound ) Then
				vFound.setString(&quot;&quot;)
				&apos; ищем далее
				vFound = oDoc.findNext( vFound.getEnd(), vSearch )
			End If
		Loop
		oProgressBar.setValue( nCur )
		nCur = nCur+1
	End If
	
	&apos; Кавычки, Дефисы, Разное
	If b2HyphenToDash = True Then
		&apos; Заменить двойной дефис (--) на тире
		With oReplace
			.SearchString = &quot;--&quot;
			.ReplaceString = &quot; — &quot;
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		With oReplace
			.SearchString = chr(8211) &amp; chr(8211)
			.ReplaceString = &quot; — &quot;
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	&apos; Вставка пробела между знаком препинания и минусом, тире или дефисом
	If bInsertSpaceBPunctAndMDH Then
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 45, oProgressBar, nCur )		&apos; минус
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8211, oProgressBar, nCur )	&apos; дефис
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8209, oProgressBar, nCur )	&apos; неразрывный дефис
		InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, 8212, oProgressBar, nCur )	&apos; тире
	End If
	
	&apos; втавка пробела между слипшимися символами ( слова, кавычки) и минусом, тире или дефисом
	If bInsertSpaceBSymAndMDH Then
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 45, oProgressBar, nCur )	&apos; минус
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8211, oProgressBar, nCur )	&apos; дефис
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8209, oProgressBar, nCur )	&apos; неразрывный дефис
		InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, 8212, oProgressBar, nCur )	&apos; тире
	End If
	
	&apos; Заменить, дефис используемый вместо тире на тире
		&apos; (В прямой речи, между слов, но не в &quot;какой-то, где-то...&quot;)
	If bHyphenToDash = True Then
		HyphenToDash( oDoc, oReplace, oProgressBar, nCur )
	End If
	
	&apos; Вместо минуса - дефис в &quot;кое-что&quot;, &quot;куда-то&quot; и т.д.
	If bDefis = True Then
		&apos; обрабатываем русские слова
		If bNoBreakDefis = True Then &apos; заменить на неразрывный дефис
			With oReplace
				.SearchString = &quot;([а-яА-ЯёЁ])&quot; &amp; chr(32) &amp; &quot;*&quot; &amp; &quot;[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;]{1}&quot; &amp; chr(32) &amp; &quot;*&quot; &amp;_
								&quot;(то|либо|нибудь|что|таки|ка|де|никак|никакой)&quot;
				.ReplaceString = &quot;$1&quot; &amp; chr(8209) &amp; &quot;$2&quot;
			End With
		Else &apos; заменить на простой дефис
			With oReplace
				.SearchString = &quot;([а-яА-ЯёЁ])&quot; &amp; chr(32) &amp; &quot;*&quot; &amp; &quot;[-&quot; &amp; chr(8209) &amp; chr(8212) &amp; &quot;]{1}&quot; &amp; chr(32) &amp; &quot;*&quot; &amp;_
								&quot;(то|либо|нибудь|что|таки|ка|де|никак|никакой)&quot;
				.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot;
			End With
		End If
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1

		&apos; обрабатываем иностранные слова
		If bNoBreakDefis = True Then &apos; заменить на неразрывный дефис
			With oReplace
				.SearchString = &quot;([a-zA-Z])[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;]{1}([a-zA-Z])&quot;
				.ReplaceString = &quot;$1&quot; &amp; chr(8209) &amp; &quot;$2&quot;
			End With
		Else &apos; заменить на простой дефис
			With oReplace
				.SearchString = &quot;([a-zA-Z])[-&quot; &amp; chr(8209) &amp; chr(8212) &amp; &quot;]{1}([a-zA-Z])&quot;
				.ReplaceString = &quot;$1&quot; &amp; chr(8211) &amp; &quot;$2&quot;
			End With
		End If
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	&apos; Упорядочить многоточие
	If bPoints = True Then
		With oReplace
			.SearchString = &quot;\. ?\. ?\.&quot;
			.ReplaceString = &quot;…&quot;&apos;chr(8230)
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
	If bKav = True Then
		QuotationMarks( oDoc, oReplace, oProgressBar, nCur )
	End If
	
	&apos; Замена на (c) (r) (TM)
	If bC = True Then
		With oReplace
			.SearchString = &quot;\( *[C|c|С|с]{1} *\)&quot;
			.ReplaceString = &quot;©&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		With oReplace
			.SearchString = &quot;\( *[R|r]{1} *\)&quot;
			.ReplaceString = &quot;®&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
		With oReplace
			.SearchString = &quot;\( *[TtТт]{1}[MmМм]{1} *\)&quot;
			.ReplaceString = &quot;™&quot;
		End With
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(nCur)
		nCur = nCur+1
	End If
	
	&apos; Работа с пробелами и табуляциями
	If bTCDelStartSpace = True Then
		&apos; Удаляем все стартовые простые пробелы
		DelStartSpace( oDoc, oReplace, oProgressBar, nCur )
	End If
	If bTCStartNoBreakSpaceDelete = True Then
		&apos; Удаляем все неразрывные стартовые пробелы
		DelStartNoBreakSpace( oDoc, oReplace, oProgressBar, nCur )
	End If
	If bTCStartTabDelete = True Then
		&apos; Удаляем все стартовые табуляции
		DelStartTab( oDoc, oReplace, oProgressBar, nCur )
	End If
	If bTCDelSpace = True Then
		&apos; Удаляем все множественные пробелы и табуляции между слов и конечные
		DelSpace( oDoc, oReplace, oProgressBar, nTCSpaceCount, bTCToSpace, nCur )
	End If
	If bRemoveSpaceBeforePunct = True Then
		&apos; Удаляем пробел перед знаком препинания
		RemoveSpaceBeforePunct( oDoc, oReplace, oProgressBar, nCur )
	End If
	
	&apos; Вставляем пробел после знака препинания
	If bInsertSpaceBPunctAndSym = True Then
		InsertSpaceBPunctAndSymbol( oDoc, oReplace, oProgressBar, nCur )
	End If
	MsgBox sTCD.sEndWork, 64, sCorrectorName
	oProgressBar.end
End Sub

&apos;////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Удаление пробелов перед знаком препинания
Sub RemoveSpaceBeforePunct( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchString = &quot;[&quot; &amp; chr(32) &amp; &quot;|&quot; &amp; chr(160) &amp; &quot;]+([.,:;!?])&quot;
		.ReplaceString = &quot;$1&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Sub

&apos;/////////////////////////////////////////////////////
&apos; Вставляем пробел после знака препинания
Sub InsertSpaceBPunctAndSymbol( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchString = &quot;([.,:;!?])([а-яА-ЯёЁa-zA-Z])&quot;
		.ReplaceString = &quot;$1 $2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Sub

&apos;/////////////////////////////////////////////////////
&apos; Удаление мягких переносов
Sub DeleteMPer( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchString = &quot;\x00AD&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Sub

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов
&apos; в тексте, таблицаъ, сносках и врезках
Sub JoinWordDefisParaInAllTexts( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте
	JoinWordDefisParaInText( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
	JoinWordDefisParaInTables( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
	&apos; в сноская (Footnote и Endnote) и в текстовых врезках
	JoinWordDefisParaInFENotesAndTextFrames( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar )
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в тексте
Sub JoinWordDefisParaInText( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	With vSearch
		.SearchRegularExpression = True
		.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
	End With
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	vEndFound = oDoc.findFirst(vSearch)
	vL = oDoc.findFirst(vSearch)
	vR = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		If Not IsNull(vStartFound) Then
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If IsEmpty( vStartFound.TextTable ) Then &apos; таблицы не обрабатываем
				&apos; на конец слова с переносом
				If Not IsNull(vEndFound) Then
					With vEndFound
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					With vR
						.gotoNextParagraph(False)
						.gotoEndOfWord(False)
					End With
					&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
					ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, True, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
					&apos; ищем далее
					vStartFound = oDoc.findNext( vStartFound.End, vSearch )
					vEndFound = oDoc.findNext( vEndFound.End, vSearch )
					vL = oDoc.findNext( vL.End, vSearch )
					vR = oDoc.findNext( vR.End, vSearch )
				Else Exit Do
				End If
			Else &apos; обходим строки таблицы
				vStartFound.gotoNextParagraph(False)
				vL.gotoNextParagraph(False)
				With vEndFound
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				With vR
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			End If
		End If
	Loop
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов) в таблице
Sub JoinWordDefisParaInTables( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, oTable As Object, oCell As Object
	Dim nTablesCount As Integer, i As Integer, l As Long
	oDoc = ThisComponent
	nTablesCount = ThisComponent.getTextTables().getCount() 
	For i=0 To nTablesCount-1
		oTable = oDoc.getTextTables().getByIndex(i)
		oCell = oTable.getCellByName(&quot;A1&quot;)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта в ячейке A1 i-й текстовой таблицы.
		vStartFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vL = oDoc.findNext( oCell.getText().getStart(), vSearch )
		vR = oDoc.findNext( oCell.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull(vStartFound)
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же текстовую таблицу - закончить.
			If NOT EqualUnoObjects(oTable, vStartFound.TextTable) Then
				Exit Do
			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				With vEndFound
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				With vR
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ////////////////////////////////////////////////////////////////////////////////////////////////
&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
&apos; в сноская (Footnote и Endnote) и в текстовых врезках
Sub JoinWordDefisParaInFENotesAndTextFrames( bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar As Object )
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oFootNotes As Object
	Dim i As Integer, l As Long
	Dim oDoc As Object : oDoc = ThisComponent
	Dim nFootnoteCount As Integer : nFootnoteCount = ThisComponent.getFootNotes().getCount() 
	For i=0 To nFootnoteCount-1
		&apos; Получить i-ю сноску
		oFootNotes = oDoc.getFootNotes().getByIndex(i)
		&apos; Создать дескриптор поиска
		vSearch = oDoc.createSearchDescriptor()
		With vSearch
			.SearchString = &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]$&quot;
			.SearchRegularExpression = True
		End With
	
		&apos; Начать поиск с начала текстового объекта
		vStartFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vEndFound = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vL = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		vR = oDoc.findNext( oFootNotes.getText().getStart(), vSearch )
		l = 0
		Do While Not IsNull( vStartFound )
			&apos; Если найденный текст не входит в текстовую таблицу, то закончить
			If IsNull(vStartFound.FootNote) Then
				Exit Do
			End If
			&apos; Если найденный текст не входит в ту же сноску - закончить.
			&apos; закомментировал - чтобы обрабатывалось все - и сноски, и врезки
&apos;			If NOT EqualUnoObjects(oFootNotes, vStartFound.FootNote) Then
&apos;				Exit Do
&apos;			End If
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			If Not IsNull(vEndFound) Then
				With vEndFound
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				With vR
					.gotoNextParagraph(False)
					.gotoEndOfWord(False)
				End With
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, False, bDefisWordDelOnlyPara, bDefisWordDeAll, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch )
				vEndFound = oDoc.findNext( vEndFound.End, vSearch )
				vL = oDoc.findNext( vL.End, vSearch )
				vR = oDoc.findNext( vR.End, vSearch )
			Else Exit Do
			End If
		Loop
	Next i
End Sub

&apos; ///////////////////////////////////////////////////////////////////////////
&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
Sub ProcessingHyphen( oLCurs, oRCurs, vL, vR, oDoc, bText As Boolean, bDefisWordDelOnlyPara As Boolean, bDefisWordDeAll As Boolean, oProgressBar, l )
	&apos; Алгоритм: если это слово с дефисом, то удаляем разрыв; иначе - удаляем и &quot;-&quot;, и разрыв
	On Error GoTo ErrorHandler
	
	If IsNull( oLCurs ) Or IsNull( oRCurs ) Or IsNull( oDoc ) Then Exit Sub
	If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
		If oDoc.Text.compareRegionEnds( oLCurs, oRCurs ) &lt;= 0 Then Exit Sub
	End If
	vL.gotoRange(vR, True)
	
	&apos; обрабатываем разорванные дефисы
	If IsHyphen( vL.getString() ) = True Then
		&apos; Слово с дефисом - просто удаляем разрыв
		RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
	Else
		If bDefisWordDelOnlyPara Then
			&apos; еще и для слов удаляем только символ абзаца без переноса
			RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
		ElseIf bDefisWordDeAll Then
			&apos; еще и для слов удаляем и перенос, и символ абзаца
			RegReplaceSymbol( &quot;[-&quot; &amp; chr(8211) &amp; chr(8209) &amp; &quot;]&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
			RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, bText, oProgressBar, l )
		End If
	End If
	
	&apos; &quot;подтягиваем&quot; позиции курсора для обработки слов к позиции курсора для сравнения слов (для согласования поиска)
	oLCurs.gotoRange( vL, False )
	oRCurs.gotoRange( vR, False )
	
	ErrorHandler:
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; Поиск заданного символа (sFindSymbol) в заданном диаппазоне (oLCurs, oRCurs) и замена его нужным (sReplSymbol)
Sub RegReplaceSymbol( sFindSymbol As String, sReplSymbol As String, oLCurs, oRCurs, oDoc, bText As Boolean, oProgressBar, l )
	On Error GoTo ErrorHandler
	
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = sFindSymbol
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
&apos;	Do While Not IsNull(vFound)
	If Not IsNull(vFound) Then
		If l&gt;=100 Then l = 0
		l = l + 1
		oProgressBar.setValue(l)
		If bText Then &apos; толька для текста (не для сносок, таблиц и врезок)
			If oDoc.Text.compareRegionEnds( vFound, oRCurs ) &lt;= 0 Then Exit Sub
		End If
		vFound.setString( sReplSymbol )
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
&apos;	Loop
	End If
	ErrorHandler:
End Sub

&apos; /////////////////////////////////////////////////////////////////////////////////////////
&apos; возвращает True, если анализируемое слово - слово с дефисом
Function IsHyphen( sWord As String ) As Boolean
	Dim i As Integer
	Dim aLDefis() As String, aRDefis() As String
	aLDefis = Array(&quot;где&quot;,&quot;откуда&quot;,&quot;зачем&quot;,&quot;почему&quot;,&quot;отчего&quot;, _
					&quot;кто&quot;,&quot;как&quot;,&quot;когда&quot;,&quot;какой&quot;,&quot;какого&quot;,&quot;какому&quot;,&quot;каком&quot;,&quot;какая&quot;,&quot;какую&quot;,&quot;какое&quot;,&quot;какого&quot;,&quot;какие&quot;, _
					&quot;каких&quot;,&quot;каким&quot;,&quot;кем&quot;,&quot;кого&quot;,&quot;кому&quot;,&quot;ком&quot;,&quot;куда&quot;, _
					&quot;что&quot;,&quot;чем&quot;,&quot;чём&quot;,&quot;чему&quot;,&quot;чей&quot;,&quot;чья&quot;,&quot;чьего&quot;,&quot;чьему&quot;,&quot;чьей&quot;,&quot;чьи&quot;,&quot;чьих&quot;,&quot;чьими&quot;,&quot;чье&quot;, _
					&quot;чьё&quot;,&quot;чего&quot;, _
					&quot;сколько&quot;,&quot;скольких&quot;,&quot;скольким&quot;,&quot;сколькими&quot;)
	aRDefis = Array(&quot;нибудь&quot;,&quot;либо&quot;)

	Dim aLR() As String, bFind As Boolean
	aLR = Split( sWord, chr(10) ) &apos; делим слово надвое
	bFind = False
	
	&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
	Dim sLeft As String, sRight As String
	sLeft = LCase( Mid( aLR(0), 1, Len(aLR(0))-2 ) )
	sRight = LCase( DeletePunctMarkInString( aLR(1) ) )

	&apos; II. обработка слов по шаблону только левой или только правой части слова
	&apos; 1. обработка слов &quot;xxx-то&quot;
	If sRight = &quot;то&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 2. обработка слов &quot;xxx-ка&quot;
	If sRight = &quot;ка&quot; Then
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 3. обработка слов &quot;по-xxx&quot;
	If sLeft = &quot;по&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 4. обработка слов &quot;кое-xxx&quot;
	If sLeft = &quot;кое&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 5. обработка слов &quot;кой-xxx&quot;
	If sLeft = &quot;кой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 6. обработка слов &quot;из-xxx&quot;
	If sLeft = &quot;из&quot; And ( sRight = &quot;за&quot; Or sRight = &quot;под&quot; ) Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 7. обработка слов &quot;xxx-таки&quot;
	If sRight = &quot;таки&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 8. обработка слов &quot;как-никак&quot;
	If sLeft = &quot;как&quot; And sRight = &quot;никак&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 9. обработка слов &quot;какой-никакой&quot;
	If sLeft = &quot;какой&quot; And sRight = &quot;никакой&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 10. обработка слов &quot;во-xxx&quot;
	If sLeft = &quot;во&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 11. обработка слов &quot;в-xxx&quot;
	If sLeft = &quot;в&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; 12. обработка слов &quot;xxx-ли&quot;
	If sRight = &quot;ли&quot; Then 
		IsHyphen = True &apos; Слово с дефисом
		Exit Function
	End If
	
	&apos; II. обработка слов и по левой части и по правой (сравнение с шаблонами)
	&apos; 1. сравнимаем правую часть слова с шаблоном
	For i=0 To UBound( aRDefis() )
		If sRight = LCase( aRDefis(i) ) Then 
			bFind = True &apos; совпадает
			Exit For
		Else
			bFind = False
		End If
	Next i
	
	&apos; II.2. если правая часть совпадает, смотрим левую
	If bFind = True Then
		For i=0 To UBound( aLDefis() )
			If sLeft = LCase( aLDefis(i) ) Then 
				IsHyphen = True &apos; Слово с дефисом
				Exit Function
			End If
		Next i
	End If
	
	IsHyphen = False &apos; Разорванное Абзацем Слово
End Function

&apos; ////////////////////////////////////////////////////////////////////////
&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
Function DeletePunctMarkInString( byval sString As String ) As String
	Dim aPunctMarks() As String
	Dim i As Integer, c As Integer
	aPunctMarks = Array( &quot;.&quot;,&quot;,&quot;,&quot;:&quot;,&quot; &apos;&quot;,&quot;!&quot;,&quot;?&quot;,&quot;\&quot;,&quot;/&quot;,&quot;=&quot;,&quot;+&quot;,&quot;-&quot;,&quot;*&quot;,&quot;&amp;&quot;,&quot;…&quot;, _
						&quot;(&quot;,&quot;)&quot;,&quot;[&quot;,&quot;]&quot;,&quot;{&quot;,&quot;}&quot;,&quot;|&quot;,&quot;№&quot;,&quot;`&quot;,&quot;~&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&quot;&quot;&quot;,&quot;«&quot;,&quot;»&quot; )
	For i=0 To UBound( aPunctMarks() )
		c = InStr( sString, aPunctMarks(i) )
		If c &gt; 0 Then &apos; нашли что-то
			sString = Mid( sString, 1, c-1 )
		Else
			DeletePunctMarkInString = sString
			Exit Function
		End If
	Next i
End Function

&apos;////////////////////////////////////////////////////////////////////
&apos; Вставка пробела между знаком препинания и минусом, тире или дефисом
Function InsertSpaceBetweenPunctAndMinusDashHyphen( oDoc, oReplace, nSynbolCode, oProgressBar, nCur )
	&apos; знаки препинания и дефис, тире или минус
	With oReplace
		.SearchString	= &quot;([\.,:…\?\!&apos;])&quot; &amp; chr(nSynbolCode) &amp; &quot;[&quot; &amp; chr(32) &amp; chr(160) &amp; &quot;]&quot; &amp; &quot;\&lt;&quot;	&apos; &quot;.— \&lt;&quot;
		.ReplaceString	= &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; &quot;											&apos; &quot;. — \&lt;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString	= &quot;([\.,:…\?\!&apos;])&quot; &amp; chr(nSynbolCode) &amp; &quot;\&lt;&quot;	&apos; &quot;.—\&lt;&quot;
		.ReplaceString	= &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; &quot;			&apos; &quot;. — \&lt;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos;////////////////////////////////////////////////////////////////////
&apos; Вставка пробела между символами и минусом, тире или дефисом
Function InsertSpaceBetweenSymbolAndMinusDashHyphen( oDoc, oReplace, nSynbolCode, oProgressBar, nCur )
	&apos; кавычки и дефис, тире или минус
	With oReplace
		.SearchString = &quot;\&gt;([”\&quot;&quot;»])&quot; &amp; chr(nSynbolCode) &amp; &quot;([“\&quot;&quot;«])\&lt;&quot;	&apos; слово&quot;-“слово
		.ReplaceString = &quot;$1 &quot; &amp; chr(nSynbolCode) &amp; &quot; $2&quot; 					&apos; слово&quot; - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;([”\&quot;&quot;»])&quot; &amp; chr(nSynbolCode) &amp; &quot; {1,}([“\&quot;&quot;«])&quot;	&apos; слово&quot;- “слово
		.ReplaceString = &quot;$1 &quot; &amp; chr(nSynbolCode) &amp; &quot; $2&quot;					&apos; слово&quot; - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;([”\&quot;&quot;»]) {1,}&quot; &amp; chr(nSynbolCode) &amp; &quot;([“\&quot;&quot;«])&quot;	&apos; слово&quot; -“слово
		.ReplaceString = &quot;$1 &quot; &amp; chr(nSynbolCode) &amp; &quot; $2&quot;					&apos; слово&quot; - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1

	With oReplace
		.SearchString = &quot;\&gt;([”\&quot;&quot;»])&quot; &amp; chr(nSynbolCode) &amp; &quot;\&lt;&quot;	&apos; слово&quot;-слово
		.ReplaceString = &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; &quot;	&apos; слово&quot; - слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;([”\&quot;&quot;»])&quot; &amp; chr(nSynbolCode) &amp; &quot; {1,}\&lt;&quot;	&apos; слово&quot;- слово
		.ReplaceString = &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; &quot;			&apos; слово&quot; - слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;([”\&quot;&quot;»]) {1,}&quot; &amp; chr(nSynbolCode) &amp; &quot;\&lt;&quot;	&apos; слово&quot; -слово
		.ReplaceString = &quot;$1&quot; &amp; &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; &quot;			&apos; слово&quot; - слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;\&gt;&quot; &amp; chr(nSynbolCode) &amp; &quot;([“\&quot;&quot;«])\&lt;&quot;	&apos; слово-“слово ИЛИ
		.ReplaceString = &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; $1&quot;			&apos; слово - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;&quot; &amp; chr(nSynbolCode) &amp; &quot; {1,}([“\&quot;&quot;«])\&lt;&quot;	&apos; слово- “слово
		.ReplaceString = &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; $1&quot;					&apos; слово - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}&quot; &amp; chr(nSynbolCode) &amp; &quot;([“\&quot;&quot;«])\&lt;&quot;	&apos; слово -“слово
		.ReplaceString = &quot; &quot; &amp; chr(nSynbolCode) &amp; &quot; $1&quot;					&apos; слово - “слово
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Заменить, дефис используемый вместо тире на тире
&apos;(В прямой речи, между слов, но не в &quot;какой-то, где-то...&quot;)
Function HyphenToDash( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchString = &quot;^ {1,}-&quot;
		.ReplaceString = chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;^-&quot;
		.ReplaceString = chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\.-&quot;
		.ReplaceString = &quot;. &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\. {1,}-&quot; &apos;&quot;\. -&quot;
		.ReplaceString = &quot;. &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;. — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;,-&quot;
		.ReplaceString = &quot;, &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;, — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;, {1,}-&quot; &apos;&quot;, -&quot;
		.ReplaceString = &quot;, &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;, — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;:-&quot;
		.ReplaceString = &quot;: &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;: — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;: {1,}-&quot; &apos;&quot;: -&quot;
		.ReplaceString = &quot;: &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;: — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot; &apos;-&quot;
		.ReplaceString = &quot; &apos; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot; &apos; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot; &apos; {1,}-&quot;  &apos;&quot; ;-&quot;
		.ReplaceString = &quot; &apos; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot; &apos; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\!-&quot;
		.ReplaceString = &quot;! &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;! — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\! {1,}-&quot; &apos;&quot;\! -&quot;
		.ReplaceString = &quot;! &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;! — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\?-&quot;
		.ReplaceString = &quot;? &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;? — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\? {1,}-&quot; &apos;&quot;\? -&quot;
		.ReplaceString = &quot;? &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;? — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;…-&quot;
		.ReplaceString = &quot;… &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;… — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;… {1,}-&quot; &apos;&quot;… -&quot;
		.ReplaceString = &quot;… &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;… — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}- {1,}\&lt;&quot; &apos;&quot;\&gt; - \&lt;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; кавычки и тире
	With oReplace
		.SearchString = &quot;» {1,}- {1,}\&lt;&quot; &apos;&quot;» - \&lt;&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;»- {1,}\&lt;&quot; &apos;&quot;»- \&lt;&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;» {1,}-\&lt;&quot; &apos; &quot;» -\&lt;&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;»-\&lt;&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;» — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}- {1,}«&quot; &apos; &quot;\&gt; - «&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;- {1,}«&quot; &apos; &quot;\&gt;- «&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}-«&quot; &apos;&quot;\&gt; -«&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;-«&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot; — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;» {1,}- {1,}«&quot; &apos;&quot;» - «&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;»- {1,}«&quot; &apos;&quot;»- «&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;» {1,}-«&quot; &apos;&quot;» -«&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;»-«&quot;
		.ReplaceString = &quot;» &quot; &amp; chr(8212) &amp; &quot; «&quot; &apos;&quot;» — «&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;&quot;&quot; {1,}- {1,}\&lt;&quot; &apos; &quot;&quot;&quot; - \&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot;- {1,}\&lt;&quot; &apos; &quot;&quot;&quot;- \&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot; {1,}-\&lt;&quot; &apos; &quot;&quot;&quot; -\&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot;-\&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;&quot;&quot; — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}- {1,}&quot;&quot;&quot; &apos;&quot;\&gt; - &quot;&quot;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;- {1,}&quot;&quot;&quot; &apos;&quot;\&gt;- &quot;&quot;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}-&quot;&quot;&quot; &apos; &quot;\&gt; -&quot;&quot;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;-&quot;&quot;&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot; {1,}- {1,}&quot;&quot;&quot; &apos;&quot;&quot;&quot; - &quot;&quot;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot;- {1,}&quot;&quot;&quot; &apos;&quot;&quot;&quot;- &quot;&quot;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;&quot;&quot; {1,}-&quot;&quot;&quot; &apos;&quot;&quot;&quot; -&quot;&quot;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;&quot;&quot;-&quot;&quot;\&lt;&quot;
		.ReplaceString = &quot;&quot;&quot; &quot; &amp; chr(8212) &amp; &quot; &quot;&quot;&quot; &apos;&quot;&quot;&quot; — &quot;&quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;” {1,}- {1,}\&lt;&quot; &apos; &quot;” - \&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;”- {1,}\&lt;&quot; &apos;&quot;”- \&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;” {1,}-\&lt;&quot; &apos;&quot;” -\&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;”-\&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; &quot; &apos;&quot;” — &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}- {1,}“&quot; &apos;&quot;\&gt; - “&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;- {1,}“&quot; &apos;&quot;\&gt;- “&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt; {1,}-“&quot; &apos;&quot;\&gt; -“&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;-“&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot; — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;” {1,}- {1,}“&quot; &apos;&quot;” - “&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;”- {1,}“&quot; &apos;&quot;”- “&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;” {1,}-“&quot; &apos;&quot;” -“&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\&gt;”-“\&lt;&quot;
		.ReplaceString = &quot;” &quot; &amp; chr(8212) &amp; &quot; “&quot; &apos;&quot;” — “&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	&apos; скобки и тире
	With oReplace
		.SearchString = &quot;\)- &quot;
		.ReplaceString = &quot;) &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\)-&quot;
		.ReplaceString = &quot;) &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;- \(&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; (&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;-\(&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; (&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;\}- &quot;
		.ReplaceString = &quot;} &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\}-&quot;
		.ReplaceString = &quot;} &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;- \{&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; {&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;-\{&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; {&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;\]- &quot;
		.ReplaceString = &quot;] &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\]-&quot;
		.ReplaceString = &quot;] &quot; &amp; chr(8212) &amp; &quot; &quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;- \[&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; [&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;-\[&quot;
		.ReplaceString = &quot; &quot; &amp; chr(8212) &amp; &quot; [&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos;////////////////////////////////////////////////////////////////////////////
&apos; Работа с пробелами и табуляциями
Function DelSpace( oDoc, oReplace, oProgressBar, nReplaceCount, bTCToSpace, nCur )
	&apos; Замена множественныз пробелов на один пробел
	DelMSpace( oDoc, oReplace, oProgressBar, nReplaceCount, bTCToSpace, nCur )
	&apos; Удаляем все конечные пробелы
	DelEndSpace( oDoc, oReplace, oProgressBar, nCur )
End Function

&apos; Удаляем все множественные пробелы (простые и неразрывные) между слов и конечные
Function DelMSpace( oDoc, oReplace, oProgressBar, nReplaceCount, bTCToSpace, nCur )
	Dim sReplaceStr As String
	If bTCToSpace = True Then
		sReplaceStr = Space(nReplaceCount)
	Else
		Dim i As Integer
		For i=0 To nReplaceCount-1
			sReplaceStr = sReplaceStr + &quot;\t&quot;
		Next i
	End If
	With oReplace
		.SearchString = &quot;([:alnum:]|[\.:;…?\!)}\]»&apos;”\&quot;&quot;\&gt;%=\-&quot;&amp;chr(8209)&amp;chr(8211)&amp;chr(8212)&amp;&quot;])[:space:]{2,}([:alnum:]|[…\({\[«&apos;”\&quot;&quot;\&lt;])&quot;
		.ReplaceString = &quot;$1&quot; &amp; sReplaceStr &amp; &quot;$2&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все стартовые пробелы
Function DelStartSpace( oDoc, oReplace, oProgressBar, nCur )
	&apos; Удаляем все стартовые пробелы
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^ {1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все неразрывные стартовые пробелы
Function DelStartNoBreakSpace( oDoc, oReplace, oProgressBar, nCur )
	&apos; Удаляем все неразрывные стартовые пробелы
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^&quot;&amp;Chr(160)&amp;&quot;{1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все стартовые табуляции
Function DelStartTab( oDoc, oReplace, oProgressBar, nCur )
	&apos; Удаляем все стартовые табуляции
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;^\t{1,}&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	&apos; Заменяем все множественные табуляции:
	&apos;oReplace.SearchString = &quot;\t{2,}&quot;
	&apos;oReplace.ReplaceString = &quot; &quot;
	&apos;oDoc.ReplaceAll(oReplace)
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все конечные пробелы и табуляции
Function DelEndSpace( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot; {1,}$&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	&apos; Удаляем все конечные табуляции
	With oReplace
		.SearchRegularExpression = True
		.SearchString = &quot;\t{1,}$&quot;
		.ReplaceString = &quot;&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	nCur = nCur+1
End Function

&apos;////////////////////////////////////////////////////////////////////////////
&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
Function QuotationMarks( oDoc, oReplace, oProgressBar, nCur )
	With oReplace
		.SearchString = &quot;^ {1,}[&quot;&quot;“„]&quot;
		.ReplaceString = &quot;«&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur) 
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;\&gt;[&quot;&quot;”]&quot;
		.ReplaceString = &quot;»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\&lt;&quot;
		.ReplaceString = &quot;«&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;…[&quot;&quot;”]&quot;
		.ReplaceString = &quot;…»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]…&quot;
		.ReplaceString = &quot;«…&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;\![&quot;&quot;”]&quot;
		.ReplaceString = &quot;!»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\?[&quot;&quot;”]&quot;
		.ReplaceString = &quot;?»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1	
	With oReplace
		.SearchString = &quot;\.[&quot;&quot;”]&quot;
		.ReplaceString = &quot;.»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\(&quot;
		.ReplaceString = &quot;«(&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\)[&quot;&quot;”]&quot;
		.ReplaceString = &quot;)»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\[&quot;
		.ReplaceString = &quot;«[&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\][&quot;&quot;”]&quot;
		.ReplaceString = &quot;]»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„]\{&quot;
		.ReplaceString = &quot;«{&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;\}[&quot;&quot;”]&quot;
		.ReplaceString = &quot;}»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„][\+]&quot;
		.ReplaceString = &quot;«+&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;[&quot;&quot;“„][\-]&quot;
		.ReplaceString = &quot;«-&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;[\+][&quot;&quot;”]&quot;
		.ReplaceString = &quot;+»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
	With oReplace
		.SearchString = &quot;[\-][&quot;&quot;”]&quot;
		.ReplaceString = &quot;-»&quot;
	End With
	oDoc.ReplaceAll(oReplace)
	oProgressBar.setValue(nCur)
	nCur = nCur+1
End Function

&apos; Удаляем все разрывы страниц
Function DeleteAllPageBreaks() As Long 
	Dim lCount As Long : lCount = 0
	Dim oText As Variant : oText = ThisComponent.Text
	Dim oCursor as Variant
	oCursor = oText.CreateTextCursor()
	oCursor.GoToStart(False)
	Do
		If NOT oCursor.gotoEndOfParagraph(True) Then Exit Do
		If NOT IsEmpty(oCursor.PageDescName) Then oCursor.PageDescName = &quot;&quot;
		If oCursor.BreakType &lt;&gt; com.sun.star.style.BreakType.NONE Then
			oCursor.BreakType = com.sun.star.style.BreakType.NONE
			lCount = lCount + 1
		End If
	Loop Until NOT oCursor.gotoNextParagraph(False)
	DeleteAllPageBreaks = lCount
End Function

</script:module>