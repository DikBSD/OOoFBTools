<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Private oDoc As Object
Private oReplace As Object

Private sCorrectorSettingsFilename As String
Private oTextCorrectorDlg As Object
Private bCorrectorExecute As Boolean

Private bDelSpace As Boolean

Private bDelEmptyPar As Boolean
Private bBreakLinesInPara As Boolean
Private bBreakLinesInParaStartSpace As Boolean
Private bBreakLinesInParaEndSymbols As Boolean

Private bDelMP As Boolean &apos; удаление мягкие переносы
Private bWordDefisPara As Boolean

Private bBreakLine As Boolean
Private bDel As Boolean
Private bPar As Boolean
Private bSpace As Boolean

Private b2HyphenToDash As Boolean
Private bHyphenToDash As Boolean
Private bDefis As Boolean
Private bKav As Boolean
Private bPoints As Boolean
Private bC As Boolean
Private bImages As Boolean
Private nAnchor As String

Private sAnchorsList() As String &apos; виды привязки картинки
		
Sub TextCorrector
	DialogLibraries.LoadLibrary(&quot;OOoFBTools&quot;)
	oTextCorrectorDlg = CreateUnoDialog(DialogLibraries.OOoFBTools.TextCorrectorDlg)
	
	&apos; файл пользовательских стилей
	sCorrectorSettingsFilename = pmxCurDir() &amp; &quot;/OOoFBTools/corrector.txt&quot;
	
	
	sAnchorsList() = Array(&quot;К абзацу&quot;, &quot;К символу&quot;, &quot;Как символ&quot;)
	With oTextCorrectorDlg.Model
		.Title = &quot;Корректор текста документа&quot;
		.Height = 188
		.Width = 318
		.cbAnchor.StringItemList = sAnchorsList()
	End With
	
	&apos; АЛГОРИТМ - Очень ВАЖНО!!!
	&apos; т.к. Корректор развивается, и в диалоге Корректора Текста появляются НОВЫЕ опции (контролы),
	&apos; а у пользователей УЖЕ СОХРАНЕН файл corrector.txt, где данных для этих новых опций нет,
	&apos; то при работе Корректора может произойти либо ошибка, либо коректура произведется не так, как ожидается,
	&apos; а при запуске формы Корректора новые опции будут не такими, как ожидал User,
	&apos; Поэтому, сначала устанавливаем значения переменных по умолчанию (SetCorrectorSettingDefault),
	&apos; а потом - считываем из файла значения опций в переменные (ReadCorrectorSettings).
	&apos; Для тех новых опций, которых еще нет в файле corrector.txt значения будут по умолчанию,
	&apos; а для остальных - считаны из файла.
	&apos; Когда же User запустит форму и пересохранит ВСЕ настройки Корректора,
	&apos; то вне переменные и контролы будут иметь значения из файла!
		
	&apos; Задаем настройки очистки текста в контролы по умолчанию
	SetCorrectorSettingDefault
	&apos; только теперь считывание настройки из файла
	ReadCorrectorSettings
	
	oTextCorrectorDlg.execute()
	
	&apos; центрирование на экране
&apos;	ToScreenCenter(oTextCorrectorDlg)
	
	TextCorrector = bCorrectorExecute
End Sub

Function ReadCorrectorSettings As Boolean
	&apos; Читаем настройки очистки текста и задаем значения контролам формы
	If FileExists(sCorrectorSettingsFilename) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object

		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sCorrectorSettingsFilename) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; &quot;&quot; Then
				&apos; Устанавливаем данные корректора текста
				SetCorrectorSettingsInControlls(sLine)
			End If
		Loop
		oTIS.closeInput()
		ReadCorrectorSettings = True
	Else
		ReadCorrectorSettings = False
	End If
End Function

Sub SaveCorrectorSettings
	&apos; записываем настройки очистки текста
	Dim oLB As Object &apos; Для работы с ListBox`ами
	SaveSettings(sCorrectorSettingsFilename, oTextCorrectorDlg)
	
	&apos; заполняем переменные
	bDelSpace = oTextCorrectorDlg.GetControl(&quot;cboxDelSpace&quot;).State
	bWordDefisPara = oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State
		
	bDelEmptyPar = oTextCorrectorDlg.GetControl(&quot;cboxDelEmptyPar&quot;).State
	bBreakLinesInPara = oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State
	bBreakLinesInParaStartSpace = oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).State
	bBreakLinesInParaEndSymbols = oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).State
	
	bBreakLine = oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State
	bDel = oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).State
	bPar = oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).State
	bSpace = oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).State
	b2HyphenToDash = oTextCorrectorDlg.GetControl(&quot;cbox2HyphenToDash&quot;).State
	bHyphenToDash = oTextCorrectorDlg.GetControl(&quot;cboxHyphenToDash&quot;).State
	bDefis = oTextCorrectorDlg.GetControl(&quot;cboxDefis&quot;).State
	bKav = oTextCorrectorDlg.GetControl(&quot;cboxKav&quot;).State
	bPoints = oTextCorrectorDlg.GetControl(&quot;cboxPoints&quot;).State
	bC = oTextCorrectorDlg.GetControl(&quot;cboxC&quot;).State
	bImages = oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State
	oLB = oTextCorrectorDlg.getControl(&quot;cbAnchor&quot;)
	nAnchor = oLB.SelectedItem
	bDelMP = oTextCorrectorDlg.GetControl(&quot;cboxMP&quot;).State
End Sub

Sub SetCorrectorSettingsInControlls(sCurrentLine)
	SetSettingsInControlls(sCurrentLine, oTextCorrectorDlg)

	cboxImagesEnabled
	cboxBreakLineEnabled
	cboxBreakLinesInParaEnabled

End Sub

Sub SetCorrectorSettingDefault
	&apos; Установка настроек по умолчанию в контролы
	Dim oLB As Object &apos; Для работы с ListBox`ами
	&apos; Работа с пробелами и табуляциями
	oTextCorrectorDlg.GetControl(&quot;cboxDelSpace&quot;).State = 1
	&apos; Работа с абзацами и разрывами
	oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxDelEmptyPar&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State = 0
	oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).State = 0
	
	oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).State = 0
	oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).State = 0
	&apos; Кавычки, Дефисы. Разное
	oTextCorrectorDlg.GetControl(&quot;cbox2HyphenToDash&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxHyphenToDash&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxDefis&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxKav&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxPoints&quot;).State = 1
	oTextCorrectorDlg.GetControl(&quot;cboxC&quot;).State = 0
	&apos; Картинки
	oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State = 0
	oLB = oTextCorrectorDlg.getControl(&quot;cbAnchor&quot;)
	oLB.SelectItemPos(0, True) &apos; &quot;К абзацу&quot;
	&apos; мягкие переносы
	oTextCorrectorDlg.GetControl(&quot;cboxMP&quot;).State = 1
	
	cboxImagesEnabled
	cboxBreakLineEnabled
	cboxBreakLinesInParaEnabled
End Sub

Sub TextCorrectorDlgCanceled
	bCorrectorExecute = False
	oTextCorrectorDlg.endExecute()
End Sub

Sub cboxImagesEnabled
	If oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;lblAnchor&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;cbAnchor&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;lblAnchor&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;cbAnchor&quot;).Enable = False
	End If
End Sub

Sub cboxBreakLineEnabled
	If oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;obtnDel&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnPar&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtnSpace&quot;).Enable = False
	End If
End Sub

Sub cboxBreakLinesInParaEnabled
	If oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State = 1 Then
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).Enable = True
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).Enable = True
	Else
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaStartSpace&quot;).Enable = False
		oTextCorrectorDlg.GetControl(&quot;obtBreakLinesInParaEndSymbols&quot;).Enable = False
	End If
End Sub


Sub TextCorrectorDlgOk
	Dim sCorrectorName As String
	sCorrectorName = &quot;Корректирование текста&quot;
	&apos; Если есть опции для чистки, то - работаем
	If oTextCorrectorDlg.GetControl(&quot;cboxDelSpace&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxWordDefisPara&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxDelEmptyPar&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxBreakLinesInPara&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxBreakLine&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cbox2HyphenToDash&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxHyphenToDash&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxDefis&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxKav&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxPoints&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxC&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxImages&quot;).State = 0 And _
		oTextCorrectorDlg.GetControl(&quot;cboxMP&quot;).State = 0 Then
		MsgBox &quot;Выберите, пожалуйста, хоть одну опцию для корректуры текста!&quot;, 64, sCorrectorName
		Exit Sub
	End If
	
	&apos; Принятие параметров чистки текста
	bCorrectorExecute = True
	oTextCorrectorDlg.endExecute()
	
	SaveCorrectorSettings &apos; сохранение настроек чистки текста

	Dim oProgressBar
	oProgressBar = ThisComponent.CurrentController.StatusIndicator
	
	&apos; Очистка текста
	oDoc = ThisComponent
	oReplace = oDoc.createReplaceDescriptor
	oReplace.SearchRegularExpression = True
	
	&apos; Привязка картинок
	If bImages = True Then
		Dim oGraphics As Object 
		Dim oThisGraphic As Object 
		Dim iAnchor As Integer
		Dim i As Integer
		Select Case nAnchor
			Case &quot;К абзацу&quot;
				iAnchor = 0
			Case &quot;К символу&quot;
				iAnchor = 4
			Case &quot;Как символ&quot;
				iAnchor = 1
			Case Else
				iAnchor = 0
		End Select
		oGraphics = oDoc.getGraphicObjects()
	    For i = 0 to oGraphics.Count - 1
	    	oThisGraphic = oGraphics.GetByIndex(i)
			oThisGraphic.AnchorType  = iAnchor
		Next i
	End If
	
	&apos; Работа с абзацами и разрывами
	
	If bWordDefisPara = True Then
		&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
		oProgressBar.start( &quot;Удаление разрыва слов:&quot;, ThisComponent.ParagraphCount )
		JoinWordDefisPara( oProgressBar )
	End If
	
	If bBreakLinesInPara = True Then
		If bWordDefisPara = False Then &apos; если обработка дефисов не проводилась
			oProgressBar.start( &quot;Удаление разрыва слов:&quot;, ThisComponent.ParagraphCount )
			&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
			JoinWordDefisPara( oProgressBar )
		End If
		oProgressBar.start( &quot;Склейка строк в параграф:&quot;, ThisComponent.ParagraphCount )
		&apos; !!!!!!!!!не переставлять местами условия!!! Результат будет неверен!!!!!!
		If bBreakLinesInParaStartSpace = True Then
			JoinBreakLinesInParaStartSpace( oProgressBar )
		ElseIf bBreakLinesInParaEndSymbols = True Then
			JoinBreakLinesInParaEndSymbols( oProgressBar )
		End If
	End If

	oProgressBar.start(&quot;Корректировка документа:&quot;, 90)
	oProgressBar.setValue(0)

	If bDelEmptyPar = True Then
		&apos; Удаляем все множественные пустые абзацы
		oReplace.SearchString = &quot;^$&quot;
		oReplace.ReplaceString = &quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(1)
	End If
	If bBreakLine = True Then
		&apos; Разрывы строк
		If bDel = True Then
			&apos; Удаляем разрыв строки
			oReplace.SearchString = chr(10)&apos;&quot;\n&quot;
			oReplace.ReplaceString = &quot;&quot;
		ElseIf bPar = True Then
			&apos; Заменяем разрыв строки на абзац
			oReplace.SearchString = chr(10)&apos;&quot;\n&quot;
			oReplace.ReplaceString = &quot;\n&quot;
		ElseIf bSpace = True Then
			&apos; Заменяем разрыв строки на 1 пробел
			oReplace.SearchString = chr(10)&apos;&quot;\n&quot;
			oReplace.ReplaceString = &quot; &quot;
		End If
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(2)
	End If
	&apos; Кавычки, Дефисы, Разное
	If b2HyphenToDash = True Then
		&apos; Заменить двойной дефис (--) на тире
		oReplace.SearchString = &quot;--&quot;
		oReplace.ReplaceString = &quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(3)
		oReplace.SearchString = chr(8211) &amp; chr(8211)
		oReplace.ReplaceString = &quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(4)
	End If
	If bHyphenToDash = True Then
		&apos; Заменить, дефис используемый вместо тире на тире
		&apos;(Речь, между слов, но не в &quot;какой-то, где-то...&quot;)
		oReplace.SearchString = &quot;^-&quot;
		oReplace.ReplaceString = &quot;— &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(5)
		oReplace.SearchString = &quot;\.-&quot;
		oReplace.ReplaceString = &quot;. — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(6)
		oReplace.SearchString = &quot;\. -&quot;
		oReplace.ReplaceString = &quot;. — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(7)
		oReplace.SearchString = &quot;,-&quot;
		oReplace.ReplaceString = &quot;, — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(8)
		oReplace.SearchString = &quot;, -&quot;
		oReplace.ReplaceString = &quot;, — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(9)
		oReplace.SearchString = &quot;:-&quot;
		oReplace.ReplaceString = &quot;: — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(10)
		oReplace.SearchString = &quot;: -&quot;
		oReplace.ReplaceString = &quot;: — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(11)
		oReplace.SearchString = &quot;;-&quot;
		oReplace.ReplaceString = &quot;; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(12)
		oReplace.SearchString = &quot; ;-&quot;
		oReplace.ReplaceString = &quot;; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(13)
		oReplace.SearchString = &quot;\!-&quot;
		oReplace.ReplaceString = &quot;! — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(14)
		oReplace.SearchString = &quot;\! -&quot;
		oReplace.ReplaceString = &quot;! — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(15)
		oReplace.SearchString = &quot;\?-&quot;
		oReplace.ReplaceString = &quot;? — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(16)
		oReplace.SearchString = &quot;\? -&quot;
		oReplace.ReplaceString = &quot;? — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(17)
		oReplace.SearchString = &quot;…-&quot;
		oReplace.ReplaceString = &quot;… — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(18)
		oReplace.SearchString = &quot;… -&quot;
		oReplace.ReplaceString = &quot;… — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(19)
		oReplace.SearchString = &quot;\&gt; - \&lt;&quot;
		oReplace.ReplaceString = &quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(20)
		
		oReplace.SearchString = &quot;» - \&lt;&quot;
		oReplace.ReplaceString = &quot;» — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(21)
		oReplace.SearchString = &quot;»- \&lt;&quot;
		oReplace.ReplaceString = &quot;» — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(22)
		oReplace.SearchString = &quot;» -\&lt;&quot;
		oReplace.ReplaceString = &quot;» — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(23)
		oReplace.SearchString = &quot;»-\&lt;&quot;
		oReplace.ReplaceString = &quot;» — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(24)
		oReplace.SearchString = &quot;\&gt; - «&quot;
		oReplace.ReplaceString = &quot; — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(25)
		oReplace.SearchString = &quot;\&gt;- «&quot;
		oReplace.ReplaceString = &quot; — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(26)
		oReplace.SearchString = &quot;\&gt; -«&quot;
		oReplace.ReplaceString = &quot; — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(27)
		oReplace.SearchString = &quot;\&gt;-«&quot;
		oReplace.ReplaceString = &quot; — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(28)
		oReplace.SearchString = &quot;» - «&quot;
		oReplace.ReplaceString = &quot;» — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(29)
		oReplace.SearchString = &quot;»- «&quot;
		oReplace.ReplaceString = &quot;» — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(30)
		oReplace.SearchString = &quot;» -«&quot;
		oReplace.ReplaceString = &quot;» — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(31)
		oReplace.SearchString = &quot;»-«&quot;
		oReplace.ReplaceString = &quot;» — «&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(32)
		
		oReplace.SearchString = &quot;&quot;&quot; - \&lt;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(33)
		oReplace.SearchString = &quot;&quot;&quot;- \&lt;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(34)
		oReplace.SearchString = &quot;&quot;&quot; -\&lt;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(35)
		oReplace.SearchString = &quot;&quot;&quot;-\&lt;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(36)
		oReplace.SearchString = &quot;\&gt; - &quot;&quot;&quot;
		oReplace.ReplaceString = &quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(37)
		oReplace.SearchString = &quot;\&gt;- &quot;&quot;&quot;
		oReplace.ReplaceString = &quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(38)
		oReplace.SearchString = &quot;\&gt; -&quot;&quot;&quot;
		oReplace.ReplaceString = &quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(39)
		oReplace.SearchString = &quot;\&gt;-&quot;&quot;&quot;
		oReplace.ReplaceString = &quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(40)
		oReplace.SearchString = &quot;&quot;&quot; - &quot;&quot;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(41)
		oReplace.SearchString = &quot;&quot;&quot;- &quot;&quot;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(42)
		oReplace.SearchString = &quot;&quot;&quot; -&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(43)
		oReplace.SearchString = &quot;&quot;&quot;-&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;&quot;&quot; — &quot;&quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(44)
		
		oReplace.SearchString = &quot;” - \&lt;&quot;
		oReplace.ReplaceString = &quot;” — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(45)
		oReplace.SearchString = &quot;”- \&lt;&quot;
		oReplace.ReplaceString = &quot;” — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(46)
		oReplace.SearchString = &quot;” -\&lt;&quot;
		oReplace.ReplaceString = &quot;” — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(47)
		oReplace.SearchString = &quot;”-\&lt;&quot;
		oReplace.ReplaceString = &quot;” — &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(48)
		oReplace.SearchString = &quot;\&gt; - “&quot;
		oReplace.ReplaceString = &quot; — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(49)
		oReplace.SearchString = &quot;\&gt;- “&quot;
		oReplace.ReplaceString = &quot; — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(50)
		oReplace.SearchString = &quot;\&gt; -“&quot;
		oReplace.ReplaceString = &quot; — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(51)
		oReplace.SearchString = &quot;\&gt;-“&quot;
		oReplace.ReplaceString = &quot; — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(52)
		oReplace.SearchString = &quot;” - “&quot;
		oReplace.ReplaceString = &quot;” — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(53)
		oReplace.SearchString = &quot;”- “&quot;
		oReplace.ReplaceString = &quot;” — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(54)
		oReplace.SearchString = &quot;” -“&quot;
		oReplace.ReplaceString = &quot;” — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(55)
		oReplace.SearchString = &quot;”-“&quot;
		oReplace.ReplaceString = &quot;” — “&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(56)
	End If
	If bDefis = True Then
		&apos; Вместо минуса - дефис в &quot;кое-что&quot;, &quot;куда-то&quot; и т.д.
		oReplace.SearchString = &quot;\&gt;-\&lt;&quot;
		oReplace.ReplaceString = chr(8211)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(57)
	End If
	If bPoints = True Then
		&apos; Упорядочить многоточие
		oReplace.SearchString = &quot;\.\.\.&quot;
		oReplace.ReplaceString = &quot;…&quot;&apos;chr(8230)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(58)
		oReplace.SearchString = &quot;\. \. \.&quot;
		oReplace.ReplaceString = &quot;…&quot;&apos;chr(8230)
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(59)
	End If
	If bKav = True Then
		&apos; Заменить кавычки  &quot; &quot; и “ ” на  « »
		oReplace.SearchString = &quot;&quot;&quot;\&lt;&quot;
		oReplace.ReplaceString = &quot;«&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(60)
		oReplace.SearchString = &quot;\&gt;&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(61)
		oReplace.SearchString = &quot;“\&lt;&quot;
		oReplace.ReplaceString = &quot;«&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(62)
		oReplace.SearchString = &quot;\&gt;”&quot;
		oReplace.ReplaceString = &quot;»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(63)
		oReplace.SearchString = &quot;…&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;…»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(64)
		oReplace.SearchString = &quot;&quot;&quot;…&quot;
		oReplace.ReplaceString = &quot;«…&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(65)
		oReplace.SearchString = &quot;…”&quot;
		oReplace.ReplaceString = &quot;…»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(66)
		oReplace.SearchString = &quot;“…&quot;
		oReplace.ReplaceString = &quot;«…&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(67)
		
		oReplace.SearchString = &quot;!&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;!»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(68)
		oReplace.SearchString = &quot;!”&quot;
		oReplace.ReplaceString = &quot;!»&quot;
		oDoc.ReplaceAll(oReplace)
		
		oReplace.SearchString = &quot;?&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;?»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(69)
		oReplace.SearchString = &quot;?”&quot;
		oReplace.ReplaceString = &quot;?»&quot;
		oDoc.ReplaceAll(oReplace)
		
		oReplace.SearchString = &quot;.&quot;&quot;&quot;
		oReplace.ReplaceString = &quot;.»&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(70)
		oReplace.SearchString = &quot;.”&quot;
		oReplace.ReplaceString = &quot;.»&quot;
		oDoc.ReplaceAll(oReplace)
		
		oReplace.SearchString = &quot;„\&lt;&quot;
		oReplace.ReplaceString = &quot;«&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(71)
		
		oReplace.SearchString = &quot;„…&quot;
		oReplace.ReplaceString = &quot;«…&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(72)

	End If
	If bC = True Then
		&apos; Замена на (c) (r) (TM)
		oReplace.SearchString = &quot;\(c\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(73)
		oReplace.SearchString = &quot;\(с\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(74)
		oReplace.SearchString = &quot;\(C\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(75)
		oReplace.SearchString = &quot;\(С\)&quot;
		oReplace.ReplaceString = &quot;©&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(76)
		oReplace.SearchString = &quot;\(r\)&quot;
		oReplace.ReplaceString = &quot;®&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(77)
		oReplace.SearchString = &quot;\(R\)&quot;
		oReplace.ReplaceString = &quot;®&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(78)
		oReplace.SearchString = &quot;\(TM\)&quot;
		oReplace.ReplaceString = &quot;™&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(79)
		oReplace.SearchString = &quot;\(ТМ\)&quot;
		oReplace.ReplaceString = &quot;™&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(80)
	End If
	
	&apos; Работа с пробелами и табуляциями
	If bDelSpace = True Then
		&apos; Заменяем одиночную табуляцию на пробел
		oReplace.SearchString = &quot;\t&quot;
		oReplace.ReplaceString = &quot; &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(81)
		&apos; Удаляем все стартовые табуляции
		&apos;oReplace.SearchString = &quot;^\t{1,}&quot;
		&apos;oReplace.ReplaceString = &quot;&quot;
		&apos;oDoc.ReplaceAll(oReplace)
		&apos; Удаляем все конечные табуляции
		&apos;oReplace.SearchString = &quot;\t{1,}$&quot;
		&apos;oReplace.ReplaceString = &quot;&quot;
		&apos;oDoc.ReplaceAll(oReplace)
		&apos; Заменяем все множественные табуляции:
		&apos;oReplace.SearchString = &quot;\t{2,}&quot;
		&apos;oReplace.ReplaceString = &quot; &quot;
		&apos;oDoc.ReplaceAll(oReplace)
		&apos; Удаляем все стартовые пробелы
		oReplace.SearchString = &quot;^ {1,}&quot;
		oReplace.ReplaceString = &quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(82)
		&apos; Удаляем все конечные пробелы
		oReplace.SearchString = &quot; {1,}$&quot;
		oReplace.ReplaceString = &quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(83)
		&apos; Обработка множественных пробелов
		&apos;oReplace.SearchString = &quot;  {1,2}&quot;
		oReplace.SearchString = &quot; +&quot;
		oReplace.ReplaceString = &quot; &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(84)
		&apos; Обработка множественных неразрывных пробелов
		oReplace.SearchString = &quot; +&quot;
		oReplace.ReplaceString = &quot; &quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(85)
		&apos; Обработка оставшихся комбинаций пробелов и неразрывных пробелов
		oReplace.SearchString = &quot;   &quot; &apos; неразрывный, простой, неразрывный
		oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(86)
		oReplace.SearchString = &quot;   &quot; &apos; простой, неразрывный, простой
		oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(87)
		oReplace.SearchString = &quot;  &quot; &apos; неразрывный, простой
		oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(88)
		oReplace.SearchString = &quot;  &quot; &apos; простой, неразрывный
		oReplace.ReplaceString = &quot; &quot; &apos; неразрывный
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(89)
	End If
	
	&apos; Удаление мягких переносов
	If bDelMP = True Then
		oReplace.SearchString = &quot;\x00AD&quot;
		oReplace.ReplaceString = &quot;&quot;
		oDoc.ReplaceAll(oReplace)
		oProgressBar.setValue(90)
	End If
	
	MsgBox &quot;Коррекция текста документа завершена!&quot;, 64, sCorrectorName
	oProgressBar.end
End Sub

&apos; /////////////////////////////////////////////////////////////////////////
Sub JoinBreakLinesInParaStartSpace( oProgressBar As Object )
	&apos; сборка разорваных строк абзаца знаком абзаца в один абзац.
	&apos; Идентификатор каждого &quot;нового абзаца&quot; - 1 или несколько пробелов в начале строки.
	&apos; Полезно при обработке книг после сканирования и сохраненных в txt формате (таких море в сети)
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	vSearch.SearchRegularExpression = True
	vSearch.SearchString = &quot;^[:space:]+&quot; &apos;&quot;^ {1,}&quot;
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		vEndFound = oDoc.findNext( vStartFound.End, vSearch)
		If IsNull(vEndFound) Then
			&apos; Найден стартовый идентификатор без завершающего - ищем от vStartFound и до конца документа
			vEndFound = oDoc.Text.createTextCursor()
			vEndFound.GoToEnd(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			Exit Do
		Else
			vEndFound.gotoPreviousParagraph(False)
			&apos;vEndFound.gotoEndOfParagraph(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			vStartFound = oDoc.findNext( vStartFound.End, vSearch )
		End If
	Loop
End Sub

Sub JoinBreakLinesInParaEndSymbols( oProgressBar As Object )
	&apos; сборка разорваных строк абзаца знаком абзаца в один абзац.
	&apos; Идентификатор строки &quot;одного абзаца&quot; - 1 или несколько пробелов в конце строки.
	&apos; Полезно при обработке книг после сканирования и сохраненных в txt формате (таких море в сети)
	Dim vStartSearch, vEndSearch &apos;Open и Close descriptors
	Dim vStartFound, vEndFound &apos;Open и Close find objects
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	&apos; Создать дескрипторы для документа, в котором возможен поиск.
	vStartSearch = oDoc.createSearchDescriptor()
	vEndSearch = oDoc.createSearchDescriptor()

	vStartSearch.SearchRegularExpression = True
	vEndSearch.SearchRegularExpression = True
	
	&apos; Задать текст, который нужно искать, и др.
	vStartSearch.SearchString = &quot;$&quot;&apos;( если поиск по пробелам в конце абзаца - &quot;[:space:]+$&quot; - этот вариант не всегда встречается и не все разорванные строки &quot;видит&quot;)
	vEndSearch.SearchString = &quot;[.!?…»”\&quot;&quot;:;]$&quot;
	&apos; Найти первый открывающий разделитель
	vStartFound = oDoc.findFirst(vStartSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителья, начиная с найденного открывающего
		vEndFound = oDoc.findNext( vStartFound.End, vEndSearch)
		If IsNull(vEndFound) Then
			vEndFound = oDoc.Text.createTextCursor()
			vEndFound.GoToEnd(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			Exit Do
		Else
			&apos; Выделить текст внутри разделителей
			vStartFound.gotoStartOfParagraph(False)
			JoinLines( vStartFound, vEndFound, oDoc, oProgressBar, l )
			vStartFound = oDoc.findNext( vStartFound.End, vStartSearch )
		End If
	Loop
End Sub

Sub JoinLines(oLCurs, oRCurs, oDoc, oProgressBar, l)
	If IsNull(oLCurs) Or IsNull(oRCurs) Or IsNull(oDoc) Then Exit Sub
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Sub
	oLCurs.goRight(0, False)
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = &quot;$&quot;
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
	Do While Not IsNull(vFound)
		l = l + 1
		oProgressBar.setValue(l)
		If oDoc.Text.compareRegionEnds( vFound, oRCurs ) = -1 Then Exit Do
		vFound.setString(&quot; &quot;)
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
	Loop
End Sub

&apos; ////////////////////
Sub JoinWordDefisPara( oProgressBar As Object )
	&apos; удаление переноса, разорванного абзацем (обработка слов с дефисами и простых слов)
	Dim vSearch As Variant, vStartFound As Variant, vEndFound As Variant &apos; для поиска границ слова
	Dim vL As Variant, vR As Variant &apos; только для чтения слова
	Dim oDoc As Object, l As Long
	oDoc = ThisComponent
	
	vSearch = oDoc.createSearchDescriptor()
	&apos; поиск с регулярными выражениями
	vSearch.SearchRegularExpression = True
	vSearch.SearchString = &quot;-$&quot;
	&apos; Находим первый идентификатор
	vStartFound = oDoc.findFirst(vSearch)
	vEndFound = oDoc.findFirst(vSearch)
	vL = oDoc.findFirst(vSearch)
	vR = oDoc.findFirst(vSearch)
	l = 0
	Do While Not IsNull(vStartFound)
		&apos;Поиск закрывающего разделителя, начиная с найденного открывающего
		If Not IsNull(vStartFound) Then
			&apos; на начало слова с переносом
			vStartFound.gotoStartOfWord(False)
			vL.gotoStartOfWord(False)
			&apos; на конец слова с переносом
			If Not IsNull(vEndFound) Then
				vEndFound.gotoNextParagraph(False)
				vEndFound.gotoEndOfWord(False)
				vR.gotoNextParagraph(False)
				vR.gotoEndOfWord(False)
				&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
				ProcessingHyphen( vStartFound, vEndFound, vL, vR, oDoc, oProgressBar, l )
				&apos; ищем далее
				vStartFound = oDoc.findNext( vStartFound.End, vSearch)
				vEndFound = oDoc.findNext( vEndFound.End, vSearch)
				vL = oDoc.findNext( vL.End, vSearch)
				vR = oDoc.findNext( vR.End, vSearch)
			Else Exit Do
			End If
		End If
	Loop
End Sub

Sub ProcessingHyphen( oLCurs, oRCurs, vL, vR, oDoc, oProgressBar, l )
	&apos; обработка найденного слова с переносом: (дефис или просто разрыв переноса абзацем)
	&apos; Алгоритм: если это слово с дефисом, то удаляем разрыв; иначе - удаляем и &quot;-&quot;, и разрыв
	If IsNull(oLCurs) Or IsNull(oRCurs) Or IsNull(oDoc) Then Exit Sub
	If oDoc.Text.compareRegionEnds(oLCurs, oRCurs) &lt;= 0 Then Exit Sub
	vL.gotoRange(vR, True)
	If IsHyphen( vL.getString() ) = True Then
		&apos; Слово с дефисом - просто удаляем разрыв
		RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, oProgressBar, l )
	Else
		&apos; Разорванное Абзацем Слово - удаляем и перенос и разрыв
		RegReplaceSymbol( &quot;-&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, oProgressBar, l )
		RegReplaceSymbol( &quot;$&quot;, &quot;&quot;, oLCurs, oRCurs, oDoc, oProgressBar, l )
	End If
End Sub

Sub RegReplaceSymbol( sFindSymbol As String, sReplSymbol As String, oLCurs, oRCurs, oDoc, oProgressBar, l )
	&apos; Поиск заданного символа (sFindSymbol) в заданном диаппазоне (oLCurs, oRCurs) и замена его нужным (sReplSymbol)
	Dim vDescriptor, vFound
	vDescriptor = oDoc.createSearchDescriptor()
	With vDescriptor
		.SearchString = sFindSymbol
		.SearchCaseSensitive = False
		.SearchRegularExpression = True
	End With
	vFound = oDoc.findNext( oLCurs, vDescriptor )
	Do While Not IsNull(vFound)
		l = l + 1
		oProgressBar.setValue(l)
		If oDoc.Text.compareRegionEnds( vFound, oRCurs ) = -1 Then Exit Sub
		vFound.setString(sReplSymbol)
		vFound = ThisComponent.findNext( vFound.End, vDescriptor )
	Loop
End Sub

Function IsHyphen( sWord As String ) As Boolean
	&apos; возвращает True, если анализируемое слово - слово с дефисом
	Dim i As Integer
	Dim aLDefis() As String, aRDefis() As String, aPunctMarks() As String
	aPunctMarks = Array( &quot;.&quot;,&quot;,&quot;,&quot;:&quot;,&quot;;&quot;,&quot;!&quot;,&quot;?&quot;,&quot;\&quot;,&quot;/&quot;,&quot;=&quot;,&quot;+&quot;,&quot;-&quot;,&quot;*&quot;,&quot;&amp;&quot;, _
						&quot;(&quot;,&quot;)&quot;,&quot;[&quot;,&quot;]&quot;,&quot;{&quot;,&quot;}&quot;,&quot;|&quot;,&quot;№&quot;,&quot;`&quot;,&quot;~&quot;,&quot;@&quot;,&quot;#&quot;,&quot;$&quot;,&quot;%&quot;,&quot;^&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&quot;&quot;&quot;,&quot;«&quot;,&quot;»&quot; )
	aLDefis = Array(&quot;когда&quot;,&quot;откуда&quot;,&quot;зачем&quot;,&quot;почему&quot;,&quot;отчего&quot;,&quot;чего&quot;,&quot;что&quot;,&quot;кто&quot;,&quot;как&quot;,&quot;какой&quot;,&quot;какого&quot;,&quot;какому&quot;, _
					&quot;каком&quot;,&quot;какая&quot;,&quot;какую&quot;,&quot;какое&quot;,&quot;какие&quot;,&quot;каких&quot;,&quot;каким&quot;,&quot;чей&quot;,&quot;чьего&quot;,&quot;чьему&quot;,&quot;чьей&quot;,&quot;чьи&quot;, _
					&quot;чьими&quot;,&quot;чье&quot;,&quot;чьё&quot;,&quot;сколько&quot;,&quot;скольких&quot;,&quot;скольким&quot;,&quot;сколькими&quot;,&quot;где&quot;,&quot;кем&quot;,&quot;чем&quot;,&quot;кого&quot;, _
					&quot;кому&quot;,&quot;ком&quot;,&quot;куда&quot;,&quot;кое&quot;)
	aRDefis = Array(&quot;то&quot;,&quot;нибудь&quot;,&quot;либо&quot;,&quot;таки&quot;,&quot;кто&quot;,&quot;что&quot;)

	Dim aLR() As String, bFind As Boolean
	aLR = Split( sWord, chr(10) ) &apos; делим слово надвое
	bFind = False
	
	For i=0 To UBound( aRDefis() )
		&apos; обработка правой части слова на наличие &quot;слипшегося&quot; знака пунктуации и т.д.
		Dim sRight As String, j As Integer, c As Integer
		sRight = aLR(1)
		For j=0 To UBound( aPunctMarks() )
			c = InStr( aLR(1), aPunctMarks(j) )
			If c &gt; 0 Then
				sRight = Mid( aLR(1), 1, c-1 )
				Exit For
			End If
		Next j
		&apos; сравнимаем правую часть слова с шаблоном
		If LCase( sRight ) = LCase( aRDefis(i) ) Then 
			bFind = True &apos; совпадает
			Exit For
		Else
			bFind = False
		End If
	Next i
	
	If bFind = True Then
		&apos; правая часть совпадает, смотрим левую
		For i=0 To UBound( aLDefis() )
			If LCase( Mid( aLR(0), 1, Len(aLR(0))-2 ) ) = LCase( aLDefis(i) ) Then 
				IsHyphen = True &apos; Слово с дефисом
				Exit Function
			End If
		Next i
	End If
	
	IsHyphen = False &apos; Разорванное Абзацем Слово
End Function

</script:module>