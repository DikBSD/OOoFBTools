<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector_Manually" script:language="StarBasic">REM  *****  BASIC  *****
&apos; ////////////////////////////////////////////////////////////////
&apos; модуль инструментов:
&apos; 1. поиск в документе Слов с дефисом, тире или минусом
&apos; 2. поиск в документе Слов с разорванным абзацем переносом (дефис, тире или минус)
&apos; 3. поиск в документе Обрыва предложения на словах, знаках препинания, кавычках и скобках
&apos; 4. поиск в документе Места с недостающим пробелом между словами
&apos; ////////////////////////////////////////////////////////////////
option explicit

Type tFindData
	sRegString As String
	sMessage As String
End Type

Public oTDF As Object
Private oDocController As Object
Private bFindEnd As Boolean &apos; флаг конца поиска - закрытия диалога (True)

Private oDocControl, otxtCurs &apos; текстовый курсор
Private Const sWordsDefisListFile As String = &quot;/OOoFBTools/words_defis_list.txt&quot; &apos; файл с запомненными дефисными словами
Private asWords() As String &apos; массив с &quot;нормальными&quot; дефисными словами

&apos; ///////////////////////////////////////////////////////////////////////////////////////////////////////
Sub TextDefectFinderDlg_windowActivated(oEv)
	oDocController = ThisComponent.getCurrentController()
End Sub

Sub TextDefectFinderDlg_windowDeactivated(oEv)
End Sub

Sub TextDefectFinderDlg_windowOpened(oEv)
End Sub

Sub TextDefectFinderDlg_windowClosing(oEv)
	bFindEnd = True
End Sub

Sub TextDefectFinderDlg_windowClosed(oEv)
End Sub

Sub TextDefectFinderDlg_windowMinimized(oEv)
End Sub

Sub TextDefectFinderDlg_windowNormalized(oEv)
End Sub

Sub TextDefectFinderDlg_disposing(oEv)
	&apos; сохраняем список запомненных дефисных слов в файл
	If UBound( asWords() ) &gt; -1 Then
		If FileExists( getUserPath() &amp; sWordsDefisListFile ) Then
			Kill getUserPath() &amp; sWordsDefisListFile
		End If
		SaveArray( asWords(), getUserPath() &amp; sWordsDefisListFile )
	End If
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; инициализация и запуск диалога поиска
Sub TextDefectFinderStart
	ReDim asWords() As String
	&apos; считываем из файла дефисные слова, чтобы их потом &quot;пропускать&quot;
	ReadFileInArray( asWords(), getUserPath() &amp; sWordsDefisListFile )

	GlobalScope.BasicLibraries.LoadLibrary( &quot;Tools&quot; )   
	oTDF = LoadDialog( &quot;OOoFBTools&quot;, &quot;TextDefectFinderDlg&quot; )
	
	&apos; инициализация диалога Поиска OCR ошибок в тексте в зависимости от локали
	InitTextDefectFinderDlg()
	
	&apos; файл начтроек Корректора Текста
	Dim sOCRTCSettingsFilename As String : sOCRTCSettingsFilename = getUserPath() &amp; &quot;/OOoFBTools/ocr_errors_corrector.txt&quot;
	Dim aModeList() As String : aModeList() = Array( sTDFD.sWordHyphenDashMinus, sTDFD.sWordBrokenParagraphCarry, _
													sTDFD.sBreakageOffer, sTDFD.sPlaceMissingPunctMarksEndPara, sTDFD.sPlaceMissingBlank )
													
	Dim aPunctList() As String : aPunctList() = Array( &quot;.&quot;, &quot;,&quot;, &quot;!&quot;, &quot;?&quot;, &quot;:&quot;, &quot;;&quot;, &quot;…&quot; )
	With oTDF.Model
		.Height	= 30
		.Width	= 420
		.lbTDFMode.StringItemList = aModeList()
		.lbTDFPunctMarks.StringItemList = aPunctList()
		.cmdbtnTDFSave.Label = sTDFD.sWordSave
		.cmdbtnTDFSave.HelpText = sTDFD.sWordSaveHint
		.cmdbtnTDFEdit.Label = sTDFD.sListWordsEdit
		.cmdbtnTDFEdit.HelpText = sTDFD.sListWordsEditHint
	End With
	oTDF.getControl( &quot;lbTDFMode&quot; ).SelectItemPos( 0, True )
	oTDF.getControl( &quot;lbTDFPunctMarks&quot; ).SelectItemPos( 0, True )
	oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= False
	
	&apos; считаем положение диалога из файла настроек
	Dim nX As Integer, nY As Integer
	ReadOCRCorrectorSettings( sOCRTCSettingsFilename, nX, nY )
	oTDF.setPosSize( nX, nY, 30, 338, com.sun.star.awt.PosSize.POS )

	bFindEnd = False
	
	Dim oList : oList = createUnoListener( &quot;TextDefectFinderDlg_&quot;,&quot;com.sun.star.awt.XTopWindowListener&quot; )
	oTDF.addTopWindowListener( oList )

	oTDF.setVisible( True )  
	While Not bFindEnd
		Wait 200     
	Wend
	&apos; записываем настройки диалога
	SaveSettings( sOCRTCSettingsFilename, oTDF )
	oTDF.setVisible( False )
End Sub

Sub lbTDFModeChange()
	Select Case oTDF.GetControl( &quot;lbTDFMode&quot; ).SelectedItemPos
		Case 0 &apos; Слово с дефисом, тире или минусом
			oTDF.GetControl( &quot;cmdbtnTDFWorker&quot; ).Label = sTDFD.sDelete
			oTDF.Model.cmdbtnTDFWorker.HelpText = sTDFD.sWorkerHintDeleteMinus
			oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFSave&quot; ).Enable	= True
			oTDF.GetControl( &quot;cmdbtnTDFEdit&quot; ).Enable	= True
		Case 1 &apos; Слово с разорванным абзацем переносом (дефис, тире или минус)
			oTDF.GetControl( &quot;cmdbtnTDFWorker&quot; ).Label = sTDFD.sDelete
			oTDF.Model.cmdbtnTDFWorker.HelpText = sTDFD.sWorkerHintDeleteBreak
			oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFSave&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFEdit&quot; ).Enable	= False
		Case 2 &apos; Обрыв предложения на знаках препинания, кавычках и скобках
			oTDF.GetControl( &quot;cmdbtnTDFWorker&quot; ).Label = sTDFD.sProcess
			oTDF.Model.cmdbtnTDFWorker.HelpText = sTDFD.sWorkerHintDeleteBreakAddBlank
			oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFSave&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFEdit&quot; ).Enable	= False
		Case 3 &apos; Место с недостающим знаком препинания в конце абзаца (вероятно)
			oTDF.GetControl( &quot;cmdbtnTDFWorker&quot; ).Label = sTDFD.sInsert
			oTDF.Model.cmdbtnTDFWorker.HelpText = sTDFD.sWorkerHintInsertPunctMark
			oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= True
			oTDF.GetControl( &quot;cmdbtnTDFSave&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFEdit&quot; ).Enable	= False
		Case 4 &apos; Место с недостающим пробелом между словами (вероятно)
			oTDF.GetControl( &quot;cmdbtnTDFWorker&quot; ).Label = sTDFD.sInsert
			oTDF.Model.cmdbtnTDFWorker.HelpText = sTDFD.sWorkerHintInsertBlank
			oTDF.GetControl( &quot;lbTDFPunctMarks&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFSave&quot; ).Enable	= False
			oTDF.GetControl( &quot;cmdbtnTDFEdit&quot; ).Enable	= False
	End Select
End Sub

&apos; Поиск по заданному режиму
Sub TDFFind()
	Dim sTDF As tFindData
	sTDF = GetRegString( oTDF.getControl(&quot;lbTDFMode&quot;) )
	FindRegWord( sTDF.sRegString, sTDF.sMessage )
End Sub

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от режима поиска
Function GetRegString( oLB As Object ) As tFindData
	Dim sTDF As tFindData
	Select Case oLB.SelectedItemPos
		Case 0 &apos; Слово с дефисом, тире или минусом
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[-&quot; &amp; chr(8209) &amp; chr(8211) &amp; chr(8212) &amp; &quot;][:alnum:]+&quot;
			sTDF.sMessage = sTDFD.sSearchWordsHyphenDashMinus
		Case 1 &apos; Слово с разорванным абзацем переносом (дефис, тире или минус)
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[-&quot; &amp; chr(8209) &amp; chr(8211) &amp; chr(8212) &amp; &quot;]$&quot;
			sTDF.sMessage = sTDFD.sSearchWrdsBrokenCarry
		Case 2 &apos; Обрыв предложения на словах, знаках препинания, кавычках и скобках
			sTDF.sRegString = &quot;\&lt;[:alnum:]+$|\&lt;[:alnum:]+[)}\],»”\&quot;&quot;:;]$&quot;
			sTDF.sMessage = sTDFD.sSearchBreakageOffer
		Case 3 &apos; Место с недостающим знаком препинания в конце абзаца
			sTDF.sRegString = &quot;\&lt;[:alnum:]+$&quot;	&apos;&quot;\&lt;[:alnum:]+[)}\],»”\&quot;&quot;:;]$&quot;  &apos; 
			sTDF.sMessage = sTDFD.sSearchMissingPunctMarksEndPara
		Case 4 &apos; Место с недостающим пробелом между словами
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[)}\]({\[,.!?…»”\&quot;&quot;:;«“][:alnum:]+&quot;
			sTDF.sMessage = sTDFD.sSearchPlaceMissingBlank
		Case Else
			sTDF.sRegString = &quot;[:alnum:]+&quot;
			sTDF.sMessage = sTDFD.sSearchPWords
	End Select
	GetRegString = sTDF
End Function

&apos; ////////////////////////////////////////////////////////////////
&apos; Поиск регулярного выражения в тексте
Sub FindRegWord( sFind As String, sTitle As String )
	oDocControl = ThisComponent.getCurrentController()
	&apos; проверка, является ли объект, где производится поиск - текстом
	If Not IsSelTextRange( sTitle ) Then Exit Sub
		
	&apos; инициализация позиции курсора
	Dim ovCurs : ovCurs = oDocControl.getViewCursor() &apos; видимый курсор
	otxtCurs = ovCurs.Text.createTextCursor() 
	otxtCurs.gotoRange(ovCurs.getStart(), False)

	&apos; ищем заданное регулярное выражение
	FindRegInText( ovCurs, sFind, sTitle )
End Sub

&apos; ////////////////////////////////////////////////////////////////
&apos; проверка, является ли объект, где производится поиск - текстом
Function IsSelTextRange( sTitle As String ) As Boolean
	If oDocControl.getSelection().supportsService(&quot;com.sun.star.text.TextRanges&quot;) Then
		IsSelTextRange = True
	Else &apos; защита от поиска в выделенных врезках, ячейках таблицы, картинках...
		IsSelTextRange = False
		MsgBox sTDFD.sImpossibleToFind, 64, sTitle
	End If 
End Function

&apos; ////////////////////////////////////////////////////////////////
&apos; ищем заданный регекс
Sub FindRegInText( ovCurs, sFind As String, sTitle As String )
NextWord:
	If Not IsSelTextRange( sTitle ) Then Exit Sub
	otxtCurs = ovCurs.Text.createTextCursorByRange( ovCurs )
	&apos; поиск и обработка искомого слова
	If FindNextInText( sFind ) Then &apos; еще не дошли до конца документа
		oDocControl.Select( otxtCurs ) &apos; выделяем найденное
		&apos; проверяем, не соответствует ли найденное одному из запомненных дефисных слов
		Dim i As Integer
		For i=0 To UBound( asWords() )
			If StrComp( otxtCurs.String, asWords(i) )=0 Then GoTo NextWord		
		Next i
	Else &apos; конец документа
		If MsgBox( sTDFD.sToContinueSearch, 32 + 4 + 128, sTitle ) &lt;&gt; 6 Then Exit Sub
		oDocControl.Select( otxtCurs ) &apos; снимаем предыдущее выделяем и ищем заново с начала документа
		FindRegInText( ovCurs, sFind, sTitle ) &apos; рекурсия
	End If
End Sub

&apos; ////////////////////////////////////////////////////////////////
&apos; поиск следующего заданного регекса в документе
Function FindNextInText( sFind ) As Boolean
	Dim oDesc : oDesc = ThisComponent.createSearchDescriptor()
	oDesc.SearchRegularExpression = True
	oDesc.SearchString = sFind
	
	otxtCurs.collapseToEnd()
	Dim Found : Found = ThisComponent.findNext( otxtCurs.getStart(), oDesc )
	
	if IsNull( Found ) Then &apos; конец документа - ничего не нашли
		otxtCurs = ThisComponent.Text.createTextCursor() 
		otxtCurs.gotorange( ThisComponent.Text.getStart(), False )
		FindNextInText = False &apos; конец документа - ничего не нашли
		Exit Function
	End If

	otxtCurs = Found.Text.createTextCursor()
	otxtCurs.gotorange( Found.getStart(), False )
	otxtCurs.gotorange( Found.getEnd(), True )
	
	FindNextInText = True &apos; нашли искомое регулярное выражение
End Function

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Function ReadOCRCorrectorSettings( sOCRTCSettingsFilename As String, nX As Integer, nY As Integer ) As Boolean
	&apos; Читаем настройки очистки текста и задаем значения контролам формы
	On Error Resume Next
	If FileExists( sOCRTCSettingsFilename ) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object
		
		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sOCRTCSettingsFilename) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; &quot;&quot; Then
				&apos; Устанавливаем данные OCR корректора текста
				Dim sSetting() As String
				sSetting = Split(sLine, &quot;=&quot;)
				If sSetting(0) = &quot;X&quot; Then
					nX = sSetting(1)
				ElseIf sSetting(0) = &quot;Y&quot; Then
					nY = sSetting(1)
				Else
					Dim oCtrl As Object : oCtrl = oTDF.GetControl( sSetting(0) )
					If Not IsNull( oCtrl ) Then
						If oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
							Dim oLB As Object : oLB = oTDF.getControl( sSetting(0) )
							oLB.SelectItemPos( sSetting(1), True )
						End If
					End If
				End If
			End If
		Loop
		oTIS.closeInput()
		ReadOCRCorrectorSettings = True
	Else
		ReadOCRCorrectorSettings = False
	End If
End Function

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; 													функции обработки найденного
&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&apos; для обработки найденного - регулярноt выражениt
Function GetRegWorkerString() As String
	Dim oLB	As Object : oLB	= oTDF.getControl( &quot;lbTDFMode&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; Слово с дефисом, тире или минусом
			GetRegWorkerString = &quot;[-&quot; &amp; chr(8209) &amp; chr(8211) &amp; chr(8212) &amp; &quot;]&quot;
		Case 1 &apos; Слово с разорванным абзацем переносом (дефис, тире или минус)
			GetRegWorkerString = &quot;[-&quot; &amp; chr(8209) &amp; chr(8211) &amp; chr(8212) &amp; &quot;]$&quot;
		Case 2 &apos; Обрыв предложения на знаках препинания, кавычках и скобках
			GetRegWorkerString = &quot;\&lt;[:alnum:]+$|[)}\],»”\&quot;&quot;:;]$&quot;
		Case 3 &apos; Место с недостающим знаком препинания в конце абзаца (вероятно)
			GetRegWorkerString = &quot;$&quot;
		Case 4 &apos; Место с недостающим пробелом между словами (вероятно)
			GetRegWorkerString = &quot;[({\[\&quot;&quot;«“]&quot; &amp; &quot;next&quot; &amp; &quot;[)}\],.!?…»”\&quot;&quot;:;]&quot;
	End Select
End Function

&apos; обработка найденного
Sub WorkerOfSearch()
	Dim oSels As Object : oSels = ThisComponent.getCurrentSelection() &apos; все выделения текста
	If oSels.getCount() &gt; 1 Then Exit Sub
	
	Dim oSel As Object : oSel = oSels.getByIndex( 0 )
	If oSel.getString() = &quot;&quot; Then Exit Sub

	Searcher( ThisComponent, GetLeftMostCursor( oSel ), GetRegWorkerString() )
End Sub

Sub Searcher( oDoc As Object, oCurs As Object, sReg As String )
	If IsNull(oCurs) Or IsNull( oDoc ) Then Exit Sub
	
	oCurs.goRight( 0, False )
	
	Dim oLB	As Object : oLB	= oTDF.getControl( &quot;lbTDFMode&quot; )
	If oLB.SelectedItemPos = 4 Then
		Dim aReg() As String : aReg = Split( sReg, &quot;next&quot; )
		Dim i As Integer
		For i = 0 To 1
			If Finder( oDoc, oCurs, aReg(i), i ) Then Exit For &apos; Не обрабатываем недостающий пробел справа от знаков препинания, т.к. нашли слева
		Next i
	Else
		Finder( oDoc, oCurs, sReg, -1 )
	End If
End Sub

Function Finder( oDoc As Object, oCurs As Object, sReg As String, iRight As Integer ) As Boolean
	Finder = False
	Dim oViewCursor	As Object	: oViewCursor	= oDoc.getCurrentController().getViewCursor()
	Dim vSearch		As Variant	: vSearch		= oDoc.createSearchDescriptor()
	With vSearch
		.SearchString				= sReg
		.SearchCaseSensitive		= False
		.SearchRegularExpression	= True
	End With

	Dim vFound As Variant : vFound = oDoc.findNext( oCurs, vSearch )
	If IsNull( vFound ) Then Exit Function
	If Not IsEmpty( vFound.TextTable ) Then &apos; таблица
		&apos; обрабатываем ячейки  таблицы
		Dim oTable			As Object	: oTable		= vFound.TextTable
		Dim aCellNames()	As String	: aCellNames	= oTable.getCellNames()
		Dim oCell 			As Object	: oCell			= oTable.getCellByName( aCellNames( 0 ) )
		If Not IsNull( vFound ) Then &apos; нашли
			&apos; выделяем найденное и обрабатываем
			oViewCursor.gotoRange( vFound, False )
			ProcessingWorker( oViewCursor, iRight )
			Finder = True
		End If
	Else &apos; просто текст, &apos; текстовая врезка или текст сноски
		&apos; выделяем найденное и обрабатываем
		oViewCursor.gotoRange( vFound, False )
		ProcessingWorker( oViewCursor, iRight )
		Finder = True
	End if
End Function

&apos; Обработчик найденного
Sub ProcessingWorker( oViewCursor As Object, iRight As Integer )
	Dim oLB As Object : oLB = oTDF.getControl( &quot;lbTDFMode&quot; )
	Select Case oLB.SelectedItemPos
		Case 0 &apos; Слово с дефисом, тире или минусом
			&apos; удаляем найденный символ
			_UnoDelete() 
		Case 1 &apos; Слово с разорванным абзацем переносом (дефис, тире или минус)
			&apos; удаляем перенос и символ абзаца
			_UnoDelete() : _UnoDelete()
		Case 2 &apos; Обрыв предложения на знаках препинания, кавычках и скобках
			&apos; снимаем выделение - переход в конец оборванной строки
			oViewCursor.gotoEndOfLine( False )
			&apos; удаляем символ абзаца
			_UnoDelete()
			&apos; вставляем пробел
			oViewCursor.setString( &quot; &quot; )
			&apos; снимаем выделение - вправо
			oViewCursor.collapseToEnd()
		Case 3 &apos; Место с недостающим знаком препинания в конце абзаца (вероятно)
			&apos; снимаем выделение
			oViewCursor.collapseToStart()
			&apos; вставляем знак препинания из выпадающего списка
			oViewCursor.setString( oTDF.getControl( &quot;lbTDFPunctMarks&quot; ).SelectedItem )
			&apos; снимаем выделение - вправо
			&apos;oViewCursor.collapseToEnd()
		Case 4 &apos; Место с недостающим пробелом между словами (вероятно)
			If iRight = 0 Then &apos; вставка пробела СЛЕВА от найденного
				&apos; снимаем выделение - вправо
				oViewCursor.collapseToStart()
			ElseIf iRight = 1 Then &apos; вставка пробела СПРАВА от найденного
				&apos; снимаем выделение - вправо
				oViewCursor.collapseToEnd()
			End If
			&apos; вставляем пробел
			oViewCursor.setString( &quot; &quot; )
			&apos; снимаем выделение - вправо
			oViewCursor.collapseToEnd()
	End Select
End Sub

&apos; Запоминаем дефисное слово
Sub cmdbtnTDFSaveClick()
	oDocControl = ThisComponent.getCurrentController()
	Dim ovCurs : ovCurs = oDocControl.getViewCursor() &apos; видимый курсор
	otxtCurs = ovCurs.Text.createTextCursorByRange( ovCurs )
	Dim s As String : s = Trim( otxtCurs.String )
	If s = &quot;&quot; Then
		MsgBox sTDFD.sNotSelectedWord &amp; chr(10) &amp; sTDFD.sWordNotSave, 64, oTDF.Title
		Exit Sub
	End If
	
	&apos; проверка, не выделено ли пользователем несколько абзацев
	Dim asPara() As String
	asPara() = Split( s, chr(10) )
	If UBound( asPara() ) &gt; 0 Then
		MsgBox sTDFD.sSelectedMorePara &amp; chr(10) &amp; sTDFD.sWordNotSave, 64, oTDF.Title
		Exit Sub
	End If
	
	&apos; проверка на принадлежность к словам с дефисами, тире, минусами
	If InStr( s, &quot;-&quot; ) &lt;&gt; 0 Or InStr( s, chr(8209) ) &lt;&gt; 0 Or InStr( s, chr(8211) ) &lt;&gt; 0 Or InStr( s, chr(8212) ) &lt;&gt; 0 Then
		&apos; проверка, нет ли такого же слова в массиве (зачем нам одинаковые слова?)
		Dim l As Long
		For l=0 To UBound( asWords() )
			If StrComp( s, asWords(l) ) = 0 Then
				MsgBox sTDFD.sExsistSelectedWordInList &amp; chr(10) &amp; sTDFD.sWordNotSave, 64, oTDF.Title	
				Exit Sub
			End If
		Next l
		AddNewItemToArray1( asWords(), s )

		&apos; упорядочиваем элементы - признак конца должен быть в конце
		Dim asTemp() As String
		Dim sOEF As String : sOEF = &quot;end of file&quot;
		For l=0 To UBound( asWords() )
			If Trim( asWords(l) ) &lt;&gt; &quot;&quot; Then
				If Trim( asWords(l) ) &lt;&gt; chr(10) Then
					If Trim( asWords(l) ) &lt;&gt; chr(13) Then
						If InStr( asWords(l), sOEF ) = 0 Then
							AddNewItemToArray1( asTemp(), asWords(l) )
						End If
					End If
				End If
			End If
		Next l
		AddNewItemToArray1( asTemp(), sOEF )
		ReDim asWords() As String
		asWords() = asTemp()
	Else
		MsgBox sTDFD.sNotDefisInSelectedWord &amp; chr(10) &amp; sTDFD.sWordNotSave, 64, oTDF.Title	
		Exit Sub
	End If
End Sub

&apos; правка списка дефисных слов
Sub cmdbtnTDFEditClick()
	If FileExists( getUserPath() &amp; sWordsDefisListFile ) Then
		FileExecute( getUserPath() &amp; sWordsDefisListFile )
	Else
		MsgBox sTDFD.sWordDefisFileNotExists, 64, oTDF.Title	
	End If	
End Sub

</script:module>