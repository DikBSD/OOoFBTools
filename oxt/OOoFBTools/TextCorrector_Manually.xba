<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TextCorrector_Manually" script:language="StarBasic">REM  *****  BASIC  *****
&apos; ////////////////////////////////////////////////////////////////
&apos; модуль инструментов:
&apos; 1. поиск в документе Слов с дефисом, тире или минусом
&apos; 2. поиск в документе Слов с разорванным абзацем переносом (дефис, тире или минус)
&apos; 3. поиск в документе Обрыва предложения на словах, знаках препинания, кавычках и скобках
&apos; 4. поиск в документе Места с недостающим пробелом между словами
&apos; ////////////////////////////////////////////////////////////////
option explicit

Type tFindData
	sRegString As String
	sMessage As String
End Type

Private oTDF As Object
Private oDocController As Object
Private bFindEnd As Boolean &apos; флаг конца поиска - закрытия диалога (True)

Private oDocControl, otxtCurs &apos; текстовый курсор

&apos; ///////////////////////////////////////////////////////////////////////////////////////////////////////
Sub TextDefectFinderDlg_windowActivated(oEv)
	oDocController = ThisComponent.getCurrentController()
End Sub

Sub TextDefectFinderDlg_windowDeactivated(oEv)
End Sub

Sub TextDefectFinderDlg_windowOpened(oEv)
End Sub

Sub TextDefectFinderDlg_windowClosing(oEv)
	bFindEnd = True
End Sub

Sub TextDefectFinderDlg_windowClosed(oEv)
End Sub

Sub TextDefectFinderDlg_windowMinimized(oEv)
End Sub

Sub TextDefectFinderDlg_windowNormalized(oEv)
End Sub

Sub TextDefectFinderDlg_disposing(oEv)
End Sub

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////
&apos; инициализация и запуск диалога поиска
Sub TextDefectFinderStart
	&apos; файл начтроек Корректора Текста
	Dim sOCRTCSettingsFilename As String : sOCRTCSettingsFilename = getUserPath() &amp; &quot;/OOoFBTools/ocr_errors_corrector.txt&quot;
	Dim aModeList() As String : aModeList() = Array(&quot;Слово с дефисом, тире или минусом&quot;, _
													&quot;Слово с разорванным абзацем переносом (дефис, тире или минус)&quot;, _
													&quot;Обрыв предложения на словах, знаках препинания, кавычках и скобках&quot;, _
													&quot;Место с недостающим пробелом между словами (вероятно)&quot;)
	
	GlobalScope.BasicLibraries.LoadLibrary( &quot;Tools&quot; )   
	oTDF = LoadDialog( &quot;OOoFBTools&quot;, &quot;TextDefectFinderDlg&quot; )
	
	With oTDF.Model
		.Title	= &quot;Поиск OCR ошибок в тексте&quot;
		.Height	= 30
		.Width	= 272
		.lbTDFMode.StringItemList = aModeList()
	End With
	oTDF.getControl( &quot;lbTDFMode&quot; ).SelectItemPos( 0, True )
	
	&apos; считаем положение диалога из файла настроек
	Dim nX As Integer, nY As Integer
	ReadOCRCorrectorSettings( sOCRTCSettingsFilename, nX, nY )
	oTDF.setPosSize( nX, nY, 30, 272, com.sun.star.awt.PosSize.POS )

	bFindEnd = False
	
	Dim oList : oList = createUnoListener( &quot;TextDefectFinderDlg_&quot;,&quot;com.sun.star.awt.XTopWindowListener&quot; )
	oTDF.addTopWindowListener( oList )

	oTDF.setVisible( True )  
	While Not bFindEnd
		Wait 200     
	Wend
	&apos; записываем настройки диалога
	SaveSettings( sOCRTCSettingsFilename, oTDF )
	oTDF.setVisible( False )
End Sub

&apos; Поиск по заданному режиму
Sub TDFFind()
	Dim sTDF As tFindData
	sTDF = GetRegString( oTDF.getControl(&quot;lbTDFMode&quot;) )
	FindRegWord( sTDF.sRegString, sTDF.sMessage )
End Sub

&apos; возвращает строку с регулярным выражением для поиска, в зависимости от режима поиска
Function GetRegString( oLB As Object ) As tFindData
	Dim sTDF As tFindData
	Select Case oLB.SelectedItemPos
		Case 0 &apos; Слово с дефисом, тире или минусом
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;][:alnum:]+&quot;
			sTDF.sMessage = &quot;Поиск слов с дефисом, тире или минусом&quot;
		Case 1 &apos; Слово с разорванным абзацем переносом (дефис, тире или минус)
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[-&quot; &amp; chr(8211) &amp; chr(8212) &amp; &quot;]$&quot;
			sTDF.sMessage = &quot;Поиск слов с разорванным переносом (дефис, тире или минус)&quot;
		Case 2 &apos; Обрыв предложения на словах, знаках препинания, кавычках и скобках
			sTDF.sRegString = &quot;\&lt;[:alnum:]+$|\&lt;[:alnum:]+[)}\],»”\&quot;&quot;:;]$&quot;
			sTDF.sMessage = &quot;Поиск обрыва предложения на словах, знаках препинания, кавычках и скобках&quot;
		Case 3 &apos; Место с недостающим пробелом между словами
			sTDF.sRegString = &quot;\&lt;[:alnum:]+[)}\],.!?…»”\&quot;&quot;:;][:alnum:]+&quot;
			sTDF.sMessage = &quot;Поиск мест с недостающим пробелом между словами&quot;
		Case Else
			sTDF.sRegString = &quot;[:alnum:]+&quot;
			sTDF.sMessage = &quot;Поиск слов&quot;
	End Select
	GetRegString = sTDF
End Function

&apos; ////////////////////////////////////////////////////////////////
&apos; Поиск регулярного выражения в тексте
Sub FindRegWord( sFind As String, sTitle As String )
	oDocControl = ThisComponent.getCurrentController()
	&apos; проверка, является ли объект, где производится поиск - текстом
	If Not IsSelTextRange( sTitle ) Then Exit Sub
		
	&apos; инициализация позиции курсора
	Dim ovCurs &apos; видимый курсор
	ovCurs = oDocControl.getViewCursor()
	otxtCurs = ovCurs.Text.createTextCursor() 
	otxtCurs.gotoRange(ovCurs.getStart(), False)

	&apos; ищем заданное регулярное выражение
	FindRegInText( ovCurs, sFind, sTitle )
End Sub

&apos; ////////////////////////////////////////////////////////////////
&apos; проверка, является ли объект, где производится поиск - текстом
Function IsSelTextRange( sTitle As String ) As Boolean
	If oDocControl.getSelection().supportsService(&quot;com.sun.star.text.TextRanges&quot;) Then
		IsSelTextRange = True
	Else &apos; защита от поиска в выделенных врезках, ячейках таблицы, картинках...
		IsSelTextRange = False
		MsgBox &quot;Невозможно найти слово в выделенном объекте.&quot;, 64, sTitle
	End If 
End Function

&apos; ////////////////////////////////////////////////////////////////
&apos; ищем заданный регекс
Sub FindRegInText( ovCurs, sFind As String, sTitle As String )
	If Not IsSelTextRange( sTitle ) Then Exit Sub
	otxtCurs = ovCurs.Text.createTextCursorByRange(ovCurs)
	&apos; поиск и обработка искомого слова
	If FindNextInText( sFind ) Then &apos; еще не дошли до конца документа
		oDocControl.Select(otxtCurs) &apos; выделяем найденное
	Else &apos; конец документа
		If MsgBox( &quot;Достигнут конец документа.&quot; &amp; chr(10) &amp; &quot;Следущее слово не найдено.&quot; &amp; chr(10) &amp; chr(10) &amp; _
					&quot;Продолжить поиск с начала?&quot;, 32 + 4 + 128, sTitle ) &lt;&gt; 6 Then Exit Sub
		oDocControl.Select(otxtCurs) &apos; снимаем предыдущее выделяем и ищем заново с начала документа
		FindRegInText( ovCurs, sFind, sTitle ) &apos; рекурсия
	End If
End Sub

&apos; ////////////////////////////////////////////////////////////////
&apos; поиск следующего заданного регекса в документе
Function FindNextInText( sFind ) As Boolean
	Dim oDesc, Found
	oDesc = ThisComponent.createSearchDescriptor()
	oDesc.SearchRegularExpression = True
	oDesc.SearchString = sFind
	
	otxtCurs.collapseToEnd  
	Found = ThisComponent.findNext(otxtCurs.getStart(), oDesc)
	
	if IsNull(Found) Then &apos; конец документа - ничего не нашли
		otxtCurs = ThisComponent.Text.createTextCursor() 
		otxtCurs.gotorange(ThisComponent.Text.getStart(), False)
		FindNextInText = False &apos; конец документа - ничего не нашли
		Exit Function
	End If

	otxtCurs = Found.Text.createTextCursor()
	otxtCurs.gotorange(Found.getStart(), False)
	otxtCurs.gotorange(Found.getEnd(), True)

	FindNextInText = True &apos; нашли искомое регулярное выражение
End Function

&apos; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Function ReadOCRCorrectorSettings( sOCRTCSettingsFilename As String, nX As Integer, nY As Integer ) As Boolean
	&apos; Читаем настройки очистки текста и задаем значения контролам формы
	On Error Resume Next
	If FileExists(sOCRTCSettingsFilename) Then
		Dim sLine As String
		Dim oSFA As Object, oFS As Object, oTIS As Object
		
		oSFA = createUnoService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oFS = oSFA.openFileRead ( ConvertToURL (sOCRTCSettingsFilename) )
		oTIS = createUnoService (&quot;com.sun.star.io.TextInputStream&quot;)
		oTIS.setInputStream (oFS)
		Do While ( NOT oTIS.isEOF() )
			sLine = oTIS.readLine()
			If sLine &lt;&gt; &quot;&quot; Then
				&apos; Устанавливаем данные OCR корректора текста
				Dim sSetting() As String
				sSetting = Split(sLine, &quot;=&quot;)
				If sSetting(0) = &quot;X&quot; Then
					nX = sSetting(1)
				ElseIf sSetting(0) = &quot;Y&quot; Then
					nY = sSetting(1)
				Else
					Dim oCtrl As Object : oCtrl = oTDF.GetControl(sSetting(0))
					If Not IsNull( oCtrl ) Then
						If oCtrl.getImplementationName() = &quot;stardiv.Toolkit.UnoListBoxControl&quot; Then
							Dim oLB As Object : oLB = oTDF.getControl(sSetting(0))
							oLB.SelectItemPos(sSetting(1), True)
						End If
					End If
				End If
			End If
		Loop
		oTIS.closeInput()
		ReadOCRCorrectorSettings = True
	Else
		ReadOCRCorrectorSettings = False
	End If
End Function

</script:module>