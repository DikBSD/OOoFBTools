<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Parser" script:language="StarBasic">REM  *****  BASIC  *****
Dim lCurrentBodyPara As Long

Function SaveBookTitle
&apos; формируем заглавие книги
	oTextOutputStream.writeString(&quot;&lt;title&gt;&quot; &amp; chr(10))
	While oCursor.ParaStyleName = &quot;Book Author&quot; OR oCursor.ParaStyleName = &quot;Book Title&quot;
		oCursor.gotoEndOfParagraph(true)
		oTextOutputStream.writeString(&quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10))
		oCursor.gotoNextParagraph(False)
		PrintStatus(count) &apos; Статусбар
	Wend
	oTextOutputStream.writeString(&quot;&lt;/title&gt;&quot; &amp; chr(10))
End Function
	
Function DocumentParser
	lCurrentBodyPara = 0
	Do
		oCursor.gotoEndOfParagraph(True)
		ParseParagraph
		PrintStatus(count) &apos; Статусбар
	Loop While oCursor.gotoNextParagraph(False)
End Function

Function ParseParagraph
	Select Case oCursor.ParaStyleName
		Case &quot;Poem Title&quot;
			MakePoemTitle
		Case &quot;Poem&quot;
			MakePoem
		Case &quot;Epigraph&quot;
			MakeEpigraph
		Case &quot;Cite&quot;
			MakeCite
		Case &quot;Annotation&quot;
			MakeAnnotation
		Case &quot;SubTitle&quot;
			MakeSubtitle
		Case &quot;Level 1&quot;
			MakeSection(&quot;Level 1&quot;)
		Case &quot;Level 2&quot;
			MakeSection(&quot;Level 2&quot;)
		Case &quot;Level 3&quot;
			MakeSection(&quot;Level 3&quot;)
		Case &quot;Level 4&quot;
			MakeSection(&quot;Level 4&quot;)
		Case &quot;Level 5&quot;
			MakeSection(&quot;Level 5&quot;)
		Case &quot;Level 6&quot;
			MakeSection(&quot;Level 6&quot;)
		Case &quot;Level 7&quot;
			MakeSection(&quot;Level 7&quot;)
		Case &quot;Level 8&quot;
			MakeSection(&quot;Level 8&quot;)
		Case &quot;Level 9&quot;
			MakeSection(&quot;Level 9&quot;)
		Case &quot;Level 10&quot;
			MakeSection(&quot;Level 10&quot;)
		Case Else &apos; просто параграф
			Dim Para As String
			Para = MakeParag
			If Para &lt;&gt; &quot;&quot; Then	&apos; параграф есть
				AddBodyArray(&quot;&lt;p&gt;&quot; &amp; Para &amp; &quot;&lt;/p&gt;&quot;, &quot;Para&quot;)
			Else	&apos; &lt;empty-line/&gt;
				If bDelEL = False Then
					AddBodyArray(&quot;&lt;empty-line/&gt;&quot;, &quot;&quot;)
				End If
			End If
	End Select
End Function

Function MakeParag As String
	Dim oEnum As Object, oSecEnum As Object
	Dim oText As Object
	Dim oTextPortion As Object
	Dim sParag As String
	Dim oFootnoteCursor As Object
	If oCursor.String = &quot;&quot; Then	&apos; &lt;empty-line/&gt;
		MakeParag = oCursor.String
		Exit Function
	End If
	oEnum = oCursor.createEnumeration
		While oEnum.hasMoreElements
			oText = oEnum.nextElement
			oSecEnum = oText.createEnumeration
			While oSecEnum.hasMoreElements
				oTextPortion = oSecEnum.nextElement	
				&apos; отлов сносок - сначала, иначе не отлавливаются сноски в форматных текстах!!!
				If oTextPortion.TextPortionType = &quot;Footnote&quot; Then
					Static i As Integer
					i = iFootnoteCount + 1
					If bFootnoteSpace = True Then
						sParag = sParag &amp; &quot; &quot;
					End If
					sParag = sParag &amp; &quot;&lt;a l:href=&quot;&quot;#n&quot; &amp; i &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; sFootnoteLeft &amp; i &amp; sFootnoteRight &amp; &quot;&lt;/a&gt;&quot;
					
					oFootnoteCursor = oTextPortion.Footnote.createTextCursor
					oFootnoteCursor.gotoStart(False)
					oFootnoteCursor.gotoEndOfParagraph(True)					
					ReDim Preserve sFootnoteText(iFootnoteCount) As String
					
					If bStyleFootnote = True Then &apos; форматирование текста сноски по стилям
						FormatFootnoteText(oFootnoteCursor)
					Else &apos; не применяем стили к тексту сносок
						If bCorrectPara = True Then
							sFootnoteText(iFootnoteCount) = CorrectPara(oFootnoteCursor.String)
						Else
							sFootnoteText(iFootnoteCount) = oFootnoteCursor.String
						End If
					End If
					iFootnoteCount = iFootnoteCount + 1
				ElseIf oTextPortion.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;a l:href=&quot;&quot;&quot; &amp; oTextPortion.HyperLinkURL &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/a&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;a l:href=&quot;&quot;&quot; &amp; oTextPortion.HyperLinkURL &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/a&gt;&quot;
					End If
				ElseIf oTextPortion.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;strong&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/strong&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;strong&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/strong&gt;&quot;
					End If
				ElseIf oTextPortion.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;emphasis&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/emphasis&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;emphasis&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/emphasis&gt;&quot;
					End If
				ElseIf oTextPortion.CharEscapement &gt; 0 Then
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;sup&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/sup&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;sup&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/sup&gt;&quot;
					End If
				ElseIf oTextPortion.CharEscapement &lt; 0 Then
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;sub&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/sub&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;sub&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/sub&gt;&quot;
					End If
				ElseIf oTextPortion.CharShadowed = True OR oTextPortion.CharContoured = True Then &apos; тень или контур
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;code&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/code&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;code&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/code&gt;&quot;
					End If
				ElseIf oTextPortion.CharStrikeout &gt; 0 Then
					If bCorrectPara = True Then
						sParag = sParag &amp; &quot;&lt;strikethrough&gt;&quot; &amp; CorrectPara(oTextPortion.String) &amp; &quot;&lt;/strikethrough&gt;&quot;
					Else
						sParag = sParag &amp; &quot;&lt;strikethrough&gt;&quot; &amp; oTextPortion.String &amp; &quot;&lt;/strikethrough&gt;&quot;
					End If
				Else
					If bCorrectPara = True Then
						sParag = sParag &amp; CorrectPara(oTextPortion.String)
					Else
						sParag = sParag &amp; oTextPortion.String
					End If
				End If
			Wend
		Wend
	MakeParag = RTrim(sParag)
End Function

Function FormatFootnoteText(oFootnoteCursor)
	&apos; форматирование текста сноски по стилям
	Dim oEnumF As Object, oSecEnumF As Object, oTextF As Object, oTextPortionF As Object
	Dim sParagF As String
	oEnumF = oFootnoteCursor.createEnumeration
	While oEnumF.hasMoreElements
		sParagF = &quot;&quot;
		oTextF = oEnumF.nextElement
		oSecEnumF = oTextF.createEnumeration
		While oSecEnumF.hasMoreElements
			oTextPortionF = oSecEnumF.nextElement
			If oTextPortionF.HyperLinkURL &lt;&gt; &quot;&quot; Then &apos; гиперссылка
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;a l:href=&quot;&quot;&quot; &amp; oTextPortionF.HyperLinkURL &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/a&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;a l:href=&quot;&quot;&quot; &amp; oTextPortionF.HyperLinkURL &amp; &quot;&quot;&quot; type=&quot;&quot;note&quot;&quot;&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/a&gt;&quot;
				End If
			ElseIf oTextPortionF.CharWeight = com.sun.star.awt.FontWeight.BOLD Then
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;strong&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/strong&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;strong&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/strong&gt;&quot;
				End If
			ElseIf oTextPortionF.CharPosture = com.sun.star.awt.FontSlant.ITALIC Then
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;emphasis&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/emphasis&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;emphasis&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/emphasis&gt;&quot;
				End If
			ElseIf oTextPortionF.CharEscapement &gt; 0 Then
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;sup&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/sup&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;sup&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/sup&gt;&quot;
				End If
			ElseIf oTextPortionF.CharEscapement &lt; 0 Then
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;sub&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/sub&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;sub&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/sub&gt;&quot;
				End If
			ElseIf oTextPortionF.CharShadowed = True OR oTextPortionF.CharContoured = True Then &apos; тень или контур
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;code&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/code&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;code&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/code&gt;&quot;
				End If
			ElseIf oTextPortionF.CharStrikeout &gt; 0 Then
				If bCorrectPara = True Then
					sParagF = sParagF &amp; &quot;&lt;strikethrough&gt;&quot; &amp; CorrectPara(oTextPortionF.String) &amp; &quot;&lt;/strikethrough&gt;&quot;
				Else
					sParagF = sParagF &amp; &quot;&lt;strikethrough&gt;&quot; &amp; oTextPortionF.String &amp; &quot;&lt;/strikethrough&gt;&quot;
				End If
			Else
				If bCorrectPara = True Then
					sParagF = sParagF &amp; CorrectPara(oTextPortionF.String)
				Else
					sParagF = sParagF &amp; oTextPortionF.String
				End If
			End If
		Wend
	Wend
	&apos; теперь отфолрматированный текст сноски сохраняем в массив
	sFootnoteText(iFootnoteCount) = sParagF
End Function

Function CorrectPara(sPara As String) As String
	&apos; корректировка абзаца - отлов символов &lt;,&gt;,&amp;
	Dim SA() As String
	Dim i As Integer, iLen As Integer
	Dim newPara As String, sChar As String
	iLen = Len(sPara)&apos; длина анализируемой строки
	For i = 1 To iLen
		sChar = Mid(sPara, i, 1)
		If sChar = &quot;&amp;&quot; Then
			newPara = newPara + &quot;&amp;amp;&quot;
		ElseIf sChar = &quot;&lt;&quot; Then
			newPara = newPara + &quot;&amp;lt;&quot;
		ElseIf sChar = &quot;&gt;&quot; Then
			newPara = newPara + &quot;&amp;gt;&quot;
		Else
			newPara = newPara + sChar
		End If
	Next i
	CorrectPara = newPara
End Function

Function MakePoemTitle
	sPoemTitle = sPoemTitle &amp; &quot;&lt;poem&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
	oCursor.gotoPreviousParagraph(False)
	If bMergePoemTitle = True Then &apos; собираем Заголовки стиха, идущие один за другим в одну строку
		sPoemTitle = sPoemTitle &amp; &quot;&lt;p&gt;&quot;
		While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Poem Title&quot;)
			sPoemTitle = sPoemTitle &amp; MakeParag &amp; &quot; &quot;
		Wend
		sPoemTitle = Mid(sPoemTitle, 1, Len(sPoemTitle)-1)
		sPoemTitle = sPoemTitle &amp; &quot;&lt;/p&gt;&quot;
	Else &apos; Заголовки стиха не будут собираться в одну строку, а будут один под другим
		While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Poem Title&quot;)
			sPoemTitle = sPoemTitle &amp; &quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
		Wend
	End If
	&apos; проверяем следующий абзац - если не заголовок поэмы - назад, чтобы потом его обработать
	If oCursor.ParaStyleName() &lt;&gt; &quot;Poem Title&quot; Then
		oCursor.gotoPreviousParagraph(False)
	End If
	sPoemTitle = sPoemTitle &amp; &quot;&lt;/title&gt;&quot; &amp; chr(10)
End Function

Function MakePoem
	Dim sPoem As String, bEndPar As Boolean
	If sPoemTitle = &quot;&quot; Then	&apos; стихи без заголовка
		sPoem = &quot;&lt;poem&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
	Else 
		sPoem = sPoemTitle
	End If
	oCursor.gotoPreviousParagraph(False)
	While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Poem&quot;)
		If oCursor.String = &quot;&quot; Then
			sPoem = sPoem &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10) &amp; &quot;&lt;stanza&gt;&quot; &amp; chr(10)
		Else
			sPoem = sPoem &amp; &quot;&lt;v&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/v&gt;&quot; &amp; chr(10)
		End If
	Wend
	sPoem = sPoem &amp; &quot;&lt;/stanza&gt;&quot; &amp; chr(10
	If oCursor.ParaStyleName() = &quot;Poem Author&quot; Then
		oCursor.gotoPreviousParagraph(False)
		If bMergePoemAuthors = True Then &apos; собираем Авторов стиха, идущих один за другим в одну строку
			sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot;
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Poem Author&quot;)
				sPoem = sPoem &amp; MakeParag &amp; &quot;, &quot;
			Wend
			sPoem = Mid(sPoem, 1, Len(sPoem)-2)
			sPoem = sPoem &amp; &quot;&lt;/text-author&gt;&quot;
		Else &apos; Авторы стиха не будут собираться в одну строку, а будут один под другим
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Poem Author&quot;)
				sPoem = sPoem &amp; &quot;&lt;text-author&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
			Wend
		End If
		&apos; проверяем следующий абзац - если не автор поэмы - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Poem Author&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	Else
		&apos; проверяем следующий абзац - если не поэма - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Poem&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	End If
	sPoem = sPoem &amp; &quot;&lt;/poem&gt;&quot;
	AddBodyArray(sPoem, &quot;Poem&quot;)
	sPoemTitle = &quot;&quot;
End Function

Function MakeEpigraph
	Dim sEpig As String, bEndPar As Boolean
	oCursor.gotoPreviousParagraph(False)
	sEpig = sEpig &amp; &quot;&lt;epigraph&gt;&quot; &amp; chr(10)
	While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Epigraph&quot;)
		sEpig = sEpig &amp; &quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
	Wend
	If oCursor.ParaStyleName() = &quot;Epigraph Author&quot; Then
		oCursor.gotoPreviousParagraph(False)
		If bMergeEpigraphAuthors = True Then &apos; собираем Авторов епиграфа, идущих один за другим в одну строку
			sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot;
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Epigraph Author&quot;)
				sEpig = sEpig &amp; MakeParag &amp; &quot;, &quot;
			Wend
			sEpig = Mid(sEpig, 1, Len(sEpig)-2)
			sEpig = sEpig &amp; &quot;&lt;/text-author&gt;&quot;
		Else &apos; Авторы епиграфа не будут собираться в одну строку, а будут один под другим
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Epigraph Author&quot;)
				sEpig = sEpig &amp; &quot;&lt;text-author&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
			Wend
		End If
		&apos; проверяем следующий абзац - если не автор эпиграфа - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Epigraph Author&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	Else
		&apos; проверяем следующий абзац - если не эпиграф - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Epigraph&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	End If
	sEpig = sEpig &amp; &quot;&lt;/epigraph&gt;&quot;
	AddBodyArray(sEpig, &quot;Epigraph&quot;)

End Function

Function MakeCite
	Dim sCite As String, bEndPar As Boolean
	oCursor.gotoPreviousParagraph(False)
	sCite = &quot;&lt;cite&gt;&quot; &amp; chr(10)
	While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Cite&quot;)
		sCite = sCite &amp; &quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
	Wend
	If oCursor.ParaStyleName() = &quot;Cite Author&quot; Then
		oCursor.gotoPreviousParagraph(False)
		If bMergeCiteAuthors = True Then &apos; собираем Авторов цитаты, идущих один за другим в одну строку
			sCite = sCite &amp; &quot;&lt;text-author&gt;&quot;
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Cite Author&quot;)
				sCite = sCite &amp; MakeParag &amp; &quot;, &quot;
			Wend
			sCite = Mid(sCite, 1, Len(sCite)-2)
			sCite = sCite &amp; &quot;&lt;/text-author&gt;&quot;
		Else &apos; Авторы цитаты не будут собираться в одну строку, а будут один под другим
			While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Cite Author&quot;)
				sCite = sCite &amp; &quot;&lt;text-author&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/text-author&gt;&quot; &amp; chr(10)
			Wend
		End If
		&apos; проверяем следующий абзац - если не автор цитаты - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Cite Author&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	Else &apos; когда цитаты без автора
		&apos; проверяем следующий абзац - если не цитата - назад, чтобы потом его обработать
		If oCursor.ParaStyleName() &lt;&gt; &quot;Cite&quot; Then
			oCursor.gotoPreviousParagraph(False)
		End If
	End If
	sCite = sCite &amp; &quot;&lt;/cite&gt;&quot;
	AddBodyArray(sCite, &quot;Cite&quot;)
End Function

Function MakeAnnotation
	Dim sAnnot As String
	sAnnot = &quot;&lt;annotation&gt;&quot; &amp; chr(10)
	oCursor.gotoPreviousParagraph(False)
	While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;Annotation&quot;) 
		sAnnot = sAnnot &amp; &quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot; &amp;  chr(10)
	Wend
	&apos; проверяем следующий абзац - если не анотация - назад, чтобы потом его обработать
	If oCursor.ParaStyleName() &lt;&gt; &quot;Annotation&quot; Then
		oCursor.gotoPreviousParagraph(False)
	End If
	sAnnot = sAnnot &amp; &quot;&lt;/annotation&gt;&quot;
	AddBodyArray(sAnnot, &quot;Annotation&quot;)
End Function

Function MakeSubtitle
	Dim sSubtitle As String, bEndPar As Boolean
	oCursor.gotoPreviousParagraph(False)
	If bMergeSubTitle = True Then &apos; собираем подзаголовки, идущие один за другим в одну строку
		sSubtitle = sSubtitle &amp; &quot;&lt;subtitle&gt;&quot;
		While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;SubTitle&quot;)
			sSubtitle = sSubtitle &amp; MakeParag &amp; &quot; &quot;
		Wend
		sSubtitle = sSubtitle &amp; &quot;&lt;/subtitle&gt;&quot;
		AddBodyArray(sSubtitle, &quot;SubTitle&quot;)
	Else &apos; подзаголовки не будут собираться в одну строку, а будут один под другим
		While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = &quot;SubTitle&quot;)
			AddBodyArray(&quot;&lt;subtitle&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/subtitle&gt;&quot;, &quot;SubTitle&quot;)
		Wend
	End If
	&apos; проверяем следующий абзац - если не подзаголовок - назад, чтобы потом его обработать
	If oCursor.ParaStyleName() &lt;&gt; &quot;SubTitle&quot; Then
		oCursor.gotoPreviousParagraph(False)
	End If
End Function

Function AddBodyArray(Para As String, TextType As String)
	Dim i As Integer
	i = Ubound(sBodyParagraphs(), 1) + 1
	If i &gt; 0 Then
		ReDim Preserve sBodyParagraphs(i, 1)
	Else Redim sBodyParagraphs(i, 1)
	End If
	sBodyParagraphs(lCurrentBodyPara,0) = Para &amp; chr(10)
	sBodyParagraphs(lCurrentBodyPara,1) = TextType
	lCurrentBodyPara = lCurrentBodyPara + 1
End Function

Function MakeSection(Level As String)
	Dim sPart As String, bEndPar As Boolean
	sPart = sPart &amp; &quot;&lt;section&gt;&quot; &amp; chr(10) &amp; &quot;&lt;title&gt;&quot; &amp; chr(10)
	oCursor.gotoPreviousParagraph(False)
	While(oCursor.gotoNextParagraph(False) AND oCursor.gotoEndOfParagraph(True) AND oCursor.ParaStyleName() = Level)
		sPart = sPart &amp; &quot;&lt;p&gt;&quot; &amp; MakeParag &amp; &quot;&lt;/p&gt;&quot;
	Wend
	sPart = sPart &amp; chr(10) &amp; &quot;&lt;/title&gt;&quot;
	&apos; проверяем следующий абзац - если не Уровень Level - назад, чтобы потом его обработать
	If oCursor.ParaStyleName() &lt;&gt; Level Then
		oCursor.gotoPreviousParagraph(False)
	End If
	AddBodyArray(sPart, Level)
End Function

Function Find (Style As String) As String
	Dim sResult As String
	Dim oStr As Object, oEnum As Object
	Dim oDesc As Object, iCount As Integer
	oDesc = ThisComponent.createSearchDescriptor()
	With oDesc
		.SearchStyles = true
		.setSearchString(Style)
	End With
	oEnum = ThisComponent.findAll(oDesc)
	If oEnum.getCount = 0 Then 
		Find = &quot;&quot;
		Exit Function
	End If
	If Style = &quot;Book Title&quot; Then
		For iCount = 0 to oEnum.getCount() - 1
			oStr = oEnum.getByIndex(iCount)
			sResult = sResult &amp; oStr.getString() &amp; &quot; &quot;
		Next iCount
		&apos;Find = oEnum.getByIndex(0).getString
		sResult = Mid(sResult, 1, Len(sResult)-1)
		Find = sResult
		Exit Function
	End If
	For iCount = 0 to oEnum.getCount() - 1
		oStr = oEnum.getByIndex(iCount)
		sResult = sResult &amp; &quot;&lt;p&gt;&quot; &amp; oStr.getString() &amp; &quot;&lt;/p&gt;&quot; &amp; chr(10)
	Next iCount
	Find = sResult
End Function

</script:module>